{"name":"Runtime","slug":"Runtime","count":5,"postlist":[{"title":"Runtime剖析01 --- 基本数据结构：objc_object & objc_class","uid":"6fca2ac91a092d45af749e0779750e56","slug":"2020-06-23-iOS-runtime-basic-structure","date":"2023-05-14T05:45:19.936Z","updated":"2023-05-14T05:45:19.936Z","comments":true,"path":"api/articles/2020-06-23-iOS-runtime-basic-structure.json","keywords":null,"cover":[],"text":"众所周知，Objective-C语言是一门动态性很强的语言，与C、C++等语言有着很大的不同。Objective-C语言的动态性基本上都是由Runtime机制进行支撑和实现的，Runtime的实现，融合了C、C++，以及汇编语言。 什么是Runtime？C、C++等静态语言中的各...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析02 --- 消息与消息发送机制","uid":"3007adc9b3f366505974b3565c38f1eb","slug":"2020-06-24-iOS-runtime-message-forward","date":"2023-05-14T05:45:19.936Z","updated":"2023-05-14T05:45:19.940Z","comments":true,"path":"api/articles/2020-06-24-iOS-runtime-message-forward.json","keywords":null,"cover":[],"text":"在Objective-C中，消息发送指Runtime会根据SEL查找对应的IMP，当查找到，则调用函数指针进行方法调用，若查找不到，则进入动态消息解析和消息转发流程，如果动态解析和消息转发失败，则程序会崩溃。 消息相关数据结构SELSEL称之为消息选择器，相当于一个key，在类的...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析03 --- “黑魔法” Method Swizzling","uid":"c17c44d6d8996ee062f87af24348061f","slug":"2020-06-30-iOS-runtime-method-swizzling","date":"2023-05-14T05:45:19.940Z","updated":"2023-05-14T05:45:19.940Z","comments":true,"path":"api/articles/2020-06-30-iOS-runtime-method-swizzling.json","keywords":null,"cover":null,"text":"方法替换，又称为Method Swizzling，是Objective-C语言中比较流行的“黑魔法”。动态替换方法实现，大多数情况下使用在一些检测类的业务逻辑中，同时，方法替换也带给开发者更多可能的新的开发方式。在简单剖析**Method Swizzling **前，先看看方法替...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析04 --- 深入理解Category","uid":"c6997d59d32873c326b54f9cbde95646","slug":"2020-07-01-iOS-runtime-category","date":"2023-05-14T05:45:19.940Z","updated":"2023-05-14T05:45:19.940Z","comments":true,"path":"api/articles/2020-07-01-iOS-runtime-category.json","keywords":null,"cover":null,"text":"在Objective-C中，可以通过Category添加属性、方法、协议，在Runtime中Class和Category都是通过结构体实现的。和Category相似的还有Extension，二者的区别在于，Extension在编译期就直接和原类编译在一起，而Category是在运...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析05 --- 再议iOS内存管理","uid":"e756f728cc576c6fe02245695ebbf9dd","slug":"2020-07-13-iOS-memory-manager","date":"2023-05-14T05:45:19.940Z","updated":"2023-05-14T05:45:19.940Z","comments":true,"path":"api/articles/2020-07-13-iOS-memory-manager.json","keywords":null,"cover":[],"text":"我们都知道，iOS中进行内存管理的管理模型是引用计数，但是这属于上层应用的范畴，在系统底层，iOS会根据不同的数据结构或者不同的数据类型，进行系统内存的分区，在不同的分区中，管理着自己的内存，另外，iOS的内存管理并不直接管理硬件内存，而是管理着硬件内存之上的一个过渡内存—虚拟内...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}]}