{"total":62,"pageSize":12,"pageCount":6,"data":[{"title":"\\#11\\ 二叉搜索树","uid":"1c072eaf9d0ebbcfebf6203a3cb43879","slug":"2019-12-25-Data-Structures-&-Algorithms-in-Swift-11","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2019-12-25-Data-Structures-&-Algorithms-in-Swift-11.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/11/cover.jpg","text":"二叉搜索树又称为二叉查找树（BST），是一种支持快速查找、插入和删除操作的树结构，例如下方的决策树，其中选择一方而放弃另一方的所有可能性，从而将问题减半。 在决策树中，一旦做出了决定并选择了某个分支，便不能回头，在选择的分支上一直查找直到叶子节点，得到最终决定。二叉搜索树在上一文...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#12\\ 自平衡二叉搜索树（AVL Trees）","uid":"4085c41c06b2e3ba45ef163b731b2c76","slug":"2019-12-27-Data-Structures-&-Algorithms-in-Swift-12","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2019-12-27-Data-Structures-&-Algorithms-in-Swift-12.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/12/cover.png","text":"在上文中，已经了解二叉搜索树的O(log n)性能特征，但是当二叉搜索树节点删除中，可能会出现不平衡的树，并降低树的性能到O(n)。这一文的内容将学习另一种改进了的二叉搜索树 — 自平衡二叉搜索树。 1962年，Georgy Adelson-Velsky和Evgenii Land...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#13\\ 字典树（Tries Tree）","uid":"7c0350b0f98d8a7fc26f52b6c73852fb","slug":"2020-01-06-Data-Structures-&-Algorithms-in-Swift-13","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-01-06-Data-Structures-&-Algorithms-in-Swift-13.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/13/cover.jpg","text":"Tries 是一颗用于存储可以表示为集合的数据的树，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#14\\ 二分查找（Binary Search）","uid":"193dbb4158d425c4c3d00532baa1c670","slug":"2020-01-07-Data-Structures-&-Algorithms-in-Swift-14","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-01-07-Data-Structures-&-Algorithms-in-Swift-14.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/14/cover.jpg","text":"二分查找是时间复杂度为O(log n)的搜索算法中较为高效的算法之一，这一点和在平衡的二叉搜索树中搜索元素的时间复杂度相当。在使用二分查找之前，有两个条件需要预先满足： 集合必须是在恒定的时间内执行索引操作，意味着集合必须是RandomAccessCollection类型的； 集...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#15\\ 堆数据结构（The Heap Data Structure）","uid":"4a00ba60db357b4d5652c54beb6b2091","slug":"2020-01-10-Data-Structures-&-Algorithms-in-Swift-15","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-01-10-Data-Structures-&-Algorithms-in-Swift-15.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/15/cover.jpg","text":"想必抓娃娃机如今没有人不知道其实什么了，抓娃娃机的爪子总是那么的难以控制，总是看起来容易的机会却难以如愿。抓抓机的爪子其实就工作在一个堆数据结构之上，爪子每次抓的几乎都是那边一堆玩具最上面的那一个，只有这样机会才会更大一些。 在本文中将学习关于堆（Heap）的基础知识，包含如何创...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#16\\ 优先级队列","uid":"5d749126a5c6ef9bea973d557d834975","slug":"2020-01-12-Data-Structures-&-Algorithms-in-Swift-16","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-01-12-Data-Structures-&-Algorithms-in-Swift-16.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/16/cover.png","text":"队列是一种先进先出（FIFO）的数据结构，而优先级队列是另一种队列结构，其可替代队列的先进先出顺序，该队列中的元素有着优先级的顺序。一个优先级队列也可以是： 最大优先级队列：队列中最前面的元素具有最高优先级； 最小优先级队列：队列中最前面的元素具有最低优先级。 当需要在给定的元素...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#17\\ 排序算法O(n^2)","uid":"8ac62db54bf242691e8bc332c52f0b5b","slug":"2020-01-15-Data-Structures-&-Algorithms-in-Swift-17","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-01-15-Data-Structures-&-Algorithms-in-Swift-17.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/17/cover.jpg","text":"**O(n^2)**的时间复杂度并不是一个最佳的性能表现，但是在某些情况下，该类别的排序算法非常有用，此类算法的空间复杂度表现良好，仅仅需要O(1)的恒定的额外内存空间，对于小型数据集来说，此类排序算法比更为复杂的排序算法更为有利。 在本文中，将学习饿三种不同的、O(n^2)时间...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#18\\ 归并排序（Merge Sort）","uid":"05deaa37bb6b9b668ab83d05b4918b64","slug":"2020-01-30-Data-Structures-&-Algorithms-in-Swift-18","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-01-30-Data-Structures-&-Algorithms-in-Swift-18.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/18/cover.jpg","text":"归并排序[Merge Sort]是最有效的排序算法之一，它的时间复杂度为O(n log n)，是所有通用排序算法中速度最快的一种。归并排序背后的思想是分而治之，即将一个大问题分解成多个更小、更易于解决的问题，然后将各个小问题的结果合并为最终结果。归并排序的终极秘诀是先拆分后合并。...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#19\\ 基数排序（Radix Sort）","uid":"1eff6ae9330e74043f153497674d46df","slug":"2020-02-01-Data-Structures-&-Algorithms-in-Swift-19","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-02-01-Data-Structures-&-Algorithms-in-Swift-19.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/19/cover.jpg","text":"**基数排序[Radix Sort]**是一种在线性时间内对整数进行排序的非比较算法。 为了简单起见，在本文中将关注以10为基数的整数排序，以及基数排序中的*最小有效位[LSD]*的变体等。 示例为了进行基数排序的工作方式，假设需要对如下的集合进行排序： var array &#...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#20\\ 堆排序（Heap Sort）","uid":"b14270b802509aef1b418b7534f574dc","slug":"2020-02-03-Data-Structures-&-Algorithms-in-Swift-20","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-02-03-Data-Structures-&-Algorithms-in-Swift-20.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/20/cover.jpg","text":"**堆排序[Heap Sort]**是另一种基于比较的排序算法，其利用堆对数组进行升序排序。关于堆数据结构，可以查看\\#15\\ 堆数据结构（The Heap Data Structure）中的介绍。 堆排序使用的是堆的优势，根据堆的定义，一个部分排序的二叉树具有如下的特质： 在最...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"iOS内存管理小结","uid":"efbbbd2e93d0b6b1478e69b9a9de5940","slug":"2020-06-17-iOS-memory-manage-tips","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2020-06-17-iOS-memory-manage-tips.json","cover":null,"text":"内存管理是指软件运行时对计算机内存资源的分配和使用的技术。其最主要的目的是如何高效，快速的分配，并且在适当的时候释放和回收内存资源。在早起的iOS开发中多采用MRC（手动引用计数）来进行内存管理，iOS 5引入了ARC（自动引用计数），90%以上的内存管理问题都交给了系统去进行，...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析01 --- 基本数据结构：objc_object & objc_class","uid":"6fca2ac91a092d45af749e0779750e56","slug":"2020-06-23-iOS-runtime-basic-structure","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.803Z","comments":true,"path":"api/articles/2020-06-23-iOS-runtime-basic-structure.json","cover":[],"text":"众所周知，Objective-C语言是一门动态性很强的语言，与C、C++等语言有着很大的不同。Objective-C语言的动态性基本上都是由Runtime机制进行支撑和实现的，Runtime的实现，融合了C、C++，以及汇编语言。 什么是Runtime？C、C++等静态语言中的各...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}]}