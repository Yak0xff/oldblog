{"total":64,"pageSize":12,"pageCount":6,"data":[{"title":"iOS内存管理小结","uid":"efbbbd2e93d0b6b1478e69b9a9de5940","slug":"2020-06-17-iOS-memory-manage-tips","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2020-06-17-iOS-memory-manage-tips.json","cover":null,"text":"内存管理是指软件运行时对计算机内存资源的分配和使用的技术。其最主要的目的是如何高效，快速的分配，并且在适当的时候释放和回收内存资源。在早起的iOS开发中多采用MRC（手动引用计数）来进行内存管理，iOS 5引入了ARC（自动引用计数），90%以上的内存管理问题都交给了系统去进行，...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析01 --- 基本数据结构：objc_object & objc_class","uid":"6fca2ac91a092d45af749e0779750e56","slug":"2020-06-23-iOS-runtime-basic-structure","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2020-06-23-iOS-runtime-basic-structure.json","cover":[],"text":"众所周知，Objective-C语言是一门动态性很强的语言，与C、C++等语言有着很大的不同。Objective-C语言的动态性基本上都是由Runtime机制进行支撑和实现的，Runtime的实现，融合了C、C++，以及汇编语言。 什么是Runtime？C、C++等静态语言中的各...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析02 --- 消息与消息发送机制","uid":"3007adc9b3f366505974b3565c38f1eb","slug":"2020-06-24-iOS-runtime-message-forward","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2020-06-24-iOS-runtime-message-forward.json","cover":[],"text":"在Objective-C中，消息发送指Runtime会根据SEL查找对应的IMP，当查找到，则调用函数指针进行方法调用，若查找不到，则进入动态消息解析和消息转发流程，如果动态解析和消息转发失败，则程序会崩溃。 消息相关数据结构SELSEL称之为消息选择器，相当于一个key，在类的...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析03 --- “黑魔法” Method Swizzling","uid":"c17c44d6d8996ee062f87af24348061f","slug":"2020-06-30-iOS-runtime-method-swizzling","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2020-06-30-iOS-runtime-method-swizzling.json","cover":null,"text":"方法替换，又称为Method Swizzling，是Objective-C语言中比较流行的“黑魔法”。动态替换方法实现，大多数情况下使用在一些检测类的业务逻辑中，同时，方法替换也带给开发者更多可能的新的开发方式。在简单剖析**Method Swizzling **前，先看看方法替...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析04 --- 深入理解Category","uid":"c6997d59d32873c326b54f9cbde95646","slug":"2020-07-01-iOS-runtime-category","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2020-07-01-iOS-runtime-category.json","cover":null,"text":"在Objective-C中，可以通过Category添加属性、方法、协议，在Runtime中Class和Category都是通过结构体实现的。和Category相似的还有Extension，二者的区别在于，Extension在编译期就直接和原类编译在一起，而Category是在运...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Runtime剖析05 --- 再议iOS内存管理","uid":"e756f728cc576c6fe02245695ebbf9dd","slug":"2020-07-13-iOS-memory-manager","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2020-07-13-iOS-memory-manager.json","cover":[],"text":"我们都知道，iOS中进行内存管理的管理模型是引用计数，但是这属于上层应用的范畴，在系统底层，iOS会根据不同的数据结构或者不同的数据类型，进行系统内存的分区，在不同的分区中，管理着自己的内存，另外，iOS的内存管理并不直接管理硬件内存，而是管理着硬件内存之上的一个过渡内存—虚拟内...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"《实现模式》读书小记","uid":"e82075038d4d045b9b352d5ca62ff95f","slug":"2022-05-01-iOS-implementation-patterns-tips","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2022-05-01-iOS-implementation-patterns-tips.json","cover":"/images/cover/2022-05-01-iOS-implementation-patterns-tips.jpg","text":"《实现模式》一书作者Kent Beck，软件开发方法学的泰山北斗，是最早研究软件开发模式和重构方法论的先导者之一，是敏捷开发的开创者之一，更是极限编程和测试驱动开发的创始人。该书是一本关于如何撰写代码的书。本书中的模式，是基于 Kent 对现存代码的阅读以及他自己的编程习惯而形成...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"读书小记","slug":"读书小记","count":2,"path":"api/categories/读书小记.json"}],"tags":[{"name":"读书小记","slug":"读书小记","count":2,"path":"api/tags/读书小记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"如何进行 Git 仓库瘦身","uid":"f0b7ed12bc36c7022d00f8d1ca004b00","slug":"2022-05-20-how-to-reduce-git","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2022-05-20-how-to-reduce-git.json","cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/yancy-min-842ofHC6MaI-unsplash.jpg","text":"对 Git 仓库的维护通常是为了减少仓库的大小。如果你从另外一个版本控制系统导入了一个仓库，你可能需要在导入后清除掉不必要的文件。本文着重于从一个 Git 仓库中删除大文件，并且包含下列主题： 理解从 Git 的历史记录中删除文件 使用 BFG 重写历史记录 可选，使用 git ...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识","slug":"开发知识","count":3,"path":"api/tags/开发知识.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"再议Objective-C 2.0 中的 Runtime","uid":"93feab5362ca8ea100621030ee9dd628","slug":"2022-05-25-runtime-again","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2022-05-25-runtime-again.json","cover":"/images/cover/2022-05-25-runtime-again.jpg","text":"绝大多数 iOS 开发者在学习 runtime 时都阅读过 runtime.h 文件中的这段代码: struct objc_class &#123; Class isa OBJC_ISA_AVAILABILITY; #if !__OBJC2__ Class super_class...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识","slug":"开发知识","count":3,"path":"api/tags/开发知识.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"或许是频繁切换git分支的救星--git worktree","uid":"af1206b3336cbf2448dc968e084c5e69","slug":"2022-06-24-git-worktree","date":"2023-05-24T09:24:36.375Z","updated":"2023-05-24T09:24:36.375Z","comments":true,"path":"api/articles/2022-06-24-git-worktree.json","cover":"/images/cover/2022-06-24-git-worktree.jpg","text":"在实际的开发过程中，你是否也需要经常来回切换分支，如果是，那么这篇文章介绍的方法或者正合适你。 频繁切换分支的情况 场景1：协助同事 第一种场景是你正在自己的分支feature-my上做着功能的开发，这时候你的同事给你发信息说，帮忙看一个问题，分支是：feature-abc,通常...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识","slug":"开发知识","count":3,"path":"api/tags/开发知识.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"基于MFCC的语音数据特征提取概述","uid":"c98e5d32ae2d193866c4e1eb0feb55b3","slug":"2018-07-24-speech-recognation-mfcc","date":"2023-05-24T09:24:36.371Z","updated":"2023-05-24T09:24:36.371Z","comments":true,"path":"api/articles/2018-07-24-speech-recognation-mfcc.json","cover":"/images/speech-recognition/audio_draw.png","text":"1. 概述语音是人类之间沟通交流的最直接也是最快捷方便的一种手段，而实现人类与计算机之间畅通无阻的语音交流，一直是人类追求的一个梦想。 伴随着移动智能设备的普及，各家移动设备的厂家也开始在自家的设备上集成了语音识别系统，像Apple Siri、Microsoft Cortana、...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":10,"path":"api/categories/机器学习.json"}],"tags":[{"name":"机器学习 MFCC","slug":"机器学习-MFCC","count":1,"path":"api/tags/机器学习-MFCC.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"11条数据化运营不得不知的数据预处理经验（无码篇）","uid":"4e8d84f448a6e8b441c0b97b84207797","slug":"2018-07-26-11-tips","date":"2023-05-24T09:24:36.371Z","updated":"2023-05-24T09:24:36.371Z","comments":true,"path":"api/articles/2018-07-26-11-tips.json","cover":null,"text":"数据预处理是数据化运营过程中重要的环节，直接影响着后期所有的数据工作质量和价值输出。从数据预处理的主要内容来看，包括数据清洗、转换、归约、聚合、抽样等。本文将摒弃理论和方法说教，直接介绍内容本身可能遇到的问题以及应对方法。 3.1 数据清洗：缺失值、异常值和重复值的处理 清洗：是...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"数据科学","slug":"数据科学","count":2,"path":"api/categories/数据科学.json"}],"tags":[{"name":"数据科学","slug":"数据科学","count":1,"path":"api/tags/数据科学.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}]}