{"total":64,"pageSize":12,"pageCount":6,"data":[{"title":"【网文转帖】我什么时候可以称自己为高级开发人员？","uid":"a624b9d2b57fce741977b91273d0a5a2","slug":"2023-05-18-when-can-i-call-myself-a-senior-developer","date":"2023-05-25T12:00:10.985Z","updated":"2023-05-25T12:00:10.985Z","comments":true,"path":"api/articles/2023-05-18-when-can-i-call-myself-a-senior-developer.json","cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/senior-developer.jpg","text":"Renan Benatti Dias目前处于高级开放岗位，但是在此之前他在中级开发岗位停留了很长时间。在此期间，他思考了成为高级开发人员需要什么，如何准备以及如果掌握了所需技术能力和敢于承担责任后，最终该如何做好职业规划等。文中，他概述了高级开发人员所需的必要技术能力和经验等，并...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":10,"path":"api/categories/技术人生.json"}],"tags":[{"name":"读书笔记","slug":"读书笔记","count":2,"path":"api/tags/读书笔记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},{"title":"《大道至简---软件工程实践者的思想》  读书笔记","uid":"5ea20968d8e7130fecf289d5412e680c","slug":"2022-10-29-dadaozhijian","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2022-10-29-dadaozhijian.json","cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/ryosuke-nasu--Pn_23L3OEs-unsplash.jpg","text":"内容提要本书提出了审视软件工程的全新视角和软件工程的 体系模型(EHM，软件工程层状模型)。本书用非工 程的方式重新解析软件工程现象，全面、细致而深 刻地分析了工程中各个环节的由来、价值及其内在 关系，综合论述开发、工程二者的现状。全书语言 轻快，可读性强，薄且有味。 本书作者周...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":10,"path":"api/categories/技术人生.json"}],"tags":[{"name":"读书笔记","slug":"读书笔记","count":2,"path":"api/tags/读书笔记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},{"title":"如何成为更好的iOS开发工程师之S.O.L.I.D原则","uid":"2c512333e4536b8feed1c221955d12fa","slug":"2019-11-06-solid-principles-for-becoming-a-better-ios-developer","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-11-06-solid-principles-for-becoming-a-better-ios-developer.json","cover":"/images/solid/cover.jpg","text":"在互联网时代，S.O.L.I.D原则可谓影响力久远，在计算机程序设计语言以及各个平台特性中都有S.O.L.I.D的身影，S.O.L.I.D原则也指导着软件工程的设计与编码工程。iOS平台的软件开发亦是软件开发领域的一支，S.O.L.I.D原则也同样对iOS软件开发有效，并且做称为...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":10,"path":"api/categories/技术人生.json"}],"tags":[{"name":"开发知识 技术人生","slug":"开发知识-技术人生","count":1,"path":"api/tags/开发知识-技术人生.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},{"title":"What is Event Modeling?","uid":"0eccc1a2eb6b2260157a3a0e333d43b7","slug":"2019-10-23-what-is-event-modeling","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-10-23-what-is-event-modeling.json","cover":"/images/img/hero.jpg","text":"Event Modeling is a way to design a blueprint for an Information System of any size or scale. It is done in a way that allows the clearest c...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":10,"path":"api/categories/技术人生.json"}],"tags":[{"name":"技术人生","slug":"技术人生","count":5,"path":"api/tags/技术人生.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"关于iOS App启动时间的那些事","uid":"065e711203c90529e076df9f2cdf951d","slug":"2019-10-30-app-start-time-measure-and-improvement","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-10-30-app-start-time-measure-and-improvement.json","cover":"/images/start-time/cover.jpg","text":"在iOS应用程序的开发过程中，应用的启动时长可谓是影响应用程序用户体验的第一要素，过长的应用启动耗时，势必带来用户的长时间等待，直接让用户失去了对应用程序进一步体验的兴趣，影响应用程序在用户心中的印象。一般情况下，应用程序开发完成上线后，接下来就是针对架构、性能、业务进行进一步优...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"探索性数据分析入门","uid":"3158244125ce6cdd857a3a3ca56bd557","slug":"2019-11-04-simple-eda","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-11-04-simple-eda.json","cover":"/images/simple-eda/cover.png","text":"在数据科学领域里，最具挑战的问题之一便是如何确定数据对特定问题带来价值。在使用机器学习或者深度学习之前，确定数据或者特征是否利于特定问题，是数据科学后续工作的重中之重。 因此，在进行数据科学问题之前，通常会对数据进行分析，洞察数据中所涵盖的深层特性是否利于特定问题，以及是否适用于...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"数据科学","slug":"数据科学","count":2,"path":"api/categories/数据科学.json"}],"tags":[{"name":"数据科学 Python","slug":"数据科学-Python","count":1,"path":"api/tags/数据科学-Python.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"Swift语言中的轻量级API设计","uid":"9bf30773ec01d0aa2cdc72baf1be3d0d","slug":"2019-11-28-lightweight-api-design-in-swift","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-11-28-lightweight-api-design-in-swift.json","cover":"/images/lightweight-api/cover.jpg","text":"Swift语言自诞生以来，总是或多或少受到人们的非议，新生的编程语言难免有些不够尽善尽美，但是哪种编程语言是尽善尽美的呢？OC语言算得上是一种古老的面向对象语言了，发展至今，其版本仍处于2.0，但是Apple为了让其看起来强大一点，增加了很多特性，例如Block、instance...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#1\\ 为什么要学习数据结构与算法","uid":"e90242255f8181a299a4107cc70159e8","slug":"2019-12-01-Data-Structures-&-Algorithms-in-Swift-01","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-12-01-Data-Structures-&-Algorithms-in-Swift-01.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/1/cover.jpg","text":"随机网络上有大量的程序员应该学习数据结构和算法的文章。还记得实在大学时代的时候，系统的学习过数据结构、算法相关的课程，而后几乎没有系统学习过了。工作后从一开始的各种业务逻辑的开发，慢慢深入了解到系统底层，了解了代码的执行效率以及对硬件设备资源的消耗基本上都是由数据结构和算法决定的...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#2\\ 认识 Array & Dictionary","uid":"c0089ea14d61cc249075e2e9c2241913","slug":"2019-12-01-Data-Structures-&-Algorithms-in-Swift-02","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-12-01-Data-Structures-&-Algorithms-in-Swift-02.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/2/cover.jpg","text":"在 Swift Standard Library 中包含了Swift语言的核心组件。在标准库框架中你可以发现很多可用于应用程序开发的同居和类型，在开始设计自己的数据结构前，了解Swift语言本身的语言特性是设计良好数据结构和算法设计的基础。 在此篇内容中，着重了解 Swift S...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#3\\ 关于时间复杂度和大O符号","uid":"ed1a650be4c536b8ed544197809a0599","slug":"2019-12-02-Data-Structures-&-Algorithms-in-Swift-03","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-12-02-Data-Structures-&-Algorithms-in-Swift-03.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/3/cover.jpg","text":"算法复杂度的衡量问题在软件开发的诞生早起就已经被提出来，并且有多个方面具体的问题。例如，从系统的架构来看，可伸缩性的架构设计和算法实现，应用程序是如何在数据特征增加的情况下被合理有效地激活的；从数据库的角度来看，数据库的处理能力是否能够应对越来越多的数据和用户行为等。 对于算法而...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#4\\ 单向链表的Swift实现","uid":"433ae949273168d0f60f97343029174d","slug":"2019-12-03-Data-Structures-&-Algorithms-in-Swift-04","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-12-03-Data-Structures-&-Algorithms-in-Swift-04.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/4/cover.jpg","text":"链表是一种线性的、单向的数据结构，不同于数组连续的内存存储，链表中的元素在内存是独立的对象。链表具有以下理论优势： 元素插入和从列表头部删除元素的时间恒定； 具有可靠的性能特性。 如上图所示，链表的结构是一个节点结构。节点具有两个功能： 保存值； 保存下一个节点的指针。nil节点...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#5\\ Linked List && Swift Collection Protocol","uid":"e7521306a70b406b8e5f7047760055b6","slug":"2019-12-04-Data-Structures-&-Algorithms-in-Swift-05","date":"2023-05-25T12:00:10.981Z","updated":"2023-05-25T12:00:10.981Z","comments":true,"path":"api/articles/2019-12-04-Data-Structures-&-Algorithms-in-Swift-05.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/5/cover.jpg","text":"在Swift标准库（Swift standard library）中定义了很多协议或协议的集合，这些协议分别对应了特定的数据类型，每个协议都对所定义的数据类型有一些特性和性能方面的保证，而对于开发者而言，这些协议也是自定义数据结构和对现有数据类型进行扩展的基础准则。在这些协议的集...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}]}