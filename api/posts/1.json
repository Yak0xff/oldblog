{"total":64,"pageSize":12,"pageCount":6,"data":[{"title":"【网文转帖】我什么时候可以称自己为高级开发人员？","uid":"a624b9d2b57fce741977b91273d0a5a2","slug":"2023-05-18-when-can-i-call-myself-a-senior-developer","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2023-05-18-when-can-i-call-myself-a-senior-developer.json","cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/senior-developer.jpg","text":"Renan Benatti Dias目前处于高级开放岗位，但是在此之前他在中级开发岗位停留了很长时间。在此期间，他思考了成为高级开发人员需要什么，如何准备以及如果掌握了所需技术能力和敢于承担责任后，最终该如何做好职业规划等。文中，他概述了高级开发人员所需的必要技术能力和经验等，并...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":10,"path":"api/categories/技术人生.json"}],"tags":[{"name":"读书笔记","slug":"读书笔记","count":2,"path":"api/tags/读书笔记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},{"title":"使用 SwiftUI 构建大型应用程序---模块化架构指南【译】","uid":"07d3abf92c8398cc87ec4baa82641a83","slug":"2023-05-13-build-large-scale-apps-swiftui","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2023-05-13-build-large-scale-apps-swiftui.json","cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/fotis-fotopoulos-SyvsTmuuZyM-unsplash.jpg","text":"软件架构始终是一个热门争论的话题，特别是当有这么多不同的选择时。在过去的 8-12 个月里，作者一直在尝试使用 MV 模式来构建客户端&#x2F;服务器应用程序，并在作者最初的文章中写到了这一点 SwiftUI 架构 - MV 模式方法的完整指南。在本文中，作者将讨论如何将 MV...","link":"","photos":[],"count_time":{"symbolsCount":"43k","symbolsTime":"39 mins."},"categories":[{"name":"Swift Learning","slug":"Swift-Learning","count":1,"path":"api/categories/Swift-Learning.json"}],"tags":[{"name":"SwiftUI","slug":"SwiftUI","count":1,"path":"api/tags/SwiftUI.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},{"title":"《大道至简---软件工程实践者的思想》  读书笔记","uid":"5ea20968d8e7130fecf289d5412e680c","slug":"2022-10-29-dadaozhijian","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2022-10-29-dadaozhijian.json","cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/ryosuke-nasu--Pn_23L3OEs-unsplash.jpg","text":"内容提要本书提出了审视软件工程的全新视角和软件工程的 体系模型(EHM，软件工程层状模型)。本书用非工 程的方式重新解析软件工程现象，全面、细致而深 刻地分析了工程中各个环节的由来、价值及其内在 关系，综合论述开发、工程二者的现状。全书语言 轻快，可读性强，薄且有味。 本书作者周...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":10,"path":"api/categories/技术人生.json"}],"tags":[{"name":"读书笔记","slug":"读书笔记","count":2,"path":"api/tags/读书笔记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},{"title":"\\#5\\ Linked List && Swift Collection Protocol","uid":"e7521306a70b406b8e5f7047760055b6","slug":"2019-12-04-Data-Structures-&-Algorithms-in-Swift-05","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2019-12-04-Data-Structures-&-Algorithms-in-Swift-05.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/5/cover.jpg","text":"在Swift标准库（Swift standard library）中定义了很多协议或协议的集合，这些协议分别对应了特定的数据类型，每个协议都对所定义的数据类型有一些特性和性能方面的保证，而对于开发者而言，这些协议也是自定义数据结构和对现有数据类型进行扩展的基础准则。在这些协议的集...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#6\\ Linked List 挑战","uid":"87b78748d49eafbc45cf485f76a0100a","slug":"2019-12-05-Data-Structures-&-Algorithms-in-Swift-06","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2019-12-05-Data-Structures-&-Algorithms-in-Swift-06.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/6/cover.jpg","text":"本文内容将针对LinkedList的五大通用性场景问题，进行求解。这些问题相比多数挑战来说相对简单，主要是为了巩固关于LinkedList的知识。 Challenge 1：创建按照反向顺序打印链表元素的函数。&#x2F;&#x2F; LinkedList 1 -&gt; 2 -&...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#7\\ Stack & Stack Simple Challenges","uid":"d2a03c6015acad9ab2a35a4a08b03676","slug":"2019-12-08-Data-Structures-&-Algorithms-in-Swift-07","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2019-12-08-Data-Structures-&-Algorithms-in-Swift-07.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/7/cover.jpeg","text":"栈（Stack）是一个常见的基础类型数据结构，在生活中经常也能看到栈的身影，例如一本书、一叠现金等等。栈的数据结构在概念上和对象的物理存储栈相同。再向栈添加元素时，需要将其放在栈顶，通俗称压栈，而从站内删除元素时，始终删除的是栈顶的元素，又称为出栈，而这种进栈和出栈的特性使得栈属...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#8\\ 队列的Swift实现与操作定义","uid":"69dccdbf9286082e902aaae1dff82001","slug":"2019-12-10-Data-Structures-&-Algorithms-in-Swift-08","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2019-12-10-Data-Structures-&-Algorithms-in-Swift-08.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/8/cover.jpg","text":"在生活中，人人都熟悉排队等待。无论你是在排队购买喜欢的电影的电影票，还是排队等待打印一份文件等等，这些都是队列（Queue）数据结构。在上文\\#7\\ Stack &amp; Stack Simple Challenges中已经提到过队列和栈属于基本的数据结构类型，但是其在应用层面...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#9\\ 一般树与树节点遍历","uid":"ad7db3b90885866da085b02a06020b3f","slug":"2019-12-23-Data-Structures-&-Algorithms-in-Swift-09","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2019-12-23-Data-Structures-&-Algorithms-in-Swift-09.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/9/cover.png","text":"在计算机编程的世界中，树是一种非常重要的数据结构。树用于解决很多计算机编程世界的挑战，例如： 等级关系的描述 分类数据的管理 分类查找操作 在计算机算法中，树有很多种，每一种都有其特有的形状和大小。在本文中将学习关于树的基础知识，以及使用Swfit编程语言实现树结构等。 术语关于...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#10\\ 二叉树及其有序、前序和后序遍历","uid":"0e0f6f0242f4e4a48493fd0fe5fe0ab7","slug":"2019-12-25-Data-Structures-&-Algorithms-in-Swift-10","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2019-12-25-Data-Structures-&-Algorithms-in-Swift-10.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/10/cover.jpg","text":"在上一文中认识了一般树结构，其每一个节点可能会有多个子节点。二叉树也是树型结构，只不过其每一个节点最多只有两个节点，通常称为左节点和右节点。 二叉树的Swift实现首先定义二叉树的基本属性，如下： public class BinaryNode&lt;Element&gt; &#...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#11\\ 二叉搜索树","uid":"1c072eaf9d0ebbcfebf6203a3cb43879","slug":"2019-12-25-Data-Structures-&-Algorithms-in-Swift-11","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2019-12-25-Data-Structures-&-Algorithms-in-Swift-11.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/11/cover.jpg","text":"二叉搜索树又称为二叉查找树（BST），是一种支持快速查找、插入和删除操作的树结构，例如下方的决策树，其中选择一方而放弃另一方的所有可能性，从而将问题减半。 在决策树中，一旦做出了决定并选择了某个分支，便不能回头，在选择的分支上一直查找直到叶子节点，得到最终决定。二叉搜索树在上一文...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#12\\ 自平衡二叉搜索树（AVL Trees）","uid":"4085c41c06b2e3ba45ef163b731b2c76","slug":"2019-12-27-Data-Structures-&-Algorithms-in-Swift-12","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2019-12-27-Data-Structures-&-Algorithms-in-Swift-12.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/12/cover.png","text":"在上文中，已经了解二叉搜索树的O(log n)性能特征，但是当二叉搜索树节点删除中，可能会出现不平衡的树，并降低树的性能到O(n)。这一文的内容将学习另一种改进了的二叉搜索树 — 自平衡二叉搜索树。 1962年，Georgy Adelson-Velsky和Evgenii Land...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#13\\ 字典树（Tries Tree）","uid":"7c0350b0f98d8a7fc26f52b6c73852fb","slug":"2020-01-06-Data-Structures-&-Algorithms-in-Swift-13","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2020-01-06-Data-Structures-&-Algorithms-in-Swift-13.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/13/cover.jpg","text":"Tries 是一颗用于存储可以表示为集合的数据的树，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}]}