{"title":"iOS开发隐藏技能如何开启","uid":"2d699b2c1e0ab59b8228bca658a563da","slug":"2019-03-08-iOS_Tips","date":"2023-05-13T15:08:12.961Z","updated":"2023-05-13T15:08:12.961Z","comments":true,"path":"api/articles/2019-03-08-iOS_Tips.json","keywords":null,"cover":"/images/ios-jq/logo.jpeg","content":"<p>在iOS的开发过程中，我们经常会遇到一些需要关心但是无法直接得到的信息，本文记录了一些能够开启IDE隐藏功能的方法，帮助开发者了解更多的信息等。</p>\n<h2 id=\"1-在-Xcode-中追踪构建时间\"><a href=\"#1-在-Xcode-中追踪构建时间\" class=\"headerlink\" title=\"1. 在 Xcode 中追踪构建时间\"></a>1. 在 Xcode 中追踪构建时间</h2><p>在使用Xcode进行项目的编译和打包的时候，总是耗时的，而这个时间Xcode本身是具有统计功能的。如果需要查看此时间，需要开启Xcode的<code>ShowBuildOperationDuration</code>选项，打开命令行工具，直接输入如下命令即可。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">defaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES</code></pre>\n\n<p>开启后，Xcode的构建完成后，会在Xcode的状态栏显示本次构建的耗时。</p>\n<span id=\"more\"></span>\n\n\n<p><img src=\"/images/ios-jq/Track-build-time-in-Xcode.png\"></p>\n<h2 id=\"2-改善-Swift-项目构建时间\"><a href=\"#2-改善-Swift-项目构建时间\" class=\"headerlink\" title=\"2. 改善 Swift 项目构建时间\"></a>2. 改善 Swift 项目构建时间</h2><p>在 Xcode 9.2 的发布说明中提到了一个可以改进Swift项目构建时间的实验性功能，可以通过开启<code>BuildSystemScheduleInherentlyParallelCommandsExclusively</code>来实现提速。</p>\n<p><img src=\"/images/ios-jq/Xcode-New-Features.png\"></p>\n<p>开启方式也是通过命令行工具，输入如下命令开启：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">defaults write com.apple.dt.Xcode BuildSystemScheduleInherentlyParallelCommandsExclusively -bool NO</code></pre>\n\n<p>如果要关闭此功能，输入如下命令即可：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">defaults delete com.apple.dt.Xcode BuildSystemScheduleInherentlyParallelCommandsExclusively</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>！！！重要：根据发布说明，这是一个实验性功能，会在项目构建期间增加内存使用量。</p></blockquote>\n<h2 id=\"3-在全屏模式下同时使用Xcode和模拟器\"><a href=\"#3-在全屏模式下同时使用Xcode和模拟器\" class=\"headerlink\" title=\"3. 在全屏模式下同时使用Xcode和模拟器\"></a>3. 在全屏模式下同时使用Xcode和模拟器</h2><p>在Xcode全屏的情况下，如果需要同时使用模拟器在Xcode 9以前是很难实现的，但是在Xcode 9 以上，我们可以做到这样。我们只需要在命令行中输入如下的命令来开启这个功能即可：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">defaults write com.apple.iphonesimulator AllowFullscreenMode -bool YES</code></pre>\n\n<p>完成后，如果我们在全屏模式下使用Xcode + 模拟器就很轻松了。如下：</p>\n<p><img src=\"/images/ios-jq/full-screen.png\"></p>\n<p>如果你想在模拟器中使用更多的Apple为公开的隐藏功能，你需要启用Apple隐藏的内部菜单。为此，您需要在根目录中创建一个名称为“AppleInternal”的空文件夹（<a href=\"https://www.theiphonewiki.com/wiki//AppleInternal\">详解</a>）。只需在下面运行此命令并重新启动模拟器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo mkdir &#x2F;AppleInternal</code></pre>\n\n<p>如果上述命令输入后，出现权限问题。可参考下图中的步骤：</p>\n<p><img src=\"/images/ios-jq/AppleInternal_os_setting.png\"></p>\n<p>最终你可以在模拟器菜单中发现一些新的功能特性（下图仅为部分功能）：</p>\n<p><img src=\"/images/ios-jq/more-features-simu.png\"></p>\n<p>更多关于sdsds的介绍可参考：<a href=\"https://sspai.com/post/42038\">一条命令让您的 macOS 用 Touch ID 授权 sudo！</a></p>\n<h2 id=\"4-捕获iOS模拟器视频\"><a href=\"#4-捕获iOS模拟器视频\" class=\"headerlink\" title=\"4. 捕获iOS模拟器视频\"></a>4. 捕获iOS模拟器视频</h2><p>如果需要针对模拟器视图进行截图或者录视频，你可以使用<code>xcrun command-line</code>工具，其命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xcrun simctl io booted recordVideo &lt;filename&gt;.&lt;file extension&gt;.</code></pre>\n\n<p>例如，如果要录视频，对应的命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xcrun simctl io booted recordVideo appvideo.mov</code></pre>\n\n<p>在录制的过程中，你可以按下<code>Control + c</code> 来停止录制，文件保存的位置就在当前的目录中。</p>\n<h2 id=\"5-从Finder将文件共享到Simulator\"><a href=\"#5-从Finder将文件共享到Simulator\" class=\"headerlink\" title=\"5. 从Finder将文件共享到Simulator\"></a>5. 从Finder将文件共享到Simulator</h2><p>从 Xcode 9 开始，所有的模拟器便具有了Finder的扩展功能，可以让你从Mac的Finder直接共享文件到模拟器，对应的菜单在文件上右键 -&gt; 分享 中：</p>\n<p><img src=\"/images/ios-jq/share-file-to-sim.png\"></p>\n<p>当然，还有一种更为简单的共享方式，直接拖拽文件到模拟器即可完成共享。另外也可以使用下面的simctl命令对图像&#x2F;视频文件做类似的操作：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xcrun simctl addmedia booted &lt;PATH TO IMAGE&#x2F;VIDEO&gt;</code></pre>\n\n<h2 id=\"6-使用指纹授权sudo\"><a href=\"#6-使用指纹授权sudo\" class=\"headerlink\" title=\"6. 使用指纹授权sudo\"></a>6. 使用指纹授权sudo</h2><p>本方式仅针对具有Touch Bar的Macbook Pro。如果你想使用你的指纹来授权sudo，可以在命令行中输入如下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo sed -i &quot;.bak&quot; &#39;2s&#x2F;^&#x2F;auth       sufficient     pam_tid.so\\&#39;$&#39;\\n&#x2F;g&#39; &#x2F;etc&#x2F;pam.d&#x2F;sudo</code></pre>\n\n<p>然后输入管理员密码，回车即可。现在可以使用你的指纹进行sudo了，想象都激动。</p>\n<h2 id=\"7-使用声音通知调试AutoLayout约束\"><a href=\"#7-使用声音通知调试AutoLayout约束\" class=\"headerlink\" title=\"7. 使用声音通知调试AutoLayout约束\"></a>7. 使用声音通知调试AutoLayout约束</h2><p>在调试AutoLayout约束的时候，你可以通过声音通知的方式来提醒AutoLayout约束是否合规。使用此项功能，只需要在Xcode项目中增加<code>UIConstraintBasedLayoutPlaySoundOnUnsatisfiable</code>参数即可，增加后，如果AutoLayout约束出现异常或者冲突，会有提示声音：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-_UIConstraintBasedLayoutPlaySoundOnUnsatisfiable YES</code></pre>\n\n<p><img src=\"/images/ios-jq/AutoLayout-sound.png\"></p>\n<h2 id=\"8-从Xcode中移除不可用的模拟器\"><a href=\"#8-从Xcode中移除不可用的模拟器\" class=\"headerlink\" title=\"8. 从Xcode中移除不可用的模拟器\"></a>8. 从Xcode中移除不可用的模拟器</h2><p>这个命令将从Xcode中删除所有不可用的模拟器。这里的“不可用”表示模拟器和Xcode的xcode-select版本不相符导致的模拟器不可用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xcrun simctl delete unavailable</code></pre>\n\n\n","text":"在iOS的开发过程中，我们经常会遇到一些需要关心但是无法直接得到的信息，本文记录了一些能够开启IDE隐藏功能的方法，帮助开发者了解更多的信息等。 1. 在 Xcode 中追踪构建时间在使用Xcode进行项目的编译和打包的时候，总是耗时的，而这个时间Xcode本身是具有统计功能的。...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%9C%A8-Xcode-%E4%B8%AD%E8%BF%BD%E8%B8%AA%E6%9E%84%E5%BB%BA%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">1. 在 Xcode 中追踪构建时间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%94%B9%E5%96%84-Swift-%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">2. 改善 Swift 项目构建时间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%9C%A8%E5%85%A8%E5%B1%8F%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8Xcode%E5%92%8C%E6%A8%A1%E6%8B%9F%E5%99%A8\"><span class=\"toc-text\">3. 在全屏模式下同时使用Xcode和模拟器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%8D%95%E8%8E%B7iOS%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%A7%86%E9%A2%91\"><span class=\"toc-text\">4. 捕获iOS模拟器视频</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E4%BB%8EFinder%E5%B0%86%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E5%88%B0Simulator\"><span class=\"toc-text\">5. 从Finder将文件共享到Simulator</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E4%BD%BF%E7%94%A8%E6%8C%87%E7%BA%B9%E6%8E%88%E6%9D%83sudo\"><span class=\"toc-text\">6. 使用指纹授权sudo</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E4%BD%BF%E7%94%A8%E5%A3%B0%E9%9F%B3%E9%80%9A%E7%9F%A5%E8%B0%83%E8%AF%95AutoLayout%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">7. 使用声音通知调试AutoLayout约束</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E4%BB%8EXcode%E4%B8%AD%E7%A7%BB%E9%99%A4%E4%B8%8D%E5%8F%AF%E7%94%A8%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%99%A8\"><span class=\"toc-text\">8. 从Xcode中移除不可用的模拟器</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"《禅与摩托车维修艺术》之良质","uid":"db6fdca23b371a06d21cf5b1b5c1c533","slug":"2019-03-07-zen","date":"2023-05-13T15:08:12.961Z","updated":"2023-05-13T15:08:12.961Z","comments":true,"path":"api/articles/2019-03-07-zen.json","keywords":null,"cover":"/images/zen/bg2011121812.jpg","text":"美国作家罗伯特·波西格（Robert M Pirsig）的《禅与摩托车维修艺术》，是一部奇特而有趣的哲学读物，作者进行了大量科学技术哲学以及其他哲学方面的讨论，见解独特而又机智。又是一部心灵自传，在与西方两千年来哲学传统的深入理解与争辩中，作者一度精神上不堪重负，但最终寻找到了生...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"读书小记","slug":"读书小记","count":2,"path":"api/categories/读书小记.json"}],"tags":[{"name":"读书小记","slug":"读书小记","count":2,"path":"api/tags/读书小记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"什么是决策树","uid":"09ad77e68bf4944e7f633c8fdb014fd1","slug":"2019-03-14-cart","date":"2023-05-13T15:08:12.961Z","updated":"2023-05-13T15:08:12.961Z","comments":true,"path":"api/articles/2019-03-14-cart.json","keywords":null,"cover":"/images/cart/cover.jpg","text":"决策树(Decision Tree）是在已知各种情况发生概率的基础上，通过构成决策树来求取净现值的期望值大于等于零的概率，评价项目风险，判断其可行性的决策分析方法，是直观运用概率分析的一种图解法。由于这种决策分支画成图形很像一棵树的枝干，故称决策树。在机器学习中，决策树是一个预测...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":10,"path":"api/categories/机器学习.json"}],"tags":[{"name":"机器学习","slug":"机器学习","count":7,"path":"api/tags/机器学习.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}