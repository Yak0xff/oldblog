{"title":"基于MFCC的语音数据特征提取概述","uid":"c98e5d32ae2d193866c4e1eb0feb55b3","slug":"2018-07-24-speech-recognation-mfcc","date":"2023-05-14T05:45:19.932Z","updated":"2023-05-14T05:45:19.932Z","comments":true,"path":"api/articles/2018-07-24-speech-recognation-mfcc.json","keywords":null,"cover":"/images/speech-recognition/audio_draw.png","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>语音是人类之间沟通交流的最直接也是最快捷方便的一种手段，而实现人类与计算机之间畅通无阻的语音交流，一直是人类追求的一个梦想。</p>\n<p>伴随着移动智能设备的普及，各家移动设备的厂家也开始在自家的设备上集成了语音识别系统，像Apple Siri、Microsoft Cortana、Google Now等语音助手的出现，使得人们在使用移动设备的同时，也能够进行语音交流，极大的方便了人们的生活。但是此类助手也存在一些尴尬的瞬间，例如在一些工作场合或者聚会的场合，某人的一句“Hey Siri”就可能唤醒多台苹果设备，使用者难免尴尬困惑。</p>\n<p>而此类予语音助手背后，均是一种被称作“闻声识人”的计算机技术，称为<strong>语音识别</strong>。语音识别技术属于生物认证技术，而其中的说话人识别（speaker recognize，SR）是其中的一种，该技术通常也被称为<strong>声纹识别</strong>技术，该技术是一项通过语音波形中反映说话人生理特征和行为特征的一组语音参数，自动识别说话人身份的技术。其核心是通过预先录入说话人的声音样本，提取出说话人独一无二的语音特征并存入数据库，应用的时候将待验证的语音进行特征提取并与数据库中的特征进行匹配，以确定说话人的身份。</p>\n<h2 id=\"1-1-什么是声纹？\"><a href=\"#1-1-什么是声纹？\" class=\"headerlink\" title=\"1.1 什么是声纹？\"></a>1.1 什么是声纹？</h2><p>声纹（voiceprint）是用电声学仪器显示的携带者言语信息的声波频谱，是由波长、频率以及强度等百余种特征维度组成的生物特征，具有稳定性、可测量性以及唯一性等特点。</p>\n<ul>\n<li>人类语言的产生是由人体语言中枢与发生器官之间进行的一个复杂的生物物理反应过程。发声器官如舌头、牙齿、喉咙、肺、鼻子在尺寸和形态上因人而异，所有任何两个人的声波图谱都有一定的差异性。</li>\n<li>每个人的语音声学特征既有相对稳定性，又有个体差异性。这种差异可能来自生理、病理、心理、模拟、伪装等，也可能会周围环境的干扰相关。</li>\n<li>由于每个人的发生器官都有其独特性，因此在一般情况下，人们仍然能区别不同的人的声音或者判断是否是同一个人的声音。</li>\n</ul>\n<p>声纹不像图像那样的直观，在实际的分析中，可以通过波形图和语谱图进行绘制展现，例如下图是一段从1到10的读数语音文件对应的波形图和语谱图（上部分为声音波形图，下部分为声音语谱图）：</p>\n<p><img src=\"/images/speech-recognition/audio_draw.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import wave\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfw &#x3D; wave.open(&#39;test.wav&#39;,&#39;r&#39;)\nsoundInfo &#x3D; fw.readframes(-1)\nsoundInfo &#x3D; np.fromstring(soundInfo,np.int16)\nf &#x3D; fw.getframerate()\nfw.close()\n\nplt.subplot(211)\nplt.plot(soundInfo)\nplt.ylabel(&#39;Amplitude&#39;)\nplt.title(&#39;Wave from and spectrogram of test.wav&#39;)\n\nplt.subplot(212)\nplt.specgram(soundInfo,Fs &#x3D; f, scale_by_freq &#x3D; True, sides &#x3D; &#39;default&#39;)\nplt.ylabel(&#39;Frequency&#39;)\nplt.xlabel(&#39;time(seconds)&#39;)\nplt.show()</code></pre>\n\n<ul>\n<li>语谱图更简单的绘制方法，可参考 <a href=\"https://docs.scipy.org/doc/scipy-0.19.0/reference/generated/scipy.signal.spectrogram.html\">scipy.signal.spectrogram</a>。</li>\n<li>语谱图绘制的原理，可参考 <a href=\"http://www.frank-zalkow.de/en/code-snippets/create-audio-spectrograms-with-python.html?i=1\">Create audio spectrograms with Python</a>。</li>\n</ul>\n<p>与其他的生物认证技术如指纹识别、人脸识别、虹膜识别等相同，声纹识别具有不会遗忘、无需记忆和使用方便等优点。在生物认证技术领域，说话人识别技术以其独特的方便性、经济性和准确性收到人们的广泛关注，并日益成为人们日常生活和工作中重要且普及的安全认证方式。</p>\n<p>但是，说话人识别有着其他生物认证技术所不具有的优势：</p>\n<ul>\n<li>用户接受度高：以声音作为识别特征，因其非接触性和自然醒，用户易接受。用户不用刻意的用手指触摸相应的传感器上，也不用将眼睛凑向摄像头，只需要简单的说一两句话即可完成识别认证。</li>\n<li>设备成本低：对输入设备如麦克风，摄像头等没有特别的要求，特征提取，模型训练和匹配只需要普通的计算机即可完成。</li>\n<li>其他生物认证特征技术各有其劣势：指纹识别需要特殊的传感器芯片，虹膜识别精确度较高，但是设备较为昂贵。</li>\n<li>在远程应用和移动互联网环境下优势明显：通过电话、移动设备进行身份认证，声音是最具优势的生物特征，语音控制也逐渐成为流行的交互形式，以声音为特征的身份鉴别技术也越发重要。</li>\n</ul>\n<h2 id=\"1-2-声纹识别技术的历史\"><a href=\"#1-2-声纹识别技术的历史\" class=\"headerlink\" title=\"1.2 声纹识别技术的历史\"></a>1.2 声纹识别技术的历史</h2><p>声纹识别技术的研究始于20世纪30年代，早期的工作主要集中于人耳听辨实验和探讨听音识别的可能性方面。随着研究手段和计算机技术的发展，研究工作逐渐脱离了单纯的人耳听辨，使得通过机器自动识别人的声音称为可能。在这个过程中也出现了很多不同的计算机技术，从早期的模板匹配到最新的深度学习技术，均在不断的刷新着语音识别技术手段。整体来看，声纹识别技术的发展经历了七个技术演进之路，详见下图（下图来自speakin）：</p>\n<p><img src=\"/images/speech-recognition/voiceprint_history.jpg\"></p>\n<h2 id=\"1-3-声纹识别的种类\"><a href=\"#1-3-声纹识别的种类\" class=\"headerlink\" title=\"1.3 声纹识别的种类\"></a>1.3 声纹识别的种类</h2><p>声纹识别根据实际应用的范畴可以分为 1:1识别 和 1:N识别两种：</p>\n<ul>\n<li><p>1:1识别：指确定待识别的一段语音是否来自其所声明的目标说话人，即确认目标说话人是目标说话人的过程。通常应用于电子支付、智能硬件、银行证券交易等。1:1识别有两个系统的性能评价参量，分别为</p>\n<ul>\n<li>错误接受率(False Acceptation Rate, FAR)：将非目标说话人判别为目标说话人造成的错误率</li>\n<li>错误拒绝率(False Rejection Rate, FRR)：将目标说话人误识成非目标说话人造成的错误率</li>\n</ul>\n<p>  对安全性要求越高，则设定阈值越高，此时接受目标说话人的条件越严格，即FRR越高，FAR越低；对用户体验要求越高，则设定阈值越低，此时接受目标说话人的条件越宽松，即FAR越高，FRR越低。在声纹系统中，可以通过设定不同的阈值来平衡FAR和FRR。</p>\n</li>\n<li><p>1:N识别：指判定待识别语音属于目标说话人模型集合中的哪一个人，即在N个人中找到目标说话人的过程。通常应用于公安司法、军队国防等。</p>\n</li>\n</ul>\n<h1 id=\"2-语音的特征提取方法概述\"><a href=\"#2-语音的特征提取方法概述\" class=\"headerlink\" title=\"2. 语音的特征提取方法概述\"></a>2. 语音的特征提取方法概述</h1><p>语音是一种数字信号，其数字⾳频的采样率为44100Hz（根据乃奎斯特取样定理得出的结果，在模拟讯号数字化的过程中，如果保证取样频率大于模拟讯号最高频率的2倍，就能100%精确地再还原出原始的模拟讯息。音频的最高频率为20kHz，所以取样率至少应该大于40kHz，为了留一点安全系数，再考虑到工程上的习惯，最终选择了44.1kHz这个数值）。通常情况下使用傅里叶变换将信号在时域与频域之间进行转换，而频谱图可以显示傅里叶变换后的振幅与时间和频率的对应关系。</p>\n<h2 id=\"2-1-特征提取方法\"><a href=\"#2-1-特征提取方法\" class=\"headerlink\" title=\"2.1 特征提取方法\"></a>2.1 特征提取方法</h2><p>对于语音识别系统而言，所提取的特征参数需要能够反映特定发信的信息，在说话人无关的系统中，更要求参数能够反映不同说话人相同发音的信息，要求说话人的特征参数要能够代表特定的说话人，能够区分不同说话人相同语音之间的差异，最好能够做到与具体的发音内容无关，也称为文本无关。</p>\n<p>在语音特征参数提取技术的发展历程中，<a href=\"https://blog.csdn.net/qingkongyeyue/article/details/52149839\">线性预测编码（Linear Predictive Coding, LPC）</a>被广泛应用于语音特征参数的提取，其中包括LPC系数、反射LPC系数、面积函数和LPC倒谱系数，能够很好的反映语音的声道特征，但是却对语音的其他特征无能为力。</p>\n<p> 不同于LPC等通过对人的发声机理进行研究而得到的声学特征，Mel倒谱系数MFCC是受人的听觉系统研究成果推出而导出的声学特征。根据人耳听觉机理的研究发现，人耳对不同频率的声波有不同的听觉灵敏度。从200Hz到5000Hz的语音信号对语音的清晰度影响最大。人们从低频到高频这一段频带内按临界带宽的大小由密到疏安排一组带通滤波器，对输入信号进行滤波。将每个带通滤波器输出的信号能量作为信号的基本特征，对此特征经过进一步处理后就可以作为语音的输入特征。由于这种特征不依赖于信号的性质，对输入信号不做任何的假设和限制，又利用了听觉模型的研究成果。因此，这种参数比基于声道模型的LPC相比具有更好的鲁棒性，更符合人耳的听觉特性，而且当信噪比降低时仍然具有较好的识别性能。</p>\n<p> MFCC（MeI-Freguency CeptraI Coefficients）是需要语音特征参数提取方法之一，因其独特的基于倒谱的提取方式，更加的符合人类的听觉原理，因而也是最为普遍、最有效的语音特征提取算法。MFCC是在Mel标度频率域提取出来的倒谱系数，Mel标度描述了人耳对频率感知的非线性特性。</p>\n<h2 id=\"2-2-MFCC语音特征提取\"><a href=\"#2-2-MFCC语音特征提取\" class=\"headerlink\" title=\"2.2 MFCC语音特征提取\"></a>2.2 MFCC语音特征提取</h2><p>MFCC 语音特征的提取过程，如下图：</p>\n<p><img src=\"/images/speech-recognition/mfcc-process.png\"></p>\n<p>需要对语音信号进行预加重、分帧、加窗等等处理，而这些处理的方式均是为了能够最大化语音信号的某些信息，以达到最好特征参数的提取。</p>\n<h3 id=\"2-2-1-预加重\"><a href=\"#2-2-1-预加重\" class=\"headerlink\" title=\"2.2.1 预加重\"></a>2.2.1 预加重</h3><p>预加重其实就是将语音信号通过一个高通滤波器，来增强语音信号中的高频部分，并保持在低频到高频的整个频段中，能够使用同样的信噪比求频谱。在本实验中，选取的高通滤波器传递函数为：</p>\n<p><img src=\"/images/speech-recognition/high_pass_filter.png\"></p>\n<p>式中a的值介于0.9-1.0之间，我们通常取0.97。同时，预加重也是为了消除发生过程中声带和嘴唇的效应，来补偿语音信号受到发音系统所抑制的高频部分，也为了突出高频的共振峰。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def pre_emphasis(signal, coefficient&#x3D;0.97):\n    &#39;&#39;&#39;对信号进行预加重&#39;&#39;&#39;\n    return numpy.append(signal[0], signal[1:] - coefficient * signal[:-1])</code></pre>\n\n<h3 id=\"2-2-2-分帧\"><a href=\"#2-2-2-分帧\" class=\"headerlink\" title=\"2.2.2 分帧\"></a>2.2.2 分帧</h3><p>分帧是指在跟定的音频样本文件中，按照某一个固定的时间长度分割，分割后的每一片样本，称之为一帧，这里需要区分时域波形中的帧，分割后的一帧是分析提取MFCC的样本，而时域波形中的帧是时域尺度上对音频的采样而取到的样本。</p>\n<p>分帧是先将N个采样点集合成一个观测单位，也就是分割后的帧。通常情况下N的取值为512或256，涵盖的时间约为20-30ms。也可以根据特定的需要进行N值和窗口间隔的调整。为了避免相邻两帧的变化过大，会让两相邻帧之间有一段重叠区域，此重叠区域包含了M个取样点，一般M的值约为N的1&#x2F;2或1&#x2F;3。</p>\n<p>语音识别中所采用的信号采样频率一般为8kHz或16kHz。以8kHz来说，若帧长度为256个采样点，则对应的时间长度是256&#x2F;8000×1000&#x3D;32ms。本次实验中所使用的采样率(Frames Per Second)16kHz，窗长25ms（400个采样点），窗间隔为10ms（160个采样点）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def audio2frame(signal, frame_length, frame_step, winfunc&#x3D;lambda x: numpy.ones((x,))):\n    &#39;&#39;&#39;分帧&#39;&#39;&#39;\n    signal_length &#x3D; len(signal)\n    frame_length &#x3D; int(round(frame_length))\n    frame_step &#x3D; int(round(frame_step))\n    if signal_length &lt;&#x3D; frame_length:\n        frames_num &#x3D; 1\n    else:\n        frames_num &#x3D; 1 + int(math.ceil((1.0 * signal_length - frame_length) &#x2F; frame_step))\n    pad_length &#x3D; int((frames_num - 1) * frame_step + frame_length)\n    zeros &#x3D; numpy.zeros((pad_length - signal_length,))\n    pad_signal &#x3D; numpy.concatenate((signal, zeros))\n    indices &#x3D; numpy.tile(numpy.arange(0, frame_length), (frames_num, 1)) + numpy.tile(numpy.arange(0, frames_num * frame_step, frame_step),(frame_length, 1)).T\n    indices &#x3D; numpy.array(indices, dtype&#x3D;numpy.int32)\n    frames &#x3D; pad_signal[indices]\n    win &#x3D; numpy.tile(winfunc(frame_length), (frames_num, 1))\n    return frames * win</code></pre>\n\n<h3 id=\"2-2-3-加窗\"><a href=\"#2-2-3-加窗\" class=\"headerlink\" title=\"2.2.3 加窗\"></a>2.2.3 加窗</h3><p>在对音频进行分帧之后，需要对每一帧进行加窗，以增加帧左端和右端的连续性，减少频谱泄漏。在提取MFCC的时候，比较常用的窗口函数为Hamming窗。</p>\n<p>假设分帧后的信号为 <em>S(n),n&#x3D;0,1,2…,N-1</em>，其中N为帧的大小，那么进行加窗的处理则为：</p>\n<p><img src=\"/images/speech-recognition/fps_hamming1.jpg\"></p>\n<p>W(n)的形式如下：</p>\n<p><img src=\"/images/speech-recognition/fps_hamming2.jpg\"></p>\n<p>不同的a值会产生不同的汉明窗，一般情况下a取值0.46。进行值替换后，W(n)则为：</p>\n<p><img src=\"/images/speech-recognition/fps_hamming3.png\"></p>\n<p>对应的汉明窗时域波形类似下图：</p>\n<p><img src=\"/images/speech-recognition/fps_hamming4.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def deframesignal(frames, signal_length, frame_length, frame_step, winfunc&#x3D;lambda x: numpy.ones((x,))):\n    &#39;&#39;&#39;加窗&#39;&#39;&#39;\n    signal_length &#x3D; round(signal_length)\n    frame_length &#x3D; round(frame_length)\n    frames_num &#x3D; numpy.shape(frames)[0]\n    assert numpy.shape(frames)[1] &#x3D;&#x3D; frame_length, &#39;&quot;frames&quot;矩阵大小不正确，它的列数应该等于一帧长度&#39;\n    indices &#x3D; numpy.tile(numpy.arange(0, frame_length), (frames_num, 1)) + numpy.tile(numpy.arange(0, frames_num * frame_step, frame_step),(frame_length, 1)).T\n    indices &#x3D; numpy.array(indices, dtype&#x3D;numpy.int32)\n    pad_length &#x3D; (frames_num - 1) * frame_step + frame_length\n    if signal_length &lt;&#x3D; 0:\n        signal_length &#x3D; pad_length\n    recalc_signal &#x3D; numpy.zeros((pad_length,))\n    window_correction &#x3D; numpy.zeros((pad_length, 1))\n    win &#x3D; winfunc(frame_length)\n    for i in range(0, frames_num):\n        window_correction[indices[i, :]] &#x3D; window_correction[indices[i, :]] + win + 1e-15\n        recalc_signal[indices[i, :]] &#x3D; recalc_signal[indices[i, :]] + frames[i, :]\n    recalc_signal &#x3D; recalc_signal &#x2F; window_correction\n    return recalc_signal[0:signal_length]\n</code></pre>\n\n<h3 id=\"2-2-4-对信号进行离散傅立叶变换-DFT\"><a href=\"#2-2-4-对信号进行离散傅立叶变换-DFT\" class=\"headerlink\" title=\"2.2.4 对信号进行离散傅立叶变换 (DFT)\"></a>2.2.4 对信号进行离散傅立叶变换 (DFT)</h3><p>由于信号在时域上的变换通常很难看出信号的特性，所有通常将它转换为频域上的能量分布来观察，不同的能量分布，代表不同语音的特性。所以在进行了加窗处理后，还需要再经过离散傅里叶变换以得到频谱上的能量分布。对分帧加窗后的各帧信号进行快速傅里叶变换得到各帧的频谱。并对语音信号的频谱取模平方得到语音信号的功率谱。设语音信号的DFT为：</p>\n<p><img src=\"/images/speech-recognition/dft1.png\"></p>\n<p>能量的分布为：</p>\n<p><img src=\"/images/speech-recognition/dft2.png\"></p>\n<p>在本次实验中，采用DFT长度 N&#x3D;512，结果值保留前257个系数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def spectrum_magnitude(frames, NFFT &#x3D; 512):\n    &#39;&#39;&#39;计算每一帧经过FFT变幻以后的频谱的幅度，若frames的大小为N*L,则返回矩阵的大小为N*NFFT&#39;&#39;&#39;\n    complex_spectrum &#x3D; numpy.fft.rfft(frames, NFFT)\n    return numpy.absolute(complex_spectrum)\n\ndef spectrum_power(frames, NFFT):\n    &#39;&#39;&#39;计算每一帧傅立叶变换以后的功率谱&#39;&#39;&#39;\n    return 1.0 &#x2F; NFFT * numpy.square(spectrum_magnitude(frames, NFFT))</code></pre>\n\n<p>下图是有频谱到功率谱的转换结果示意图：</p>\n<p><img src=\"/images/speech-recognition/dft3.png\"></p>\n<h3 id=\"2-2-5-应用梅尔滤波器-Mel-Filterbank\"><a href=\"#2-2-5-应用梅尔滤波器-Mel-Filterbank\" class=\"headerlink\" title=\"2.2.5 应用梅尔滤波器 (Mel Filterbank)\"></a>2.2.5 应用梅尔滤波器 (Mel Filterbank)</h3><p>MFCC考虑到了人类的听觉特征，先将线性频谱映射到基于听觉感知的Mel非线性频谱中，然后转换到倒谱上。 在Mel频域内，人对音调的感知度为线性关系。举例来说，如果两段语音的Mel频率相差两倍，则人耳听起来两者的音调也相差两倍。Mel滤波器的本质其实是一个尺度规则，通常是将能量通过一组Mel尺度的三角形滤波器组，如定义有M个滤波器的滤波器组，采用的滤波器为三角滤波器，中心频率为 <em>f(m),m&#x3D;1,2…M</em>，M通常取22-26。f(m)之间的间隔随着m值的减小而缩小，随着m值的增大而增宽，如图所示：</p>\n<p><img src=\"/images/speech-recognition/mel1.jpg\"></p>\n<p>从频率到Mel频率的转换公式为： </p>\n<p> <img src=\"/images/speech-recognition/mel_hz.jpg\"></p>\n<p> 其中 f 为语音信号的频率，单位赫兹（Hz）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def hz2mel(hz):\n    &#39;&#39;&#39;把频率hz转化为梅尔频率&#39;&#39;&#39;\n    return 2595 * numpy.log10(1 + hz &#x2F; 700.0)\n\ndef mel2hz(mel):\n    &#39;&#39;&#39;把梅尔频率转化为hz&#39;&#39;&#39;\n    return 700 * (10 ** (mel &#x2F; 2595.0) - 1)</code></pre>\n\n<p>假如有10个Mel滤波器（在实际应用中通常一组Mel滤波器组有26个滤波器。），首先要选择一个最高频率和最低频率，通常最高频率为8000Hz，最低频率为300Hz。使用从频率转换为Mel频率的公式将300Hz转换为401.25Mels，8000Hz转换为2834.99Mels，由于有10个滤波器，每个滤波器针对两个频率的样点，样点之间会进行重叠处理，因此需要12个点，意味着需要在401.25和2834.99之间再线性间隔出10个附加点，如：</p>\n<p><em>m(i) &#x3D; 401.25,622.50,843.75,1065.00,1286.25,1507.50, 1728.74,1949.99,2171.24,2392.49,2613.74,2834.99</em></p>\n<p>现在使用从Mel频率转换为频率的公式将它们转换回赫兹：</p>\n<p><em>h(i) &#x3D; 300,517.33,781.90,1103.97,1496.04,1973.32,2554.33, 3261.62,4122.63,5170.76,6446.70,8000</em></p>\n<p>将频率映射到最接近的DFT频率：</p>\n<p><img src=\"/images/speech-recognition/mel2.png\"></p>\n<p><em>f(i) &#x3D; 9,16,25,35,47,63,81,104,132,165,206,256</em></p>\n<p>于是，我们得到了一个由10个Mel滤波器构成的Mel滤波器组。</p>\n<p><img src=\"/images/speech-recognition/mel3.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def get_filter_banks(filters_num&#x3D;20, NFFT&#x3D;512, samplerate&#x3D;16000, low_freq&#x3D;0, high_freq&#x3D;None):\n    &#39;&#39;&#39;计算梅尔三角间距滤波器，该滤波器在第一个频率和第三个频率处为0，在第二个频率处为1&#39;&#39;&#39;\n    low_mel &#x3D; hz2mel(low_freq)\n    high_mel &#x3D; hz2mel(high_freq)\n    mel_points &#x3D; numpy.linspace(low_mel, high_mel, filters_num + 2)\n    hz_points &#x3D; mel2hz(mel_points)\n    bin &#x3D; numpy.floor((NFFT + 1) * hz_points &#x2F; samplerate)\n    fbank &#x3D; numpy.zeros([filters_num, NFFT &#x2F; 2 + 1])\n    for j in xrange(0, filters_num):\n        for i in xrange(int(bin[j]), int(bin[j + 1])):\n            fbank[j, i] &#x3D; (i - bin[j]) &#x2F; (bin[j + 1] - bin[j])\n        for i in xrange(int(bin[j + 1]), int(bin[j + 2])):\n            fbank[j, i] &#x3D; (bin[j + 2] - i) &#x2F; (bin[j + 2] - bin[j + 1])\n    return fbank</code></pre>\n\n<h3 id=\"2-2-6-对频谱进行离散余弦变换-DCT\"><a href=\"#2-2-6-对频谱进行离散余弦变换-DCT\" class=\"headerlink\" title=\"2.2.6 对频谱进行离散余弦变换 (DCT)\"></a>2.2.6 对频谱进行离散余弦变换 (DCT)</h3><p>在上一步的基础上使⽤离散余弦变换，即进⾏了⼀个傅⽴叶变换的逆变换，得到倒谱系数。</p>\n<p><img src=\"/images/speech-recognition/dct.png\"></p>\n<p>由此可以得到26个倒谱系数。只取其[2:13]个系数，第1个用能量的对数替代，这13个值即为所需的13个MFCC倒谱系数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def lifter(cepstra, L&#x3D;22):\n    &#39;&#39;&#39;升倒谱函数&#39;&#39;&#39;\n    if L &gt; 0:\n        nframes, ncoeff &#x3D; numpy.shape(cepstra)\n        n &#x3D; numpy.arange(ncoeff)\n        lift &#x3D; 1 + (L &#x2F; 2) * numpy.sin(numpy.pi * n &#x2F; L)\n        return lift * cepstra\n    else:\n        return cepstra</code></pre>\n\n<h3 id=\"2-2-7-动态差分参数的提取（包括一阶微分系数和加速系数）\"><a href=\"#2-2-7-动态差分参数的提取（包括一阶微分系数和加速系数）\" class=\"headerlink\" title=\"2.2.7 动态差分参数的提取（包括一阶微分系数和加速系数）\"></a>2.2.7 动态差分参数的提取（包括一阶微分系数和加速系数）</h3><p>标准的倒谱参数MFCC只反映了语音参数的静态特性，语音的动态特性可以用这些静态特征的差分谱来描述。通常会把动、静态特征结合起来以有效提高系统的识别性能。差分参数的计算可以采用下面的公式：</p>\n<p><img src=\"/images/speech-recognition/dlog.png\"></p>\n<p>上式中，d(t)表示第t个一阶微分，c(t)表示第t个倒谱系数，Q表示倒谱系数的阶数，K表示一阶导数的时间差，可取1或2。将上式的结果再代入就可以得到加速系数。</p>\n<p>⾄此，我们计算到了了⾳频⽂件每⼀帧的39个Mel频率倒谱系数（13个MFCC+13个一阶微分系数+13个加速系数），这些即为一个语音文件的特征数据，这些特征数据可以运用在之后的分类中。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def derivate(feat, big_theta&#x3D;2, cep_num&#x3D;13):\n    &#39;&#39;&#39;计算一阶系数或者加速系数的一般变换公式&#39;&#39;&#39;\n    result &#x3D; numpy.zeros(feat.shape)\n    denominator &#x3D; 0\n    for theta in numpy.linspace(1, big_theta, big_theta):\n        denominator &#x3D; denominator + theta ** 2\n    denominator &#x3D; denominator * 2\n    for row in numpy.linspace(0, feat.shape[0] - 1, feat.shape[0]):\n        tmp &#x3D; numpy.zeros((cep_num,))\n        numerator &#x3D; numpy.zeros((cep_num,))\n        for t in numpy.linspace(1, cep_num, cep_num):\n            a &#x3D; 0\n            b &#x3D; 0\n            s &#x3D; 0\n            for theta in numpy.linspace(1, big_theta, big_theta):\n                if (t + theta) &gt; cep_num:\n                    a &#x3D; 0\n                else:\n                    a &#x3D; feat[row][t + theta - 1]\n                if (t - theta) &lt; 1:\n                    b &#x3D; 0\n                else:\n                    b &#x3D; feat[row][t - theta - 1]\n                s +&#x3D; theta * (a - b)\n            numerator[t - 1] &#x3D; s\n        tmp &#x3D; numerator * 1.0 &#x2F; denominator\n        result[row] &#x3D; tmp\n    return result</code></pre>\n\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p>本文针对语音数据的特征提取方法—MFCC进行了简单的概述和实践，MFCC是音频特征处理中比较常用而且很有效的方法。当特征数据提取出来之后，就可以进一步的进行数据的归一化、标准化，然后应用于机器学习、神经网络等等模型训练算法中，以得到能够识别语音类别的模型。在实际的应用中，可能还需要考虑很多的其他因素，例如源语音数据的采集方法、采集时长、模型的构建方式、模型的部署方式等等因素，因此需要根据业务的具体场景，来进行平衡取舍，以达到识别的时效性、准确性等。</p>\n<p>目前关于语音识别相关的研究还在持续中，目标是能够最小化成本的在移动端部署语音识别相关的功能，提高SDK在人工智能方便的能力等。</p>\n<h2 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"4. 参考资料\"></a>4. 参考资料</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Mel-frequency_cepstrum\">Mel-frequency cepstrum</a></li>\n<li><a href=\"http://practicalcryptography.com/miscellaneous/machine-learning/guide-mel-frequency-cepstral-coefficients-mfccs/\">Mel Frequency Cepstral Coefficient (MFCC) tutorial\n</a></li>\n<li><a href=\"https://musicinformationretrieval.com/\">Notes on Music Information Retrieval</a></li>\n<li><a href=\"http://www.cnblogs.com/daniel-D/p/3244718.html\">机器学习中距离和相似性度量方法</a></li>\n</ul>\n","text":"1. 概述语音是人类之间沟通交流的最直接也是最快捷方便的一种手段，而实现人类与计算机之间畅通无阻的语音交流，一直是人类追求的一个梦想。 伴随着移动智能设备的普及，各家移动设备的厂家也开始在自家的设备上集成了语音识别系统，像Apple Siri、Microsoft Cortana、...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":10,"path":"api/categories/机器学习.json"}],"tags":[{"name":"机器学习 MFCC","slug":"机器学习-MFCC","count":1,"path":"api/tags/机器学习-MFCC.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. 概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A3%B0%E7%BA%B9%EF%BC%9F\"><span class=\"toc-text\">1.1 什么是声纹？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E5%A3%B0%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%86%E5%8F%B2\"><span class=\"toc-text\">1.2 声纹识别技术的历史</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%A3%B0%E7%BA%B9%E8%AF%86%E5%88%AB%E7%9A%84%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">1.3 声纹识别的种类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E8%AF%AD%E9%9F%B3%E7%9A%84%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2. 语音的特征提取方法概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.1 特征提取方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-MFCC%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96\"><span class=\"toc-text\">2.2 MFCC语音特征提取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-%E9%A2%84%E5%8A%A0%E9%87%8D\"><span class=\"toc-text\">2.2.1 预加重</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-2-%E5%88%86%E5%B8%A7\"><span class=\"toc-text\">2.2.2 分帧</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-3-%E5%8A%A0%E7%AA%97\"><span class=\"toc-text\">2.2.3 加窗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-4-%E5%AF%B9%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E7%A6%BB%E6%95%A3%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2-DFT\"><span class=\"toc-text\">2.2.4 对信号进行离散傅立叶变换 (DFT)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-5-%E5%BA%94%E7%94%A8%E6%A2%85%E5%B0%94%E6%BB%A4%E6%B3%A2%E5%99%A8-Mel-Filterbank\"><span class=\"toc-text\">2.2.5 应用梅尔滤波器 (Mel Filterbank)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-6-%E5%AF%B9%E9%A2%91%E8%B0%B1%E8%BF%9B%E8%A1%8C%E7%A6%BB%E6%95%A3%E4%BD%99%E5%BC%A6%E5%8F%98%E6%8D%A2-DCT\"><span class=\"toc-text\">2.2.6 对频谱进行离散余弦变换 (DCT)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-7-%E5%8A%A8%E6%80%81%E5%B7%AE%E5%88%86%E5%8F%82%E6%95%B0%E7%9A%84%E6%8F%90%E5%8F%96%EF%BC%88%E5%8C%85%E6%8B%AC%E4%B8%80%E9%98%B6%E5%BE%AE%E5%88%86%E7%B3%BB%E6%95%B0%E5%92%8C%E5%8A%A0%E9%80%9F%E7%B3%BB%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">2.2.7 动态差分参数的提取（包括一阶微分系数和加速系数）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3. 总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">4. 参考资料</span></a></li></ol></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"Runtime剖析02 --- 消息与消息发送机制","uid":"3007adc9b3f366505974b3565c38f1eb","slug":"2020-06-24-iOS-runtime-message-forward","date":"2023-05-14T05:45:19.936Z","updated":"2023-05-14T05:45:19.940Z","comments":true,"path":"api/articles/2020-06-24-iOS-runtime-message-forward.json","keywords":null,"cover":[],"text":"在Objective-C中，消息发送指Runtime会根据SEL查找对应的IMP，当查找到，则调用函数指针进行方法调用，若查找不到，则进入动态消息解析和消息转发流程，如果动态解析和消息转发失败，则程序会崩溃。 消息相关数据结构SELSEL称之为消息选择器，相当于一个key，在类的...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"11条数据化运营不得不知的数据预处理经验（无码篇）","uid":"4e8d84f448a6e8b441c0b97b84207797","slug":"2018-07-26-11-tips","date":"2023-05-14T05:45:19.932Z","updated":"2023-05-14T05:45:19.932Z","comments":true,"path":"api/articles/2018-07-26-11-tips.json","keywords":null,"cover":null,"text":"数据预处理是数据化运营过程中重要的环节，直接影响着后期所有的数据工作质量和价值输出。从数据预处理的主要内容来看，包括数据清洗、转换、归约、聚合、抽样等。本文将摒弃理论和方法说教，直接介绍内容本身可能遇到的问题以及应对方法。 3.1 数据清洗：缺失值、异常值和重复值的处理 清洗：是...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"数据科学","slug":"数据科学","count":2,"path":"api/categories/数据科学.json"}],"tags":[{"name":"数据科学","slug":"数据科学","count":1,"path":"api/tags/数据科学.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}