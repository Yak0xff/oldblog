{"title":"从Keras开始构建iOS平台手写数字实时识别","uid":"4e4a7be388e7ca1f326d22f43bf851ec","slug":"2019-01-22-keras_mnist_for_iOS","date":"2023-05-14T05:45:19.932Z","updated":"2023-05-14T05:45:19.932Z","comments":true,"path":"api/articles/2019-01-22-keras_mnist_for_iOS.json","keywords":null,"cover":"/images/keras-mnist-for-ios/cover.jpg","content":"<p>本文将介绍如何构建和训练一个深度学习网络来识别手写数字，以及如何将训练所得的深度网络模型转换为iOS平台的机器学习框架CoreML格式，并集成进iOS应用程序中以实时识别数字等。</p>\n<h1 id=\"10步之内完成模型的构建、训练和发布使用\"><a href=\"#10步之内完成模型的构建、训练和发布使用\" class=\"headerlink\" title=\"10步之内完成模型的构建、训练和发布使用\"></a><strong>10步之内完成模型的构建、训练和发布使用</strong></h1><p><strong>TLDR；</strong></p>\n<p>本文中暂时不会介绍卷积神经网络的细节内容，例如如何使用卷积层、池化层训练深度学习网络，以及如何使用预训练模型识别目标等，相关卷积神经网络细节的内容将会放在本文内容之后，进行详细的介绍。本文旨在介绍如何一步一步的从数据的获取、整理、模型的构建、训练以及后面的格式转换、使用等介绍Keras框架的基本使用和如何使用CoreML体系在一个实实在在的应用程序中使用模型等。</p>\n<p>下图是最终结果的预览：</p>\n<p><img src=\"https://liip.rokka.io/www_inarticle/812493/output.gif\"></p>\n<p>接下来，开始一步步的实现相关的过程等。</p>\n<h2 id=\"1-如何开始\"><a href=\"#1-如何开始\" class=\"headerlink\" title=\"1. 如何开始\"></a>1. <strong>如何开始</strong></h2><p>To have a fully working example I thought we’d start with a toy dataset like the <a href=\"https://en.wikipedia.org/wiki/MNIST_database\">MNIST set of handwritten letters</a> and train a deep learning network to recognize those. Once it’s working nicely on our PC, we will port it to an iPhone X using the <a href=\"https://developer.apple.com/documentation/coreml\">CoreML standard</a>.</p>\n<p>在计算机程序设计学习的过程中，几乎都是以一个经典的“Hello World”程序开始的。而在机器学习领域，同样具有类似“Hello World”的一个经典入门级数据集——<a href=\"https://en.wikipedia.org/wiki/MNIST_database\">MNIST</a>，该数据集是一系列手写数字0到9的图片文件，这里的目的是使用这个数据集训练一个深度学习网络来识别它们。在开始之前，你或许对iOS平台的CoreML以及keras还很陌生，你可以先了解一下它们的体系和设计：</p>\n<ul>\n<li>CoreML：</li>\n</ul>\n<p><a href=\"https://developer.apple.com/documentation/coreml\">Core ML | Apple Developer Documentation</a></p>\n<ul>\n<li>Keras：</li>\n</ul>\n<p><a href=\"https://keras.io/zh/\">Keras 中文文档</a></p>\n<h2 id=\"2-获取数据\"><a href=\"#2-获取数据\" class=\"headerlink\" title=\"2. 获取数据\"></a>2. 获取数据</h2><p>在大多数的Python机器学习类库中，都有内置的数据集访问接口，以方便使用者的使用，在Keras中也不例外，可以很方便的使用其内置的数据集访问接口获取数据集，具体的接口定义在<code>keras.datasets</code>中，具体的使用如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 使用Keras内置数据集访问接口导入数据集并对数据集进行转换\n    from keras.datasets import mnist\n    from keras.utils import np_utils\n    from keras import backend as K\n    \n    def mnist_data():\n        # 定义输入图像的维度\n        img_rows, img_cols &#x3D; 28, 28\n        # 加载数据集\n        (X_train, Y_train), (X_test, Y_test) &#x3D; mnist.load_data()\n    \n        if K.image_data_format() &#x3D;&#x3D; &#39;channels_first&#39;:\n            X_train &#x3D; X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)\n            X_test &#x3D; X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)\n            input_shape &#x3D; (1, img_rows, img_cols)\n        else:\n            X_train &#x3D; X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\n            X_test &#x3D; X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\n            input_shape &#x3D; (img_rows, img_cols, 1)\n    \n        # 数据缩放，将原来的 [0, 255] 缩放至 [0, 1]\n        X_train &#x3D; X_train.astype(&#39;float32&#39;)&#x2F;255\n        X_test &#x3D; X_test.astype(&#39;float32&#39;)&#x2F;255\n    \n        # 对原始数据中的目标值进行One-Hot Encoding，使得目标数据更加的稀疏\n        Y_train &#x3D; np_utils.to_categorical(Y_train, 10)\n        Y_test &#x3D; np_utils.to_categorical(Y_test, 10)\n    \n        # 返回结果\n        return (X_train, Y_train), (X_test, Y_test), input_shape\n    \n    (X_train, Y_train), (X_test, Y_test), input_shape &#x3D; mnist_data()</code></pre>\n\n<h2 id=\"3-正确地编码\"><a href=\"#3-正确地编码\" class=\"headerlink\" title=\"3. 正确地编码\"></a>3. 正确地编码</h2><p>当处理图片数据的时候，必须要区分想要的编码方式。Keras是一个可以处理多个“后端”的高级库，例如<a href=\"https://www.tensorflow.org/\">Tensorflow</a>, <a href=\"http://deeplearning.net/software/theano/\">Theano</a> 和 <a href=\"https://www.microsoft.com/en-us/cognitive-toolkit/\">CNTK</a>，首先我们要了解我们所使用的后端是如何编码数据的。在Keras默认使用的TensorFlow后端中，针对图像的处理通常是以“通道优先”或“通道末尾”的方式进行编码的，因此在我们的使用TensorFlow作为后端的时候，编码结果其实是一个张量，其形状为(batch_size, rows, cols, channels)。意味着首先是输入的batch_size，然后输入28行28列的图像维度，最后输入1作为通道数，因为我们使用的是灰度图像数据。</p>\n<p>我们可以看看前6张图像具体是什么样子，可以使用如下代码查看：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 可视化数据集中前6张图像\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n    import matplotlib.cm as cm\n    import numpy as np\n    \n    (X_train, y_train), (X_test, y_test) &#x3D; mnist.load_data()\n    \n    fig &#x3D; plt.figure(figsize&#x3D;(20,20))\n    for i in range(6):\n        ax &#x3D; fig.add_subplot(1, 6, i+1, xticks&#x3D;[], yticks&#x3D;[])\n        ax.imshow(X_train[i], cmap&#x3D;&#39;gray&#39;)\n        ax.set_title(str(y_train[i]))\n    plt.show()</code></pre>\n\n<p><img src=\"https://liip.rokka.io/www_inarticle/7cce04/numbers.png\"></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"4-规范化数据\"><a href=\"#4-规范化数据\" class=\"headerlink\" title=\"4. 规范化数据\"></a>4. 规范化数据</h2><p>可以看到，在黑色背景中显示了白色数字，每一张图像中的数字都是居中的，而且分辨率都很低——在这个例子中我们使用的是28x28像素。</p>\n<p>你可能已经注意到，在上述获取数据的部分，我们对每一张图片除以255来缩放了图像像素，这导致像素值在0和1之间，这对于任何类型的训练都非常有用。每个图像像素值在转换之前都是这样的：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 使用像素值可视化一个数字\ndef visualize_input(img, ax):\n    ax.imshow(img, cmap&#x3D;&#39;gray&#39;)\n    width, height &#x3D; img.shape\n    thresh &#x3D; img.max()&#x2F;2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y], 2)),\n                        xy&#x3D;(y, x),\n                        horizontalalignment&#x3D;&#39;center&#39;,\n                        verticalalignment&#x3D;&#39;center&#39;,\n                        color&#x3D;&#39;white&#39; if img[x][y] &lt; thresh else &#39;black&#39;)\n\nfig &#x3D; plt.figure(figsize&#x3D;(12, 12))\nax &#x3D; fig.add_subplot(111)\nvisualize_input(X_train[0], ax)\nplt.show()</code></pre>\n\n<p><img src=\"/images/keras-mnist-for-ios/pixes-daf69647-717f-499d-aa39-fa83904d7675.png\"></p>\n<p>可以看到图像中的每个灰度像素都是介于0到255之间的，并且当像素为255时，背景色为白色，像素为0时，背景色为黑色。在这里使用的是<code>mnist.load_data()</code>加载的数据集，此时并没有对图像进行像素缩放，而在我们自定义的数据集加载方法<code>mnist_data()</code>方法中，我们进行了像素的缩放，<code>X_train = X_train.astype(&#39;float32&#39;)/255</code> 。</p>\n<h2 id=\"5-One-Hot-编码\"><a href=\"#5-One-Hot-编码\" class=\"headerlink\" title=\"5. One-Hot 编码\"></a>5. One-Hot 编码</h2><p>最初，数据以Y-Vector包含X Vector（像素数据）包含的数值的方式编码。例如，如果图像看起来像7，那么Y-Vector中必定包含数字7。但是这种方式不利于我们在网络结构中直接使用，我们需要进行这种转换，希望将数据的输出映射到网络中的10个输出神经元，此时当相应的数字被识别时，相应的神经元就会触发，从而达到有效的识别。</p>\n<p><img src=\"https://liip.rokka.io/www_inarticle/46a2ef/onehot.png\"></p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"6-网络模型化\"><a href=\"#6-网络模型化\" class=\"headerlink\" title=\"6. 网络模型化\"></a>6. 网络模型化</h2><p>了解了数据集的基本情况以及进行合理的数据转换后，该是定义卷积神经网络的时候了。这里讲直接使用卷积神经网络中的卷积层和池化层来定义网络，具体实现如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 定义网络模型\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.optimizers import Adadelta\n\ndef network():\n    model &#x3D; Sequential()\n    input_shape &#x3D; (28, 28, 1)\n    num_classes &#x3D; 10\n\n    model.add(Conv2D(filters&#x3D;32, kernel_size&#x3D;(3, 3), padding&#x3D;&#39;same&#39;, activation&#x3D;&#39;relu&#39;, input_shape&#x3D;input_shape))\n    model.add(MaxPooling2D(pool_size&#x3D;2))\n\n    model.add(Conv2D(filters&#x3D;32, kernel_size&#x3D;2, padding&#x3D;&#39;same&#39;, activation&#x3D;&#39;relu&#39;))\n    model.add(MaxPooling2D(pool_size&#x3D;(2, 2)))\n\n    model.add(Conv2D(filters&#x3D;32, kernel_size&#x3D;2, padding&#x3D;&#39;same&#39;, activation&#x3D;&#39;relu&#39;))\n    model.add(MaxPooling2D(pool_size&#x3D;(2, 2)))\n\n    model.add(Dropout(0.3))\n    model.add(Flatten())\n    model.add(Dense(500, activation&#x3D;&#39;relu&#39;))\n\n    model.add(Dropout(0.4))\n\n    model.add(Dense(num_classes, activation&#x3D;&#39;softmax&#39;))\n\n    # 模型概述\n    print(model.summary())\n    return model</code></pre>\n\n<p>在模型的定义中，我们以内核大小为3的<a href=\"https://keras.io/layers/convolutional/\">卷积</a>，这也意味着窗口为3x3像素，输入形状的大小为28x28像素。紧跟着使用了一个池化大小为2的<a href=\"https://keras.io/layers/pooling/\">池化层</a>，这里的池化大小为2，意味着将会对每一个输入缩减为原来的一般，因此在下一个卷积层中，输入大小为14x14像素。按照此方式重复两次后，最终的卷积输入大小转换为3x3像素。接下来，使用了<a href=\"https://keras.io/layers/core/#dropout\">Dropout层</a>，将30%的输入单元随机设置为0，以防止训练的过拟合。最后，展平输入层（此例子中为3x3x32&#x3D;288），并将它们连接到一个具有500个输入的密度层。在这些步骤之后，添加了另一个Dropout层，之后连接到最后的密度层，该密度层中包含10个输出单元，这些输出单元对应着我们的目标类别，0到9之间的数字。</p>\n<pre><code>_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d_1 (Conv2D)            (None, 28, 28, 32)        320       \n_________________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 14, 14, 32)        0         \n_________________________________________________________________\nconv2d_2 (Conv2D)            (None, 14, 14, 32)        4128      \n_________________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 7, 7, 32)          0         \n_________________________________________________________________\nconv2d_3 (Conv2D)            (None, 7, 7, 32)          4128      \n_________________________________________________________________\nmax_pooling2d_3 (MaxPooling2 (None, 3, 3, 32)          0         \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 3, 3, 32)          0         \n_________________________________________________________________\nflatten_1 (Flatten)          (None, 288)               0         \n_________________________________________________________________\ndense_1 (Dense)              (None, 500)               144500    \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 500)               0         \n_________________________________________________________________\ndense_2 (Dense)              (None, 10)                5010      \n=================================================================\nTotal params: 158,086\nTrainable params: 158,086\nNon-trainable params: 0\n_________________________________________________________________\n</code></pre>\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"7-训练模型\"><a href=\"#7-训练模型\" class=\"headerlink\" title=\"7. 训练模型\"></a>7. 训练模型</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 训练模型\nmodel &#x3D; network()\n# 编译模型\nmodel.compile(loss&#x3D;&#39;categorical_crossentropy&#39;, optimizer&#x3D;Adadelta(), metrics&#x3D;[&#39;accuracy&#39;])\n# 使用训练数据拟合模型\nmodel.fit(X_train, Y_train, batch_size&#x3D;512, epochs&#x3D;6, verbose&#x3D;1, validation_data&#x3D;(X_test, Y_test))\n# 模型评估分数\nscore &#x3D; model.evaluate(X_test, Y_test, verbose&#x3D;0)\n\nprint(&#39;Test loss:&#39;, score[0])\nprint(&#39;Test accuracy:&#39;, score[1])</code></pre>\n\n<p>这里使用了<code>categorical_crossentropy</code>作为损失函数，因为我们的目标类别有多个（0至9），Keras库提供了多种<a href=\"https://keras.io/optimizers/#usage-of-optimizers\">优化器</a>，你可以选择任意一个进行模型训练，并最终找到一个最好的。经过尝试之后，这里选择<a href=\"https://keras.io/optimizers/#adadelta\"><code>AdaDelta</code></a>作为优化器进行模型训练，当然你也可以尝试AdaDelta的高级版<a href=\"https://keras.io/optimizers/#adagrad\">AdaGrad</a>。</p>\n<p><img src=\"https://liip.rokka.io/www_inarticle/42b4b8/train.png\"></p>\n<p>可以看到，经过训练，所得到的模型识别准确率达到了98%，考虑到这里仅仅使用了简单的网络结构，达到这样的准确率已经是非常出色了。在上述截图中，每次迭代的准确性都是在提高，可以说明这里使用的简单结构是合理的，训练得到的模型可以很好地预测输入28x28像素所表示的数字。</p>\n<h2 id=\"8-保存模型\"><a href=\"#8-保存模型\" class=\"headerlink\" title=\"8. 保存模型\"></a>8. 保存模型</h2><p>由于我们想要在iOS设备上使用该模型，因此需要将该模型转换为iOS系统能够理解的格式。实际上，微软、Facebook以及亚马逊等企业已经研发出了一套能够在所有深度学习网络格式见转换的协议，以便能够在任何设备上使用的可交换的开放式神经网络交换格式——<a href=\"https://onnx.ai/\">ONNX</a>。</p>\n<p>但是，截止目前，Apple设备上仅仅能够使用的是CoreML格式。为了能够将Keras模型转换为CoreML格式，Apple特意推出来一个非常方便的帮助类库——<a href=\"https://apple.github.io/coremltools/generated/coremltools.converters.keras.convert.html\">coremltools</a>，这里我们就可以使用该类库来完成工作。该类库能够将scikit-learn、Keras、XGBoost等机器学习类库训练的模型转换为CoreML支持的格式，从而使得模型能够直接在Apple设备上使用。如果你还未安装coremltools类库，可以使用<code>pip install coremltools</code>进行安装，然后再使用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">coreml_model &#x3D; coremltools.converters.keras.convert(model,\n                                                        input_names&#x3D;&quot;image&quot;,\n                                                        image_input_names&#x3D;&#39;image&#39;,\n                                                        class_labels&#x3D;[&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;]\n                                                        )</code></pre>\n\n<p>在进行模型转换的时候，最重要的参数是class_labels，它定义了模型尝试预测的类数，以及input_names或者image_input_names。通过将它们设置为图像，Xcode会自动识别该模型是关于接收图像并从中预测某些内容，也就是说这些参数是告诉Xcode，该模型是关于那方面的任务。根据应用程序和模型的特定功能，需要研究<a href=\"https://apple.github.io/coremltools/generated/coremltools.converters.keras.convert.html\">官方文档</a>进一步的了解这些参数的可选值等。</p>\n<p>另外还有一些可以定义模型元信息的参数，这些参数可以给模型一个简要的说明，甚至作者、license等，可以让使用者能够方便的查阅模型所针对的特定任务等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 编辑模型元信息\ncoreml_model.author &#x3D; &#39;Robin&#39;\ncoreml_model.license &#x3D; &#39;MIT&#39;\ncoreml_model.short_description &#x3D; &#39;MNIST handwriting recognition with a 3 layer network&#39;\ncoreml_model.input_description[&#39;image&#39;] &#x3D; &#39;28x28 grayscaled pixel values between 0-1&#39;\ncoreml_model.save(&#39;SimpleMnist.mlmodel&#39;)\n\nprint(coreml_model)</code></pre>\n\n<h2 id=\"9-使用模型预测\"><a href=\"#9-使用模型预测\" class=\"headerlink\" title=\"9. 使用模型预测\"></a>9. 使用模型预测</h2><p>在将模型保存为CoreML格式之后，我们可以尝试使用转换后的模型进行一个预测，来确定模型是否工作正常。在这里我们将从MNIST数据集中选择一张图像进行预测验证。</p>\n <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 使用CoreML模型预测验证\n from PIL import Image  \n import numpy as np\n model &#x3D;  coremltools.models.MLModel(&#39;SimpleMnist.mlmodel&#39;)\n im &#x3D; Image.fromarray((np.reshape(mnist_data()[0][0][12]*255, (28, 28))).astype(np.uint8),&quot;L&quot;)\n plt.imshow(im)\n predictions &#x3D; model.predict(&#123;&#39;image&#39;: im&#125;)\n print(predictions)</code></pre>\n\n<p>输出结果：</p>\n<pre><code>&#123;u&#39;classLabel&#39;: u&#39;3&#39;, \nu&#39;output1&#39;: &#123;u&#39;1&#39;: 0.0, \n                        u&#39;0&#39;: 0.0, \n                        u&#39;3&#39;: 1.0, \n                        u&#39;2&#39;: 0.0, \n                        u&#39;5&#39;: 0.0, \n                        u&#39;4&#39;: 0.0, \n                        u&#39;7&#39;: 0.0, \n                        u&#39;6&#39;: 0.0, \n                        u&#39;9&#39;: 0.0, \n                        u&#39;8&#39;: 0.0\n                        &#125;\n&#125;\n</code></pre>\n<p><img src=\"/images/keras-mnist-for-ios/download-45f07bef-9ca6-4ea6-a674-789607207e9c.png\"></p>\n<p>可以看到，预测过程和结果均符合预期。接下来是时候在Xcode项目中使用该模型了。</p>\n<h1 id=\"10步完成模型在Xcode项目中的应用\"><a href=\"#10步完成模型在Xcode项目中的应用\" class=\"headerlink\" title=\"10步完成模型在Xcode项目中的应用\"></a>10步完成模型在Xcode项目中的应用</h1><p>为了能够让几乎所有人了解机器学习模型文件是如何一步一步在Xcode项目中使用的，这里将会从最为基础的Xcode安装、项目创建等说起，如果你是iOS开发的老鸟，部分内容请自行略过。</p>\n<h2 id=\"1-安装Xcode\"><a href=\"#1-安装Xcode\" class=\"headerlink\" title=\"1. 安装Xcode\"></a>1. 安装Xcode</h2><p>对于iOS体系来说，Xcode是开发iOS应用程序必须的工具之一，因此如果你还未安装Xcode，需要安装Xcode，最为简单的方式是在Mac App Store中搜索并安装。如果你已经安装了Xcode，需要确保Xcode的版本至少在9.0或以上。</p>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"2-创建项目\"><a href=\"#2-创建项目\" class=\"headerlink\" title=\"2. 创建项目\"></a>2. 创建项目</h2><p>安装好Xcode之后，开启Xcode，选择iOS平台下的单视图应用，命名项目，这里命名为“MNIST-Demo”，选择一个保存项目文件的位置，创建项目即可。</p>\n<p><img src=\"/images/keras-mnist-for-ios/Untitled-78fa75ca-4376-49e8-b194-bde1699f9be3.png\"></p>\n<h2 id=\"3-添加CoreML模型文件\"><a href=\"#3-添加CoreML模型文件\" class=\"headerlink\" title=\"3. 添加CoreML模型文件\"></a>3. 添加CoreML模型文件</h2><p>现在，你可以将通过coremltools转换得到的CoreML模型加入到项目中了。最简单的方式是直接拖拽模型文件到项目目录中，如果为了之后更新模型而不用去删掉重新添加，你可以在弹出的选项框中选择“add as Reference”。</p>\n<p><img src=\"/images/keras-mnist-for-ios/add-model-98101cf6-8cf8-4d2a-b58e-30d397c98354.png\"></p>\n<h2 id=\"4-删除不需要的视图或者故事版\"><a href=\"#4-删除不需要的视图或者故事版\" class=\"headerlink\" title=\"4. 删除不需要的视图或者故事版\"></a>4. 删除不需要的视图或者故事版</h2><p>因为我们仅仅使用相机并显示标签，因此这里会删除掉项目中默认的一些用户界面，也就是项目中的视图控制器和故事面板。当然你也可以选择不删除，直接使用现有的视图和故事面板进行开发，不论选择哪种方式都能达到目的。这里要注意的是，如果选择编码的方式构建应用，再删除了主故事面板文件后，需要在项目的TARGETS中同步删除”Main Interface”的默认设置。</p>\n<p><img src=\"/images/keras-mnist-for-ios/ScreenShot2018-11-22at10-9150b677-f351-4732-bfb6-d74019527380.32.46AM.png\"></p>\n<h2 id=\"5-程序化创建根视图控制器\"><a href=\"#5-程序化创建根视图控制器\" class=\"headerlink\" title=\"5. 程序化创建根视图控制器\"></a>5. 程序化创建根视图控制器</h2><p>接下来我们将使用代码的方式，重新制定应用程序的根视图。具体如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">&#x2F;&#x2F; 通过编码的方式指定根视图控制器\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool &#123;\n     &#x2F;&#x2F; 创建窗口\n     window &#x3D; UIWindow()\n     window?.makeKeyAndVisible()\n        \n     &#x2F;&#x2F; 指定根视图控制器\n     let vc &#x3D; ViewController()\n     window?.rootViewController &#x3D; vc\n        \n     return true\n&#125;</code></pre>\n\n<h2 id=\"6-构建视图控制器细节\"><a href=\"#6-构建视图控制器细节\" class=\"headerlink\" title=\"6. 构建视图控制器细节\"></a>6. 构建视图控制器细节</h2><p>接下来就是构建视图控制器的详细内容细节了。我们需要以下可交互的元素组件，例如按钮，也需要作为展示结果或者状态的标签等，另外重要的是，由于需要使用相机，因此AVFoundation类库是必须要添加的，该库用来访问和控制iOS设备上的相机，还需要Vision库，该库是iOS推出的用于计算机视觉相关任务的工具库，能够很好的和CoreML模型之间进行交互等。</p>\n<p>具体的代码细节，这里不再累述，完成之后的代码如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">&#x2F;&#x2F; 定义视图控制器\nimport UIKit\nimport AVFoundation\nimport Vision\n\n&#x2F;&#x2F; 由于要使用到相机设备进行视频流的输入，因此这里要继承AVCaptureVideoDataOutputSampleBufferDelegate协议\nclass ViewController: UIViewController, AVCaptureVideoDataOutputSampleBufferDelegate &#123;\n    &#x2F;&#x2F; 创建一个文本标签用来显示识别结果\n    let label: UILabel &#x3D; &#123;\n        let label &#x3D; UILabel()\n        label.textColor &#x3D; .white\n        label.translatesAutoresizingMaskIntoConstraints &#x3D; false\n        label.text &#x3D; &quot;Label&quot;\n        label.font &#x3D; label.font.withSize(40)\n        return label\n    &#125;()\n\n    override func viewDidLoad() &#123;\n        &#x2F;&#x2F; 调用相机设备设置方法、文本标签设置方法\n        super.viewDidLoad()       \n        setupCaptureSession()\n        view.addSubview(label)\n        setupLabel()\n    &#125;\n\n        &#x2F;&#x2F; 设置相机设备session\n    func setupCaptureSession() &#123;\n        &#x2F;&#x2F; 创建一个新的捕获session\n        let captureSession &#x3D; AVCaptureSession()\n\n        &#x2F;&#x2F; 查找可用的相机设备\n        let availableDevices &#x3D; AVCaptureDevice.DiscoverySession(deviceTypes: [.builtInWideAngleCamera], mediaType: AVMediaType.video, position: .back).devices\n\n        do &#123;\n            &#x2F;&#x2F; 选择首个设备并设置为输入源\n            if let captureDevice &#x3D; availableDevices.first &#123;\n                captureSession.addInput(try AVCaptureDeviceInput(device: captureDevice))\n            &#125;\n        &#125; catch &#123;\n            &#x2F;&#x2F; 如果未找到相机设备，则打印错误信息\n            print(error.localizedDescription)\n        &#125;\n\n        &#x2F;&#x2F; 将视频输出设置到屏幕并将输出添加到我们的捕获会话\n        let captureOutput &#x3D; AVCaptureVideoDataOutput()\n        captureSession.addOutput(captureOutput)\n        let previewLayer &#x3D; AVCaptureVideoPreviewLayer(session: captureSession)\n        previewLayer.frame &#x3D; view.frame\n        view.layer.addSublayer(previewLayer)\n\n        &#x2F;&#x2F; 缓冲视频并启动捕获会话\n        captureOutput.setSampleBufferDelegate(self, queue: DispatchQueue(label: &quot;videoQueue&quot;))\n        captureSession.startRunning()\n    &#125;\n\n    func captureOutput(_ output: AVCaptureOutput, didOutput sampleBuffer: CMSampleBuffer, from connection: AVCaptureConnection) &#123;\n        &#x2F;&#x2F; 加载Core ML 模型\n        guard let model &#x3D; try? VNCoreMLModel(for: SimpleMnist().model) else &#123; return &#125;\n\n        &#x2F;&#x2F; 使用Core ML运行推理\n        let request &#x3D; VNCoreMLRequest(model: model) &#123; (finishedRequest, error) in\n\n            &#x2F;&#x2F; 捕获推理结果\n            guard let results &#x3D; finishedRequest.results as? [VNClassificationObservation] else &#123; return &#125;\n\n            &#x2F;&#x2F; 捕获得分最高的推理结果\n            guard let Observation &#x3D; results.first else &#123; return &#125;\n\n            &#x2F;&#x2F; 构建最终显示的文本格式\n            let predclass &#x3D; &quot;\\(Observation.identifier)&quot;\n\n            &#x2F;&#x2F; 显示在文本标签内\n            DispatchQueue.main.async(execute: &#123;\n                self.label.text &#x3D; &quot;\\(predclass) &quot;\n            &#125;)\n        &#125;\n\n          &#x2F;&#x2F; 创建一个核心视频像素缓冲区，它是一个图像缓冲区，用于保存主存储器中的像素生成帧，\n                &#x2F;&#x2F; 压缩或解压缩视频或使用核心图像的应用程序都可以使用核心视频像素缓冲区\n        guard let pixelBuffer: CVPixelBuffer &#x3D; CMSampleBufferGetImageBuffer(sampleBuffer) else &#123; return &#125;\n\n        &#x2F;&#x2F; 执行请求\n        try? VNImageRequestHandler(cvPixelBuffer: pixelBuffer, options: [:]).perform([request])\n    &#125;\n\n    func setupLabel() &#123;\n        label.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive &#x3D; true\n        label.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -50).isActive &#x3D; true\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果你直接使用上述代码，请记得修改模型的名称。</p></blockquote>\n<p><img src=\"/images/keras-mnist-for-ios/Untitled-503351b4-b11a-4e7b-a7ad-de4017cbac28.png\"></p>\n<h2 id=\"6-添加隐私说明信息\"><a href=\"#6-添加隐私说明信息\" class=\"headerlink\" title=\"6. 添加隐私说明信息\"></a>6. 添加隐私说明信息</h2><p>由于我们要使用相机设备进行视频数据流的获取，因此需要在Xcode工程项目中的info.plist文件中添加相应的权限申请说明“<em>Privacy - Camera Usage Description</em>”，并附带相应的说明性文字：</p>\n<p><img src=\"/images/keras-mnist-for-ios/Untitled-8e6fa826-e368-47d0-8256-588a136119db.png\"></p>\n<h2 id=\"7-加入苹果开发者计划\"><a href=\"#7-加入苹果开发者计划\" class=\"headerlink\" title=\"7. 加入苹果开发者计划\"></a>7. 加入苹果开发者计划</h2><p>为了能够让该应用程序运行在你的手机设备上，你可能需要注册<a href=\"https://developer.apple.com/programs/enroll/\">苹果的开发者计划</a>。当然如果你不想为了运行项目而花费金钱，你也可以按照<a href=\"https://9to5mac.com/2016/03/27/how-to-create-free-apple-developer-account-sideload-apps/\">此教程</a>注册免费的账户。</p>\n<h2 id=\"8-在iPhone设备上发布应用\"><a href=\"#8-在iPhone设备上发布应用\" class=\"headerlink\" title=\"8. 在iPhone设备上发布应用\"></a>8. 在iPhone设备上发布应用</h2><p>一切准备好之后，你就可以将该应用程序发布到你的手机设备上了。你可以按照如下图所示的方式发布项目，也可以直接在Xcode中选定目标设备，然后使用快捷键CMD+R的方式构建：</p>\n<p><img src=\"/images/keras-mnist-for-ios/Untitled-1a74e4bf-8c84-4e49-95f2-4b46f8f4102f.png\"></p>\n<h2 id=\"9-使用应用程序\"><a href=\"#9-使用应用程序\" class=\"headerlink\" title=\"9. 使用应用程序\"></a>9. 使用应用程序</h2><p>经过上述各种设置和编码之后，终于可以在设备上运行我们的应用程序了。如果一切正常，首次应用程序启动的时候，会询问你是否允许应用程序访问设备的相机，这里需要允许，否则我们的应用程序则无法正常工作。</p>\n<p>另外，我们这里所训练的模型以及制作的应用程序，没有进行详细的设计和优化，在识别的过程中，可能会遇到识别不出来以及识别错误的情况，如果需要将此功能应用在你的产品中，需要严格重新审查你所拥有的数据，以及模型的训练，app的使用等，以免出现不可预知的错误等问题。</p>\n<p><img src=\"https://liip.rokka.io/www_inarticle/812493/output.gif\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过这篇文章，希望能够让你了解如何使用Keras训练所需要的模型，以及如何将其应用在iOS平台下的应用程序中，虽然介绍的不够深入，但是希望能够带给你继续深入理解Keras、了解Core ML的欲望，早日在你的应用程序中实现AI的能力，为你的应用程序增添色彩。</p>\n","text":"本文将介绍如何构建和训练一个深度学习网络来识别手写数字，以及如何将训练所得的深度网络模型转换为iOS平台的机器学习框架CoreML格式，并集成进iOS应用程序中以实时识别数字等。 10步之内完成模型的构建、训练和发布使用TLDR； 本文中暂时不会介绍卷积神经网络的细节内容，例如如...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":10,"path":"api/categories/机器学习.json"}],"tags":[{"name":"机器学习 Keras MNIST","slug":"机器学习-Keras-MNIST","count":1,"path":"api/tags/机器学习-Keras-MNIST.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10%E6%AD%A5%E4%B9%8B%E5%86%85%E5%AE%8C%E6%88%90%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%9E%84%E5%BB%BA%E3%80%81%E8%AE%AD%E7%BB%83%E5%92%8C%E5%8F%91%E5%B8%83%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">10步之内完成模型的构建、训练和发布使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">1. 如何开始</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">2. 获取数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%AD%A3%E7%A1%AE%E5%9C%B0%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">3. 正确地编码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E8%A7%84%E8%8C%83%E5%8C%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4. 规范化数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-One-Hot-%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">5. One-Hot 编码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8C%96\"><span class=\"toc-text\">6. 网络模型化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-2\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">7. 训练模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E4%BF%9D%E5%AD%98%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">8. 保存模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9E%8B%E9%A2%84%E6%B5%8B\"><span class=\"toc-text\">9. 使用模型预测</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10%E6%AD%A5%E5%AE%8C%E6%88%90%E6%A8%A1%E5%9E%8B%E5%9C%A8Xcode%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">10步完成模型在Xcode项目中的应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85Xcode\"><span class=\"toc-text\">1. 安装Xcode</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-3\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2. 创建项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%B7%BB%E5%8A%A0CoreML%E6%A8%A1%E5%9E%8B%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3. 添加CoreML模型文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%88%A0%E9%99%A4%E4%B8%8D%E9%9C%80%E8%A6%81%E7%9A%84%E8%A7%86%E5%9B%BE%E6%88%96%E8%80%85%E6%95%85%E4%BA%8B%E7%89%88\"><span class=\"toc-text\">4. 删除不需要的视图或者故事版</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E7%A8%8B%E5%BA%8F%E5%8C%96%E5%88%9B%E5%BB%BA%E6%A0%B9%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">5. 程序化创建根视图控制器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E6%9E%84%E5%BB%BA%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">6. 构建视图控制器细节</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E6%B7%BB%E5%8A%A0%E9%9A%90%E7%A7%81%E8%AF%B4%E6%98%8E%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">6. 添加隐私说明信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E5%8A%A0%E5%85%A5%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%AE%A1%E5%88%92\"><span class=\"toc-text\">7. 加入苹果开发者计划</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E5%9C%A8iPhone%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%8F%91%E5%B8%83%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">8. 在iPhone设备上发布应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E4%BD%BF%E7%94%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">9. 使用应用程序</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"iOS虚拟内存管理","uid":"11480c51ae26bed2fd1029069074ca32","slug":"2019-01-22-iOS_VMManage","date":"2023-05-14T05:45:19.932Z","updated":"2023-05-14T05:45:19.932Z","comments":true,"path":"api/articles/2019-01-22-iOS_VMManage.json","keywords":null,"cover":"/images/vm/memory_manage.jpg","text":"虚拟内存是一种允许操作系统避开物理RAM限制的内存管理机制。虚拟内存管理器为每个进程创建一个逻辑地址空间或者虚拟内存地址空间，并且将它分配为相同大小的内存块，可称为页。处理器与内存管理单元MMU维持一个页表来映射程序逻辑地址空间到计算机RAM的硬件地址。当程序的代码访问内存中的一...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"《禅与摩托车维修艺术》之良质","uid":"db6fdca23b371a06d21cf5b1b5c1c533","slug":"2019-03-07-zen","date":"2023-05-14T05:45:19.932Z","updated":"2023-05-14T05:45:19.932Z","comments":true,"path":"api/articles/2019-03-07-zen.json","keywords":null,"cover":"/images/zen/bg2011121812.jpg","text":"美国作家罗伯特·波西格（Robert M Pirsig）的《禅与摩托车维修艺术》，是一部奇特而有趣的哲学读物，作者进行了大量科学技术哲学以及其他哲学方面的讨论，见解独特而又机智。又是一部心灵自传，在与西方两千年来哲学传统的深入理解与争辩中，作者一度精神上不堪重负，但最终寻找到了生...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"读书小记","slug":"读书小记","count":2,"path":"api/categories/读书小记.json"}],"tags":[{"name":"读书小记","slug":"读书小记","count":2,"path":"api/tags/读书小记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}