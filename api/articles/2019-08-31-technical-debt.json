{"title":"技术债务，到底应该怎么还？","uid":"8324f2deff47aff54f6d1dc34d4c54d8","slug":"2019-08-31-technical-debt","date":"2023-05-13T14:48:40.640Z","updated":"2023-05-13T14:48:40.640Z","comments":true,"path":"api/articles/2019-08-31-technical-debt.json","keywords":null,"cover":"/images/technical-debt/cover.jpeg","content":"<p>几乎所有的技术团队，都会经历或多或少的技术债务，技术债务虽然是实现快速收益的一种捷径，但是为了修复哪些为了快速收益而不得不为之的技术问题，企业往往需要花费大量的金钱、人力等。那么如何有效地避免技术债务，使得开发人员更多的精力投入在有效的工作，从而产生额外价值，提高企业的产品竞争力呢？</p>\n<p>技术债务的产生有着很多的原因，但是其中更多的是由于匆忙的工作使得原来耗时较长的工作，在短时间内完成，导致部分业务逻辑没有完整的设计等，使得产品在短时间内有效，但是长远来看，却是一颗不稳定的炸弹，一旦触发，对产品、对企业都有可能造成无法挽回的损失。总而言之，技术债务会带来很多麻烦，有些甚至是“致命”的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文以发布至：<a href=\"https://weibo.com/ttarticle/p/show?id=2309404395386419675203\">技术专栏丨技术债务，到底应该怎么还？</a></p></blockquote>\n<h2 id=\"什么是技术债务？\"><a href=\"#什么是技术债务？\" class=\"headerlink\" title=\"什么是技术债务？\"></a>什么是技术债务？</h2><p><img src=\"/images/technical-debt/what-is-technical-debt.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>技术负债（英语：Technical debt），又译技术债，也称为设计负债（design debt）、代码负债（code debt），是编程及软件工程中的一个比喻。指开发人员为了加速软件开发，在应该采用最佳方案时进行了妥协，改用了短期内能加速软件开发的方案，从而在未来给自己带来的额外开发负担。这种技术上的选择，就像一笔债务一样，虽然眼前看起来可以得到好处，但必须在未来偿还。软件工程师必须付出额外的时间和精力持续修复之前的妥协所造成的问题及副作用，或是进行重构，把架构改善为最佳实现方式。 </p>\n<p>摘自 <a href=\"https://zh.wikipedia.org/wiki/%E6%8A%80%E6%9C%AF%E8%B4%9F%E5%80%BA\">维基百科</a></p></blockquote>\n<p>很多人将技术债务类比于金融债务，但是和金融债务不同的是，技术债务可能不会承担利息。例如当需要快速验证产品的某个特点的时候，带有一定技术债务的产品可能是个好的选择，当验证之后，无需该特点的时候，可以直接移除等，此时可能不会承担债务利息。但是大多数情况下，此类情况较少，就算仅仅是为了验证产品，也不建议使用技术债务的方式去实施。类似这样方式的技术债务可称为有意的技术债务，另一种更加危险的技术债务称为无意的技术债务，无意的技术债务就像是前文说到的隐藏在代码中的炸弹。</p>\n<p>无论是那种技术债务，在未来的产品迭代过程中，都需要开发人员去界定债务边界，不能任由技术债务滋生，否则在迭代过程中，面临的困难越来越多，甚至需要被迫承担更多的技术债务。基本上，你承担的债务越多，项目的进度就越慢，项目的后续阶段就会更加困难。</p>\n<p>但是需要清楚的是，技术债务是无法消除的，你必须随时做好承担技术债务的准备。因为在一些项目场景中，一些具体问题的解决方案本身是可以解决问题的，但是该方案可能不是全局有效或最佳的，在系统的其他方面，就形成了一个不可避免而必须承担的技术债务问题。一个好的工程师团队应该是最小化技术债务影响，并对技术债务进行合理管理的团队。</p>\n<p><img src=\"/images/technical-debt/techdebttype.png\"></p>\n<p>上文提到，技术债务分为<strong>有意的技术债务</strong>和<strong>无意的技术债务</strong>，两种形式的技术债务形成的原因和带来的结果也是不同的。在某些情况下，有意的技术债务相比无意的技术债务更好，有意的技术债务会让团队意识到问题，从而有意的去进行优化改进等，而无意的技术债务可能在项目中潜伏很长一段时间，可能导致严重的问题，然而，无意的技术债务在项目中是无法避免的，在工程师团队中可以强化编码规范、业务理解等来进行管理或者减弱技术债务出现的可能。</p>\n<p>另外还可以将技术债务分类为<strong>鲁莽型技术债务</strong>和<strong>谨慎型技术债务</strong> 。一些谨慎型的技术债务在项目的进度中是可取的，但是不论是那种技术债务，都需要每个人用于去承担，两者是共同工作的。理想的情况下，承担的债务应当是哪些有意的和谨慎的技术债务，而哪些无意的和鲁莽的技术债务应当不惜一切代价避免。</p>\n<h2 id=\"为什么要关心技术债务？\"><a href=\"#为什么要关心技术债务？\" class=\"headerlink\" title=\"为什么要关心技术债务？\"></a>为什么要关心技术债务？</h2><p><img src=\"/images/technical-debt/why-care-about-technical-debt.png\"></p>\n<h3 id=\"技术债务如何影响开发\"><a href=\"#技术债务如何影响开发\" class=\"headerlink\" title=\"技术债务如何影响开发\"></a>技术债务如何影响开发</h3><p>在开发阶段，开发人员不可避免会遇到技术债务，开发人员应当直面技术债务，并处理技术债务问题。虽然处理技术债务可能会使得开发周期变长，但从长远来看，开发人员及时处理技术债务是有益的，一方面处理技术债务是一个技术经验积累的过程，另一方面及时的处理在之后的迭代中也减少了技术债务产生的可能等。每一个开发员都应当有意的或者尽力地避免那些无意的技术债务和鲁莽的技术债务等。</p>\n<h3 id=\"技术债务如何影响客户\"><a href=\"#技术债务如何影响客户\" class=\"headerlink\" title=\"技术债务如何影响客户\"></a>技术债务如何影响客户</h3><p>虽然乍看起来，技术债务和客户并无联系，客户也不太关心产品的代码质量等，客户只需要在成本没有增加的情况下，产品按时交付使用。然而，一个携带无意或者鲁莽的技术债务的产品在开发过程中，往往需要花费更多的时间、精力和资源，导致成本增加，但是收益却减少的情况等。</p>\n<p><img src=\"/images/technical-debt/techdebtcost.png\"></p>\n<h3 id=\"技术债务如何影响用户\"><a href=\"#技术债务如何影响用户\" class=\"headerlink\" title=\"技术债务如何影响用户\"></a>技术债务如何影响用户</h3><p>即使是间接的，用户也会受到技术债务的影响。 他们可能不关心软件中的工作量或资金数量，但他们确实关心它的可靠运行，以及快速添加的新功能，这两者都可能受到大量技术债务的影响。 用户越快乐，客户越快乐，开发者越快乐。</p>\n<h2 id=\"技术债务最佳实践\"><a href=\"#技术债务最佳实践\" class=\"headerlink\" title=\"技术债务最佳实践\"></a>技术债务最佳实践</h2><p><img src=\"/images/technical-debt/technical-debt-best-practices.png\"></p>\n<p>解决科技债务的最大问题是，它无法真正量化。这使得开发团队很难跟踪并让管理层向客户展示为什么要投入更多的资源和时间。</p>\n<p>但是这里有一些你可以做的事情：</p>\n<h3 id=\"保持最新状态\"><a href=\"#保持最新状态\" class=\"headerlink\" title=\"保持最新状态\"></a>保持最新状态</h3><p>不言而喻，工具，框架和库应该始终保持最新状态，可能你还未意识到这个问题所带来的影响，那只是你还没意识到而已。</p>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>记录需要修复或更新的所有内容是确保实际修复和更新的最重要步骤。</p>\n<p>如果存在技术债务，最好了解它并确保团队或未来的开发人员也知道。 文档减少了定位和修复任何问题所需的工作量，如果债务记录良好，甚至可能在业务层面上可见，将可能导致客户承认并提供额外资源。</p>\n<h3 id=\"代码评审\"><a href=\"#代码评审\" class=\"headerlink\" title=\"代码评审\"></a>代码评审</h3><p>另一个强大的工具是在sprint期间定期审查代码。 代码审查可以捕捉到可能导致问题的隐患，并找到解决方案。 代码评审确实需要一些时间，但在整个项目的背景下肯定是值得的。</p>\n<p>但是，代码审查也有其缺点。 开发人员往往太忙，无法深入挖掘他人的代码，因此他们只会发现明显的错误，而挑剔可能会导致团队内部紧张。 因此，它可以成为减少技术债务的有力工具，但应该谨慎应用。</p>\n<h3 id=\"自动化测试\"><a href=\"#自动化测试\" class=\"headerlink\" title=\"自动化测试\"></a>自动化测试</h3><p>自动化测试是一种非常强大的工具，但是经常被忽视。 自动化测试被忽略后，代码中的隐藏问题可能会无法察觉出，往往导致产品发布后需要投入不成比例的人力和时间来应对，是的成本变高甚至不可控。在开发阶段，有必要实施测试驱动开发，编写完善的测试用例，以清除代码中的许多不易察觉的问题等。</p>\n<h3 id=\"敏捷架构\"><a href=\"#敏捷架构\" class=\"headerlink\" title=\"敏捷架构\"></a>敏捷架构</h3><p>敏捷架构具有很多优点，在构建软件的过程中对更改更加开放，基本上保证在任何项目上都会发生。 但是，它确实要求代码具有灵活性和可维护性，因此敏捷方法自然会使开发人员保持良好的代码，这有助于防止大量技术债务的积累。</p>\n<h3 id=\"有效地复盘\"><a href=\"#有效地复盘\" class=\"headerlink\" title=\"有效地复盘\"></a>有效地复盘</h3><p>如果出现问题，应该用于面对，当问题解决后，需要进行有效地复盘。 但是要注意的是复盘是为了提高工作效率，绝不应该是找人责备。 复盘的重点应放在了解问题及其产生的原因上，以便团队可以采取必要措施防止同样的问题再次发生。 </p>\n<h2 id=\"管理技术债务的最佳做法\"><a href=\"#管理技术债务的最佳做法\" class=\"headerlink\" title=\"管理技术债务的最佳做法\"></a>管理技术债务的最佳做法</h2><p><img src=\"/images/technical-debt/manage-technical-debt.png\"></p>\n<p>即使你做了以上所有事情，并尽可能避免堆积技术债务，你仍然需要处理一些问题。 这是无法避免的，因此您应该实施实践和流程以防止技术债务陷入困境。</p>\n<h3 id=\"高息技术债务优先\"><a href=\"#高息技术债务优先\" class=\"headerlink\" title=\"高息技术债务优先\"></a>高息技术债务优先</h3><p>并非所有技术债务都是平等的，因此您应该优先考虑在特定时间解决的问题以及不解决的问题。 对于经常使用和更改的代码而言，比在几乎没有使用或更改过的部分的重要性要重要得多。</p>\n<p>高息债务往往是那些在项目中起重要做的核心部分，通常围绕它进行了很多工作并以此为基础。 如果此部分的技术债务保持不变，就会妨碍所有的工作，并可能迫使更多的技术债务被添加到代码的其他部分。 因此，如果有可能，首先应优先考虑这些问题，从长远来看，使一切变得更加顺畅。</p>\n<h3 id=\"童子军规则\"><a href=\"#童子军规则\" class=\"headerlink\" title=\"童子军规则\"></a>童子军规则</h3><p>“要始终保持营地比你发现它的时候更清洁”也是适用于软件开发的：“提交的代码比检出的要更好”。鼓励团队成员，以积极减少技术债务 ; 例如，当他们发现了一块为了功能增加或错误修复的代码时激励他们重构。</p>\n<p>当然，它不能没有边界，否则它可能是一直消耗。 但是，如果你在每个sprint中留出一定比例的时间专门用于修复开发人员可能发现的任何技术债务，那么它可以在很大程度上保持产品尽可能无债务。</p>\n<p><img src=\"/images/technical-debt/techdebtcruft.png\"></p>\n<h3 id=\"在履行有价值的客户工作时偿还债务\"><a href=\"#在履行有价值的客户工作时偿还债务\" class=\"headerlink\" title=\"在履行有价值的客户工作时偿还债务\"></a>在履行有价值的客户工作时偿还债务</h3><p>在项目的整个冲刺阶段，用于修复技术债务不是一个好主意。 一方面，客户往往不喜欢延期，对他们来说，看起来你似乎花了他们的时间和金钱来解决你做错的事情。另一方面，它也表明你已经做了大量的技术债务工作，所以你可能已经支付了更高的债务利息。</p>\n<p>你最好指定在每个冲刺中偿还技术债务所花费的时间，并用它来解决高优先级或发生过的问题。 让客户满意，并使技术债务处于可控水平。</p>\n<h3 id=\"忽略\"><a href=\"#忽略\" class=\"headerlink\" title=\"忽略\"></a>忽略</h3><p>同样重要的是要注意技术债务不应该总是得到偿还。 当产品接近其使用寿命时，如果它是短期制造的，或者它是一次性原型，技术债务不是主要问题。 这些实例很少见，但是当它们出现时你可以节省一些时间和精力。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>技术债务是伴随着项目的，无法避免，但是如何保持其在可控范围之内，是我们应该思考的问题。技术债务的避免和消除都需要好的优秀的开发人员，人始终是软件开发中最重要的因素。作为一名普通的码农，不断地提升自己是非常必要的。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://codingsans.com/blog/technical-debt\">TECHNICAL DEBT: EVERYTHING YOU NEED TO KNOW, AND HOW TO MANAGE IT</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%8A%80%E6%9C%AF%E8%B4%9F%E5%80%BA\">技术负债</a></li>\n<li><a href=\"https://insights.thoughtworks.cn/managing-technical-debt/\">技术债治理的四条原则</a></li>\n<li><a href=\"https://www.infoq.cn/article/2009/10/dissecting-technical-debt/\">解析技术债务</a></li>\n</ol>\n","text":"几乎所有的技术团队，都会经历或多或少的技术债务，技术债务虽然是实现快速收益的一种捷径，但是为了修复哪些为了快速收益而不得不为之的技术问题，企业往往需要花费大量的金钱、人力等。那么如何有效地避免技术债务，使得开发人员更多的精力投入在有效的工作，从而产生额外价值，提高企业的产品竞争力...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":9,"path":"api/categories/技术人生.json"}],"tags":[{"name":"技术人生","slug":"技术人生","count":5,"path":"api/tags/技术人生.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%EF%BC%9F\"><span class=\"toc-text\">什么是技术债务？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%85%B3%E5%BF%83%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%EF%BC%9F\"><span class=\"toc-text\">为什么要关心技术债务？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">技术债务如何影响开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E5%AE%A2%E6%88%B7\"><span class=\"toc-text\">技术债务如何影响客户</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E7%94%A8%E6%88%B7\"><span class=\"toc-text\">技术债务如何影响用户</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">技术债务最佳实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E6%8C%81%E6%9C%80%E6%96%B0%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">保持最新状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">文档</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1\"><span class=\"toc-text\">代码评审</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">自动化测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%8F%E6%8D%B7%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">敏捷架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%89%E6%95%88%E5%9C%B0%E5%A4%8D%E7%9B%98\"><span class=\"toc-text\">有效地复盘</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E7%9A%84%E6%9C%80%E4%BD%B3%E5%81%9A%E6%B3%95\"><span class=\"toc-text\">管理技术债务的最佳做法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E6%81%AF%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E4%BC%98%E5%85%88\"><span class=\"toc-text\">高息技术债务优先</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AB%A5%E5%AD%90%E5%86%9B%E8%A7%84%E5%88%99\"><span class=\"toc-text\">童子军规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%B1%A5%E8%A1%8C%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E5%AE%A2%E6%88%B7%E5%B7%A5%E4%BD%9C%E6%97%B6%E5%81%BF%E8%BF%98%E5%80%BA%E5%8A%A1\"><span class=\"toc-text\">在履行有价值的客户工作时偿还债务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%BD%E7%95%A5\"><span class=\"toc-text\">忽略</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"思维的火花 --- 大数据与数据思维","uid":"16be2042ed36bcbed3b5d7b4eb45f41f","slug":"2019-08-31-mind-flower","date":"2023-05-13T14:48:40.640Z","updated":"2023-05-13T14:48:40.640Z","comments":true,"path":"api/articles/2019-08-31-mind-flower.json","keywords":null,"cover":"/images/mindflower.png","text":"在电子设备飞速发展的今天，互联网、移动互联网都已经非常成熟，物联网也在搭建的过程中。对于我们来说4G时代好像还刚开始，5G就即将来临了。每个人、每时每刻都在产生着数据，面对着庞大的数据体量，却只有相对少数的人能够使用正确的方式， 在合适的时机，创造出合适的产品等等。凭借着数据，也...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":9,"path":"api/categories/技术人生.json"}],"tags":[{"name":"技术人生","slug":"技术人生","count":5,"path":"api/tags/技术人生.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"深入了解Core ML 3","uid":"04c112f33ade68949ca049cf167e7b66","slug":"2019-09-05-coreml-indepth-look","date":"2023-05-13T14:48:40.640Z","updated":"2023-05-13T14:48:40.640Z","comments":true,"path":"api/articles/2019-09-05-coreml-indepth-look.json","keywords":null,"cover":"/images/coreml-indepth/coreml-og.png","text":" 在之前的文章中，介绍过iOS 11中的机器学习，简单了解了伴随iOS 11发布的Core ML框架，以及简单的使用方式等，随后，Core ML 技术底层探秘也揭开了点Core ML背后的技术和数据结构，对Core ML相对有了一个认识。随着Core ML vs ML Kit：哪...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"端测计算","slug":"端测计算","count":1,"path":"api/categories/端测计算.json"}],"tags":[{"name":"端测计算 CoreML","slug":"端测计算-CoreML","count":1,"path":"api/tags/端测计算-CoreML.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}