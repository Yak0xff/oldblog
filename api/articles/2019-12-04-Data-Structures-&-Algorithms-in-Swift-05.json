{"title":"\\#5\\ Linked List && Swift Collection Protocol","uid":"e7521306a70b406b8e5f7047760055b6","slug":"2019-12-04-Data-Structures-&-Algorithms-in-Swift-05","date":"2023-05-13T15:08:12.965Z","updated":"2023-05-13T15:08:12.965Z","comments":true,"path":"api/articles/2019-12-04-Data-Structures-&-Algorithms-in-Swift-05.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/5/cover.jpg","content":"<p>在Swift标准库（<strong>Swift standard library</strong>）中定义了很多协议或协议的集合，这些协议分别对应了特定的数据类型，每个协议都对所定义的数据类型有一些特性和性能方面的保证，而对于开发者而言，这些协议也是自定义数据结构和对现有数据类型进行扩展的基础准则。在这些协议的集合中，有四种关于<strong>集合的协议（collection protocols）</strong>，分别是：</p>\n<ul>\n<li><strong>Tier 1, Sequence：</strong>序列类型是Swift中最为朴素的协议,仅仅定义了一系列类型相同的元素，而不对这一系列元素的性质有任何额外的约定。它唯一约定了的动作，就是从序列当前位置读取下一个元素。</li>\n<li><strong>Tier 2, Collection：</strong>集合类型是一种提供额外保证的序列类型。集合类型是有限的，允许重复的非破坏性顺序访问。</li>\n<li><strong>Tier 3, BidirectionalColllection：</strong>集合类型可以是双向集合类型，可以允许在序列中上下双向移动。 这对于链表是不可能的，因为你只能从头到尾，而不是相反。</li>\n<li><strong>Tier 4, RandomAccessCollection：</strong>如果它可以保证访问特定索引处的元素将花费与访问任何其他索引处的元素一样长的时间。该双向集合类型就是随机访问集合类型， 这对于链表来说是不可能的，因为访问列表前面附近的节点比列表下方的节点快得多。</li>\n</ul>\n<p>因此对于链表数据结构来说，<strong>Sequence</strong>和<strong>Collection</strong>两种协议是适用的。首先链表是一个序列型数据结构，适用<strong>Sequence</strong>协议，另外链表是有限序列，适用<strong>Collection</strong>协议。</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"进化为Swift集合\"><a href=\"#进化为Swift集合\" class=\"headerlink\" title=\"进化为Swift集合\"></a>进化为Swift集合</h2><p>集合类型是有限序列，并提供非破坏性顺序访问。 Swift Collection还允许通过<strong>下标（subscript）</strong>进行访问, 使用索引可以映射到集合中的值。</p>\n<p>例如Swift中Array通过下标的方式访问元素：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">array[5]</code></pre>\n\n<p>数组的下标一律是整数类型，例如上例中5。下标被包裹在方括号内。通过下标可以获取到集合对应未知的元素。</p>\n<h3 id=\"自定义集合索引\"><a href=\"#自定义集合索引\" class=\"headerlink\" title=\"自定义集合索引\"></a>自定义集合索引</h3><p>衡量<strong>Collection</strong>协议性能的指标是下标对应到值的速度。和其他数据类型（例如Swift的Array）不同，链表结构不能使用整数实现O(1)的下标操作。因此，自定义下标索引是对各自节点引用的索引。</p>\n<p>在上文<a href=\"https://robinchao.github.io/2019/12/03/Data-Structures-&-Algorithms-in-Swift-04.html\">#4\\ Linked List 的Swift实现</a>的<strong>LinkedList.swift</strong>中，继续添加如下扩展程序，实现自定义索引的操作：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">extension LinkedList: Collection &#123;\n    &#x2F;&#x2F; 自定义链表索引\n    &#x2F;&#x2F; 由于索引是一个可比较的对象，需要继承Comparable协议\n    public struct Index: Comparable &#123;\n        public var node: Node&lt;Value&gt;?\n        \n        &#x2F;&#x2F; 自定义结构体不能进行&#x3D;&#x3D;操作, 需要自行实现\n        static public func &#x3D;&#x3D;(lhs: Index, rhs: Index) -&gt; Bool &#123;\n            &#x2F;&#x2F; 属于switch语句中使用元组\n            switch (lhs.node, rhs.node) &#123;\n            case let (left?, right?):\n                return left.next &#x3D;&#x3D;&#x3D; right.next\n            case (nil, nil):\n                return true\n            default:\n                return false\n            &#125;\n        &#125;\n        &#x2F;&#x2F; 第一个参数是否小于第二个参数\n        static public func &lt;(lhs: Index, rhs: Index) -&gt; Bool &#123;\n            guard lhs !&#x3D; rhs else &#123;\n                return false\n            &#125;\n            &#x2F;&#x2F; 从链表的一个节点移动到根节点\n            &#x2F;&#x2F; 这里使用Swift的内联序列函数sequence(first: next:)，类似repeat...while操作\n            let nodes &#x3D; sequence(first: lhs.node) &#123; \n                $0?.next \n            &#125;\n\n            return nodes.contains &#123; \n                $0 &#x3D;&#x3D;&#x3D; rhs.node \n            &#125;\n        &#125;\n    &#125;\n    \n    &#x2F;&#x2F; 链表的头节点索引\n    public var startIndex: Index &#123;\n        return Index(node: head)\n    &#125;\n    &#x2F;&#x2F; 链表的尾节点索引\n    &#x2F;&#x2F; 由于Collection协议的endIndex默认是序列最后可访问的值的索引，对于链表来说，需要制定tail节点的next\n    public var endIndex: Index &#123;\n        return Index(node: tail?.next)\n    &#125;\n    &#x2F;&#x2F; 索引是可以递增的，给定索引的下一个索引就是当前节点的next\n    public func index(after i: Index) -&gt; Index &#123;\n        return Index(node: i.node?.next)\n    &#125;\n    &#x2F;&#x2F; 用于将索引映射到集合中的值。由于已经创建了自定义索引，因此可以通过引用节点的值在恒定时间内轻松实现此目的。\n    public subscript(position: Index) -&gt; Value &#123;\n        return position.node!.value\n    &#125;\n&#125;</code></pre>\n\n<p>回到主Playground，编写自定义索引功能的使用操作，如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;using collection&quot;) &#123;\n    var list &#x3D; LinkedList&lt;Int&gt;()\n    \n    for i in 0 ... 9 &#123;\n        list.append(i)\n    &#125;\n    \n    print(&quot;List: \\(list)&quot;)\n    print(&quot;First element: \\(list[list.startIndex])&quot;)\n    print(&quot;Array containing first 3 elements: \\(Array(list.prefix(3)))&quot;)\n    print(&quot;Array containing last 3 elements: \\(Array(list.suffix(3)))&quot;)\n    \n    let sum &#x3D; list.reduce(0, +)\n    print(&quot;Sum of all values: \\(sum)&quot;)\n&#125;\n\n&#x2F;&#x2F; ---Example of using collection---\n&#x2F;&#x2F; List: 0 -&gt;1 -&gt;2 -&gt;3 -&gt;4 -&gt;5 -&gt;6 -&gt;7 -&gt;8 -&gt;9         \n&#x2F;&#x2F; First element: 0\n&#x2F;&#x2F; Array containing first 3 elements: [0, 1, 2]\n&#x2F;&#x2F; Array containing last 3 elements: [7, 8, 9]\n&#x2F;&#x2F; Sum of all values: 45</code></pre>\n\n<h3 id=\"值语义和写入时复制（copy-on-write）\"><a href=\"#值语义和写入时复制（copy-on-write）\" class=\"headerlink\" title=\"值语义和写入时复制（copy-on-write）\"></a>值语义和写入时复制（copy-on-write）</h3><p>Swift Collection的另一个重要特性是它们具有值语义，通过<strong>写入时复制</strong>实现的，特此称为 <strong>COW</strong>。为了说明此概念，您将使用数组验证此行为。在Playground页面的底部编写以下内容：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;array cow&quot;) &#123;\n    let array1 &#x3D; [1, 2]\n    var array2 &#x3D; array1\n    \n    print(&quot;array1: \\(array1)&quot;)\n    print(&quot;array2: \\(array2)&quot;)\n    \n    print(&quot;--- After adding 3 to array 2 ---&quot;)\n    array2.append(3)\n    print(&quot;array1: \\(array1)&quot;)\n    print(&quot;array2: \\(array2)&quot;)\n&#125;\n\n&#x2F;&#x2F; ---Example of array cow---\n&#x2F;&#x2F; array1: [1, 2]\n&#x2F;&#x2F; array2: [1, 2]\n&#x2F;&#x2F; --- After adding 3 to array 2 ---\n&#x2F;&#x2F; array1: [1, 2]\n&#x2F;&#x2F; array2: [1, 2, 3]</code></pre>\n<p>array1是不可变的常量，就算将array1赋值给了变量array2，当array2的内容改变的时候，array1也不会改变，而此时有一个关键的地方是，array2在被赋值为array1的时候，并没有开辟新的存储空间，而是指向了array1的存储空间。当对array2进行append操作时，array2才对array1的内存空间进行了一个拷贝，然后添加了元素3。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/5/array-cow.png\"></p>\n<p>了解了值语义之后，来检查我们首先的Linked List是否也具有值语义的特性，在Playground中变下如下测试代码：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;linked list cow test&quot;) &#123;\n    var list1 &#x3D; LinkedList&lt;Int&gt;()\n    list1.append(1)\n    list1.append(2)\n    \n    var list2 &#x3D; list1\n    \n    print(&quot;list1: \\(list1)&quot;)\n    print(&quot;list2: \\(list2)&quot;)\n    \n    print(&quot;--- After adding 3 to list 2 ---&quot;)\n    list2.append(3)\n    print(&quot;list1: \\(list1)&quot;)\n    print(&quot;list2: \\(list2)&quot;)\n&#125;\n\n&#x2F;&#x2F; ---Example of linked list cow test---\n&#x2F;&#x2F; list1: 1 -&gt;2 \n&#x2F;&#x2F; list2: 1 -&gt;2 \n&#x2F;&#x2F; --- After adding 3 to list 2 ---\n&#x2F;&#x2F; list1: 1 -&gt;2 -&gt;3  \n&#x2F;&#x2F; list2: 1 -&gt;2 -&gt;3</code></pre>\n\n<p>可以看到，我们实现的LinkedList并不具有值语义的特性。因为我们在基础存储的时候使用了引用类型（Node），在Swift中，结构体应该是支持值语义的，因此关于LinkedList的实现，还需要进行优化，以支持值语义特性。</p>\n<p>使用<strong>COW</strong>实现值语义的特性相对较为简单。在更改链表的内容之前，需要对基础存储部分进行<strong>copy</strong>操作，同时将链表的所有引用（head、tail）更新到新的copy副本中。实现代码如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">private mutating func copyNodes() &#123;\n    guard var oldNode &#x3D; head else &#123;\n        return\n    &#125;\n        \n    head &#x3D; Node(value: oldNode.value)\n    var newNode &#x3D; head\n        \n    while let nextOfNode &#x3D; oldNode.next &#123;\n        newNode!.next &#x3D; Node(value: nextOfNode.value)\n        newNode &#x3D; newNode!.next\n            \n        oldNode &#x3D; nextOfNode\n    &#125;\n    tail &#x3D; newNode\n&#125;</code></pre>\n\n<p>该操作是原有链表节点的值赋值给新建的节点，为链表的所有节点建立了一个新的副本。接下来需要修改LinkedList中的一些方法，增加<code>copyNodes()</code>方法的调用，以支持值语义特性。</p>\n<ul>\n<li>push</li>\n<li>append</li>\n<li>insert(after:)</li>\n<li>pop</li>\n<li>removeLast</li>\n<li>remove(after:)</li>\n</ul>\n<p>完整了上述方法的修改后，回到主Playground，进行值语义特性的再次测试，得到如下结果：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">&#x2F;&#x2F; ---Example of linked list cow test---\n&#x2F;&#x2F; list1: 1 -&gt;2 \n&#x2F;&#x2F; list2: 1 -&gt;2 \n&#x2F;&#x2F; --- After adding 3 to list 2 ---\n&#x2F;&#x2F; list1: 1 -&gt;2 \n&#x2F;&#x2F; list2: 1 -&gt;2 -&gt;3 </code></pre>\n\n<p>得到的结果也符合值语义的特性，但是这里有一个问题，在加入了值语义特性后，在每一个支持<strong>mutating</strong>的方法中，都多了一个**O(n)**的copy操作，显得得不偿失。</p>\n<h2 id=\"COW的优化\"><a href=\"#COW的优化\" class=\"headerlink\" title=\"COW的优化\"></a>COW的优化</h2><p>每一个支持<strong>mutating</strong>的方法中，都多了一个**O(n)**的copy操作，显然是不可接受的。接下来着手对其进行进一步的优化，有两种方式可以帮助解决这个问题。第一种便是当节点仅有一个拥有者的时候，避免进行复制。</p>\n<h3 id=\"isKnownUniquelyReferenced\"><a href=\"#isKnownUniquelyReferenced\" class=\"headerlink\" title=\"isKnownUniquelyReferenced\"></a>isKnownUniquelyReferenced</h3><p>在Swift的标准库中,有一个函数<strong>isKnownUniquelyReferenced</strong>,该函数可用于检查对象是否只有一个引用。使用该函数对上述实现进行测试，在上述值语义的测试代码中的<code>var list2 = list1</code>语句前后，添加检查：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">print(&quot;List1 uniquely referenced: \\(isKnownUniquelyReferenced(&amp;list1.head))&quot;)\nvar list2 &#x3D; list1\nprint(&quot;List1 uniquely referenced: \\(isKnownUniquelyReferenced(&amp;list1.head))&quot;)</code></pre>\n\n<p>执行后，打印结果如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">List1 uniquely referenced: true\nList1 uniquely referenced: false</code></pre>\n\n<p>使用<strong>isKnownUniquelyReferenced</strong>能够检查node对象是否被共享。验证了此函数的功能后，删除上述打印语句，在**copyNodes()**函数中添加检查性代码：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">guard !isKnownUniquelyReferenced(&amp;head) else &#123;\n    return\n&#125;</code></pre>\n\n<p>添加后，测试COW，打印结果：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">&#x2F;&#x2F; ---Example of linked list cow test---\n&#x2F;&#x2F; list1: 1 -&gt;2 \n&#x2F;&#x2F; list2: 1 -&gt;2 \n&#x2F;&#x2F; --- After adding 3 to list 2 ---\n&#x2F;&#x2F; list1: 1 -&gt;2 \n&#x2F;&#x2F; list2: 1 -&gt;2 -&gt;3 </code></pre>\n\n<p>可以看到值语义特性依然运行良好。通过这个优化，LinkedList的性能将借助COW的特性恢复到之前的水平。</p>\n<h3 id=\"节点共享\"><a href=\"#节点共享\" class=\"headerlink\" title=\"节点共享\"></a>节点共享</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>节点共享是在禁用COW的情况下的另一种方式，因此在下面的工作原理中，均属于禁用COW的范畴。</p></blockquote>\n<p>另一种优化COW的方式是通过<strong>节点部分共享</strong>的方式。在一些情况下，并不需要完全复制整个链表，其中部分节点可以采用共享的方式实现。其工作原理如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;share nodes &quot;) &#123;\n    var list1 &#x3D; LinkedList&lt;Int&gt;()\n    (1 ... 3).forEach &#123; list1.append($0) &#125;\n    var list2 &#x3D; list1\n&#125;</code></pre>\n\n<p>上述代码中<code>list2</code>并未新建内存空间，而是将指针指向了list1对应的位置。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/5/share-nodes-eg1.png\"></p>\n<p>接下来向list2中添加元素：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">list2.push(0)</code></pre>\n\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/5/share-nodes-eg2.png\"></p>\n<p>通过上述图例可知，list1和list2两个链表共享了节点1、2、3，并且list1的头节点属于共享节点1。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">list1: 1 -&gt;2 -&gt;3  \nlist2: 0 -&gt;1 -&gt;2 -&gt;3 </code></pre>\n\n<p>如果此时向list1添加元素：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">list1.push(100)</code></pre>\n\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/5/share-nodes-eg3.png\"></p>\n<p>打印结果如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">list1: 100 -&gt;1 -&gt;2 -&gt;3   \nlist2: 0 -&gt;1 -&gt;2 -&gt;3  </code></pre>\n\n<p>可以看到两个链表依然共享节点1、2、3，list1的头节点已经改变。</p>\n<p><strong>节点共享</strong>的方式是另一种可以实现类似COW特性的方式，在值语义的功能中可能会比Copy操作更加有效。这里不再进行具体的实现。</p>\n<h2 id=\"关键点总结\"><a href=\"#关键点总结\" class=\"headerlink\" title=\"关键点总结\"></a>关键点总结</h2><ul>\n<li><strong>单向链表是一个线性的、单向的数据结构</strong>，一旦将引用从一个节点移动到另一个节点，将无法返回；</li>\n<li>链接列表具有头插入的 <strong>O（1）</strong> 时间复杂性。数组具有 <strong>O（n）</strong> 时间复杂性；</li>\n<li>符合 Swift 集合协议（如<strong>Sequence</strong>和<strong>Collection</strong>）为相当少量的需求提供了大量有用的方法；</li>\n<li>通过写<strong>入时复制（COW）</strong>行为，您可以实现值语义。</li>\n</ul>\n","text":"在Swift标准库（Swift standard library）中定义了很多协议或协议的集合，这些协议分别对应了特定的数据类型，每个协议都对所定义的数据类型有一些特性和性能方面的保证，而对于开发者而言，这些协议也是自定义数据结构和对现有数据类型进行扩展的基础准则。在这些协议的集...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%8C%96%E4%B8%BASwift%E9%9B%86%E5%90%88\"><span class=\"toc-text\">进化为Swift集合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9B%86%E5%90%88%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">自定义集合索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%80%BC%E8%AF%AD%E4%B9%89%E5%92%8C%E5%86%99%E5%85%A5%E6%97%B6%E5%A4%8D%E5%88%B6%EF%BC%88copy-on-write%EF%BC%89\"><span class=\"toc-text\">值语义和写入时复制（copy-on-write）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#COW%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">COW的优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#isKnownUniquelyReferenced\"><span class=\"toc-text\">isKnownUniquelyReferenced</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8A%82%E7%82%B9%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">节点共享</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E7%82%B9%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">关键点总结</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"\\#4\\ 单向链表的Swift实现","uid":"433ae949273168d0f60f97343029174d","slug":"2019-12-03-Data-Structures-&-Algorithms-in-Swift-04","date":"2023-05-13T15:08:12.965Z","updated":"2023-05-13T15:08:12.965Z","comments":true,"path":"api/articles/2019-12-03-Data-Structures-&-Algorithms-in-Swift-04.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/4/cover.jpg","text":"链表是一种线性的、单向的数据结构，不同于数组连续的内存存储，链表中的元素在内存是独立的对象。链表具有以下理论优势： 元素插入和从列表头部删除元素的时间恒定； 具有可靠的性能特性。 如上图所示，链表的结构是一个节点结构。节点具有两个功能： 保存值； 保存下一个节点的指针。nil节点...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"\\#6\\ Linked List 挑战","uid":"87b78748d49eafbc45cf485f76a0100a","slug":"2019-12-05-Data-Structures-&-Algorithms-in-Swift-06","date":"2023-05-13T15:08:12.965Z","updated":"2023-05-13T15:08:12.965Z","comments":true,"path":"api/articles/2019-12-05-Data-Structures-&-Algorithms-in-Swift-06.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/6/cover.jpg","text":"本文内容将针对LinkedList的五大通用性场景问题，进行求解。这些问题相比多数挑战来说相对简单，主要是为了巩固关于LinkedList的知识。 Challenge 1：创建按照反向顺序打印链表元素的函数。&#x2F;&#x2F; LinkedList 1 -&gt; 2 -&...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}