{"title":"8大场景数据清洗Python代码","uid":"b1badcef23656fe021b375990b5cfa48","slug":"2019-01-22-data_cleaning","date":"2023-05-14T11:04:02.186Z","updated":"2023-05-14T11:04:02.186Z","comments":true,"path":"api/articles/2019-01-22-data_cleaning.json","keywords":null,"cover":null,"content":"<p><strong>数据清洗</strong>是进行数据分析和使用数据训练模型的必经之路，也是最为耗费数据科学家、程序员的地方。</p>\n<p>在数据清洗的过程中，绝大多数的场景下，所进行的清洗工作都是相似甚至是重复的，因此有必要将数据清洗工作的场景进行总结并给出对应的清洗代码，以便形成可适用于多数工程项目的工具箱。</p>\n<hr>\n<h1 id=\"涵盖8大场景的数据清洗代码\"><a href=\"#涵盖8大场景的数据清洗代码\" class=\"headerlink\" title=\"涵盖8大场景的数据清洗代码\"></a>涵盖8大场景的数据清洗代码</h1><p>以下数据清洗代码，涵盖了8个数据清洗工作中常见的场景，分别是：</p>\n<ol>\n<li>删除多列</li>\n<li>转换数据类型</li>\n<li>将分类变量转换为数字变量</li>\n<li>检查缺失数据</li>\n<li>删除列中的字符串</li>\n<li>删除列中的空格</li>\n<li>用字符串连接两列（带条件）</li>\n<li>转换时间戳（从字符串到日期时间格式）</li>\n</ol>\n<h2 id=\"1-删除多列\"><a href=\"#1-删除多列\" class=\"headerlink\" title=\"1. 删除多列\"></a>1. 删除多列</h2><p>在进行数据分析时，可能并非所有的列都有用，此时可以使用<code>df.drop</code>方便地删除指定的列：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def drop_multiple_col(col_name_list, df):\n\tdf.drop(col_name_list, axis&#x3D;1, inplace&#x3D;True)\n\treturn df</code></pre>\n\n<h2 id=\"2-转换数据类型\"><a href=\"#2-转换数据类型\" class=\"headerlink\" title=\"2. 转换数据类型\"></a>2. 转换数据类型</h2><p>当数据集变大时，可能需要转换数据类型来节省内存空间：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def change_dtypes(col_int, col_float, df):\n\tdf[col_int] &#x3D; df[col_int].astype(&#39;int32&#39;)\n\tdf[col_float] &#x3D; df[col_float].astype(&#39;float32&#39;)</code></pre>\n\n<h2 id=\"3-将分类变量转换为数字变量\"><a href=\"#3-将分类变量转换为数字变量\" class=\"headerlink\" title=\"3. 将分类变量转换为数字变量\"></a>3. 将分类变量转换为数字变量</h2><p>在一些机器学习模型中，会要求变量采用数值格式。此时便需要将分类变量转换为数字变量，同时，也可以保留分类变量，以便进行数据可视化等：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def convert_cat_2num(df):\n\tnum_encode &#x3D; &#123;&#39;col_1&#39; : &#123;&#39;YES&#39;:1, &#39;NO&#39;:0&#125;,\n\t\t\t\t  &#39;col_2&#39; : &#123;&#39;WON&#39;:1, &#39;LOSE&#39;:0, &#39;DRAW&#39;:0&#125;&#125;\n\tdf.replace(num_encode, inplace&#x3D;True)</code></pre>\n\n<h2 id=\"4-检查缺失数据\"><a href=\"#4-检查缺失数据\" class=\"headerlink\" title=\"4. 检查缺失数据\"></a>4. 检查缺失数据</h2><p>如果要检查每列缺失数据的数量，可使用下面的代码，目前来看应该是最快的方法。可以更好地了解哪些列缺失的数据更多，从而确定怎么进行下一步的数据清洗和分析操作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def check_missing_data(df):\n\treturn df.isnull().sum().sort_values(ascending&#x3D;False)</code></pre>\n\n<h2 id=\"5-删除列中的字符串\"><a href=\"#5-删除列中的字符串\" class=\"headerlink\" title=\"5. 删除列中的字符串\"></a>5. 删除列中的字符串</h2><p>有时，会有新的字符或者其他不需要的符号出现在字符串中，此时可以使用<code>df[&#39;col_1&#39;].replace</code>将它们处理掉：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def remove_col_str(df):\n\tdf[&#39;col_1&#39;].replace(&#39;\\n&#39;, &#39;&#39;, regex&#x3D;True, inplace&#x3D;True)\n\tdf[&#39;col_1&#39;].replace(&#39; &amp;#.*&#39;, &#39;&#39;, regex&#x3D;True, inplace&#x3D;True)</code></pre>\n\n<h2 id=\"6-删除列中的空格\"><a href=\"#6-删除列中的空格\" class=\"headerlink\" title=\"6. 删除列中的空格\"></a>6. 删除列中的空格</h2><p>当数据混乱的时候，什么情况都有可能发生。字符串开头有时会有一些空格，在删除列中字符串开头的空格时，可使用下面的代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def remove_col_white_space(col, df):\n\tdf[col] &#x3D; df[col].str.lstrip()</code></pre>\n\n<h2 id=\"7-用字符串连接两列（带条件）\"><a href=\"#7-用字符串连接两列（带条件）\" class=\"headerlink\" title=\"7. 用字符串连接两列（带条件）\"></a>7. 用字符串连接两列（带条件）</h2><p>当你想要有条件地用字符串将两列连接在一起时，这段代码很有帮助。比如，你可以在第一列结尾处设定某些字母，然后用它们与第二列连接在一起。</p>\n<p>根据需要，结尾处的字母也可以在连接完成后删除。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def concat_col_str_condition(df):\n    mask &#x3D; df[&#39;col_1&#39;].str.endswith(&#39;pil&#39;, na&#x3D;False)\n    col_new &#x3D; df[mask][&#39;col_1&#39;] + df[mask][&#39;col_2&#39;]\n    col_new.replace(&#39;pil&#39;, &#39; &#39;, regex&#x3D;True, inplace&#x3D;True)  # replace the &#39;pil&#39; with emtpy space</code></pre>\n\n<h2 id=\"8-转换时间戳（从字符串到日期时间格式）\"><a href=\"#8-转换时间戳（从字符串到日期时间格式）\" class=\"headerlink\" title=\"8. 转换时间戳（从字符串到日期时间格式）\"></a>8. 转换时间戳（从字符串到日期时间格式）</h2><p>在处理时间序列数据时，我们很可能会遇到字符串格式的时间戳列。</p>\n<p>这意味着要将字符串格式转换为日期时间格式(或者其他根据我们的需求指定的格式) ，以便对数据进行有意义的分析。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def convert_str_datetime(df): \n    df.insert(loc&#x3D;2, column&#x3D;&#39;timestamp&#39;, value&#x3D;pd.to_datetime(df.transdate, format&#x3D;&#39;%Y-%m-%d %H:%M:%S.%f&#39;)) </code></pre>\n\n<p>以上便是针对8个常见场景的数据清洗代码，在部分场景下，你可能需要简单修改代码才可使用。在面对各种不同且复杂的数据时，可能需要先了解你的数据，然后再决定使用那个或者那些方法进行数据的清洗工作，使得数据能够更好的进入下一步的分析建模过程等。</p>\n","text":"数据清洗是进行数据分析和使用数据训练模型的必经之路，也是最为耗费数据科学家、程序员的地方。 在数据清洗的过程中，绝大多数的场景下，所进行的清洗工作都是相似甚至是重复的，因此有必要将数据清洗工作的场景进行总结并给出对应的清洗代码，以便形成可适用于多数工程项目的工具箱。 涵盖8大场景...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":10,"path":"api/categories/机器学习.json"}],"tags":[{"name":"机器学习 Python","slug":"机器学习-Python","count":1,"path":"api/tags/机器学习-Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B6%B5%E7%9B%968%E5%A4%A7%E5%9C%BA%E6%99%AF%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">涵盖8大场景的数据清洗代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%88%A0%E9%99%A4%E5%A4%9A%E5%88%97\"><span class=\"toc-text\">1. 删除多列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. 转换数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%B0%86%E5%88%86%E7%B1%BB%E5%8F%98%E9%87%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E5%AD%97%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3. 将分类变量转换为数字变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%A3%80%E6%9F%A5%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4. 检查缺失数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%88%A0%E9%99%A4%E5%88%97%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">5. 删除列中的字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%88%A0%E9%99%A4%E5%88%97%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\">6. 删除列中的空格</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5%E4%B8%A4%E5%88%97%EF%BC%88%E5%B8%A6%E6%9D%A1%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">7. 用字符串连接两列（带条件）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E8%BD%AC%E6%8D%A2%E6%97%B6%E9%97%B4%E6%88%B3%EF%BC%88%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">8. 转换时间戳（从字符串到日期时间格式）</span></a></li></ol></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"或许是频繁切换git分支的救星--git worktree","uid":"af1206b3336cbf2448dc968e084c5e69","slug":"2022-06-24-git-worktree","date":"2023-05-14T11:04:02.190Z","updated":"2023-05-14T11:04:02.190Z","comments":true,"path":"api/articles/2022-06-24-git-worktree.json","keywords":null,"cover":"/images/cover/2022-06-24-git-worktree.jpg","text":"在实际的开发过程中，你是否也需要经常来回切换分支，如果是，那么这篇文章介绍的方法或者正合适你。 频繁切换分支的情况 场景1：协助同事 第一种场景是你正在自己的分支feature-my上做着功能的开发，这时候你的同事给你发信息说，帮忙看一个问题，分支是：feature-abc,通常...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识","slug":"开发知识","count":3,"path":"api/tags/开发知识.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"iOS中Log同步获取与重定向","uid":"ea3e901619c09b0b5da7b4018126c113","slug":"2019-01-22-iOS_NSLog","date":"2023-05-14T11:04:02.186Z","updated":"2023-05-14T11:04:02.186Z","comments":true,"path":"api/articles/2019-01-22-iOS_NSLog.json","keywords":null,"cover":null,"text":"在iOS开发的过程中，经常会使用NSLog作为调试和查看相关数据的输出口，该方法连接Xcode构建项目时能够实时输出开发者在代码线中打印的日志。但是在断开Xcode并使用真机测试的时候，经常会无法查看真机的实时日志，导致一些问题难以追查和确定，导致问题的定位与解决花费较长的时间，...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}