{"title":"\\#1\\ 为什么要学习数据结构与算法","uid":"e90242255f8181a299a4107cc70159e8","slug":"2019-12-01-Data-Structures-&-Algorithms-in-Swift-01","date":"2023-05-30T09:56:42.583Z","updated":"2023-05-30T09:56:42.583Z","comments":true,"path":"api/articles/2019-12-01-Data-Structures-&-Algorithms-in-Swift-01.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/1/cover.jpg","content":"<p>随机网络上有大量的程序员应该学习<strong>数据结构和算法</strong>的文章。还记得实在大学时代的时候，系统的学习过数据结构、算法相关的课程，而后几乎没有系统学习过了。工作后从一开始的各种业务逻辑的开发，慢慢深入了解到系统底层，了解了代码的执行效率以及对硬件设备资源的消耗基本上都是由数据结构和算法决定的，才开始慢慢关心起来良好的数据结构设计和良好的算法设计，才能够在数据量越来越多的时候，所设计的软件才能良好地执行等。</p>\n<p>那么对于程序员来说，到底为什么要学习数据结构和算法呢？首先要了解的是什么是<strong>数据结构</strong>？</p>\n<h2 id=\"什么是数据结构？\"><a href=\"#什么是数据结构？\" class=\"headerlink\" title=\"什么是数据结构？\"></a>什么是数据结构？</h2><p>具体的定义这里摘录了维基百科的定义，具体如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。</p>\n<p>数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。</p>\n<p>大多数数据结构都由数列、记录、可辨识联合、引用等基本类型构成。举例而言，可为空的引用（nullable reference）是引用与可辨识联合的结合体，而最简单的链式结构链表则是由记录与可空引用构成。</p>\n<p>数据结构可透过编程语言所提供的数据类型、引用及其他操作加以实现。一个设计良好的数据结构，应该在尽可能使用较少的时间与空间资源的前提下，支持各种程序运行。</p>\n<p>不同种类的数据结构适合不同种类的应用，部分数据结构甚至是为了解决特定问题而设计出来的。例如B树即为加快树状结构访问速度而设计的数据结构，常被应用在数据库和文件系统上。</p>\n<p>正确的数据结构选择可以提高算法的效率（请参考算法效率）。在计算机程序设计的过程中，选择适当的数据结构是一项重要工作。许多大型系统的编写经验显示，程序设计的困难程度与最终成果的质量与表现，取决于是否选择了最适合的数据结构。</p>\n<p>系统架构的关键因素是数据结构而非算法的见解，导致了多种形式化的设计方法与编程语言的出现。绝大多数的语言都带有某种程度上的模块化思想，透过将数据结构的具体实现封装隐藏于用户界面之后的方法，来让不同的应用程序能够安全地重用这些数据结构。C++、Java、Python等面向对象的编程语言可使用类 (计算机科学)来达到这个目的。</p>\n<p>摘录自维基百科: <a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">数据结构</a></p></blockquote>\n<span id=\"more\"></span>\n\n\n<p>其中有一段个人觉得很有启发，<strong>“不同种类的数据结构适合不同种类的应用，部分数据结构甚至是为了解决特定问题而设计出来的。”</strong> 个人理解是数据结构不仅仅百年不变的，不同的问题在不同的条件下，可能需要不同的数据结构设计，对于软件开发者而言，数据结构思维要时刻记载心间，根据特定的问题、所处的环境，选择或者设计那种平衡了性能和效率的数据结构。</p>\n<h2 id=\"什么是算法？\"><a href=\"#什么是算法？\" class=\"headerlink\" title=\"什么是算法？\"></a>什么是算法？</h2><p>同样摘录自维基百科，具体如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>算法（algorithm），在数学（算学）和计算机科学之中，为任何一系列良定义的具体计算步骤，常用于计算、数据处理和自动推理。作为一个有效方法，算法被用于计算函数，它包含了一系列定义清晰的指令，并可于有限的时间及空间内清楚的表述出来。</p>\n<p>算法中的指令描述的是一个计算，当其运行时能从一个初始状态和初始输入（可能为空）开始，经过一系列有限而清晰定义的状态最终产生输出并停止于一个终态。一个状态到另一个状态的转移不一定是确定的。包括随机化算法在内的一些算法，都包含了一些随机输入。</p>\n<p>摘录自维基百科: <a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95\">算法</a></p></blockquote>\n<p>简言之，就是算法是具体的计算步骤，算法的输入和输出都需要有效。在不同的问题上，所采用的算法也不尽相同，可以说算法也是针对特定的问题和特定的环境下，进行优化设计的一种计算步骤。</p>\n<p>由算法衍生出来一系列和算法相关的内容，例如<strong>设计模式、时间复杂度、空间复杂度</strong>等，为算法的设计和实现提供理论支撑，衡量算法的性能和效率等。具体在后续的内容中将会深入学习。</p>\n<h2 id=\"为什么要学习数据结构和算法\"><a href=\"#为什么要学习数据结构和算法\" class=\"headerlink\" title=\"为什么要学习数据结构和算法\"></a>为什么要学习数据结构和算法</h2><p>计算数据结构和算法都是为了特定的问题在特定的环境下，设计软件开发的系统结构、代码实现方式等，那么程序员就应该熟谙其中的知识点，掌握基本的数据结构设计和算法设计，以最优化的思维编写程序代码，完成对特定功能的最优化实现，保证软件的高质量完成和执行。具体程序员为什么要学习数据结构和算法，大概有如下三点理由：</p>\n<h3 id=\"1-面试\"><a href=\"#1-面试\" class=\"headerlink\" title=\"1. 面试\"></a>1. 面试</h3><p>毫不客气地讲，良好的数据结构和算法知识储备，是程序员或者软件开发工程师找工作的敲门砖。在工程师面试的中，几乎都会涉及到算法和数据结构的测试，具有扎实的数据结构和算法基础，越来越成为面试中是否可以继续的红线。</p>\n<h3 id=\"2-工作\"><a href=\"#2-工作\" class=\"headerlink\" title=\"2. 工作\"></a>2. 工作</h3><p>在工作中面临巨大的数据量时，良好数据结构的设计，能够应对更加从容；使用正确地算法能够让软件的性能和效率更好。移动端应用程序将会更灵活并且耗电量低。服务端应用程序将会在少量的能耗下处理多并发请求等。</p>\n<h3 id=\"3-自我提升\"><a href=\"#3-自我提升\" class=\"headerlink\" title=\"3. 自我提升\"></a>3. 自我提升</h3><p>技术的革新是日新月异的，作为技术从业者，我们可能要不断地进行学习，以了解技术的发展，并应对业务的发展。例如在Swift语言中，Swift标准库有一个通用的集合类型的系列，他们不需要定义所有特定的情况，通用类型即可。在不断学习之后，你才能了解到语言本身所涵盖的特性等，为了更加高效和完善的软件提供知识支援等。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>或许每个人的学习方式和目的不尽相同，但是上述三个理由，总有一个给与你学习的充分理由的，不论是为了即将到来的面试、还是正在进行中的工作任务，抑或为了不让自己的技术落伍等，作为程序员来说，都应该重视数据结构和算法，夯实自己的基础知识，并在其上映射到你所擅长或者感兴趣的编程语言上，了解语言的特性并编写设计出良好的数据结构和算法，为自己的下一次远程储备粮草！</p>\n","text":"随机网络上有大量的程序员应该学习数据结构和算法的文章。还记得实在大学时代的时候，系统的学习过数据结构、算法相关的课程，而后几乎没有系统学习过了。工作后从一开始的各种业务逻辑的开发，慢慢深入了解到系统底层，了解了代码的执行效率以及对硬件设备资源的消耗基本上都是由数据结构和算法决定的...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9F\"><span class=\"toc-text\">什么是数据结构？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%97%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">什么是算法？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">为什么要学习数据结构和算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%9D%A2%E8%AF%95\"><span class=\"toc-text\">1. 面试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">2. 工作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">3. 自我提升</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"Swift语言中的轻量级API设计","uid":"9bf30773ec01d0aa2cdc72baf1be3d0d","slug":"2019-11-28-lightweight-api-design-in-swift","date":"2023-05-30T09:56:42.583Z","updated":"2023-05-30T09:56:42.583Z","comments":true,"path":"api/articles/2019-11-28-lightweight-api-design-in-swift.json","keywords":null,"cover":"/images/lightweight-api/cover.jpg","text":"Swift语言自诞生以来，总是或多或少受到人们的非议，新生的编程语言难免有些不够尽善尽美，但是哪种编程语言是尽善尽美的呢？OC语言算得上是一种古老的面向对象语言了，发展至今，其版本仍处于2.0，但是Apple为了让其看起来强大一点，增加了很多特性，例如Block、instance...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"\\#2\\ 认识 Array & Dictionary","uid":"c0089ea14d61cc249075e2e9c2241913","slug":"2019-12-01-Data-Structures-&-Algorithms-in-Swift-02","date":"2023-05-30T09:56:42.583Z","updated":"2023-05-30T09:56:42.583Z","comments":true,"path":"api/articles/2019-12-01-Data-Structures-&-Algorithms-in-Swift-02.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/2/cover.jpg","text":"在 Swift Standard Library 中包含了Swift语言的核心组件。在标准库框架中你可以发现很多可用于应用程序开发的同居和类型，在开始设计自己的数据结构前，了解Swift语言本身的语言特性是设计良好数据结构和算法设计的基础。 在此篇内容中，着重了解 Swift S...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}