{"title":"2022-07-17  重构那些事","uid":"9f08952be24e03501c17b0dc2ee6bf37","slug":"2022-07-17-log-refactor","date":"2022-07-17T20:30:38.000Z","updated":"2023-05-19T09:57:19.845Z","comments":true,"path":"api/articles/2022-07-17-log-refactor.json","keywords":null,"cover":null,"content":"<h2 id=\"WHAT：什么是重构？\"><a href=\"#WHAT：什么是重构？\" class=\"headerlink\" title=\"WHAT：什么是重构？\"></a>WHAT：什么是重构？</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Martin Fowler：重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。</p></blockquote>\n<ul>\n<li>大型重构<ul>\n<li>对象：对系统、模块、代码结构、类与类之间的关系等的重构</li>\n<li>方法：有分层垂直拆分、模块化水平拆分、解耦、抽象UI组件、抽象业务组件、抽象区块</li>\n<li>方法论：编程范式、<code>设计原则</code>、设计模式</li>\n<li>影响：代码改动多，影响面广，难度较大，耗时较长，引入BUG风险高</li>\n</ul>\n</li>\n<li>小型重构<ul>\n<li>对象：对类、函数、变量等代码级别的重构</li>\n<li>方法：规范命名(<code>见名知意</code>)、规范注释、函数拆分、提取重复代码、eslint等</li>\n<li>方法论：统一代码风格、制定规范、<code>语义化编程</code>、eslint</li>\n<li>影响：影响面小，难度小，次数频繁，引入BUG风险低</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"WHY：为什么要重构？\"><a href=\"#WHY：为什么要重构？\" class=\"headerlink\" title=\"WHY：为什么要重构？\"></a>WHY：为什么要重构？</h2><ul>\n<li>软件最初设计的时候没有考虑到全部的功能和细节</li>\n<li>软件需求变更和持续迭代导致原先的设计已不适用</li>\n<li>消除<code>破窗效应</code>，当代码里面有了坏味道而不及时改善，容易破罐子破摔加速恶化</li>\n</ul>\n<h2 id=\"HOW：如何重构代码？\"><a href=\"#HOW：如何重构代码？\" class=\"headerlink\" title=\"HOW：如何重构代码？\"></a>HOW：如何重构代码？</h2><ul>\n<li>灵活运用编程范式思想<ul>\n<li>面向对象</li>\n<li>面向过程</li>\n<li>函数式编程</li>\n</ul>\n</li>\n<li>以设计原则为核心<ul>\n<li>SOLID</li>\n<li>KISS</li>\n<li>DRY</li>\n<li>YAGNI</li>\n<li>LOD</li>\n<li>CRP</li>\n</ul>\n</li>\n<li>以eslint为基础手段<ul>\n<li>airbnb</li>\n<li>standard</li>\n<li>recommanded</li>\n<li>prettier</li>\n<li>自定义</li>\n</ul>\n</li>\n<li>以<code>渐进式持续重构代码</code>为方法论</li>\n<li>优点：持续集成、进度可控、过程可逆、不影响正常业务开发进度</li>\n<li>按金字塔原则对项目代码进行拆分<ul>\n<li>业务模块水平拆分</li>\n<li>代码分层垂直拆分</li>\n</ul>\n</li>\n<li>评估出每一个重构单元的耗时<ul>\n<li>合理评估工作量</li>\n<li>权衡重构的性价比</li>\n<li>增加重构的可控性</li>\n</ul>\n</li>\n<li>正在做或规划中的业务单元顺手完成重构，其他部分安排空闲时间依次重构</li>\n<li>注意<ul>\n<li>从0-&gt;1一次性完成重构的理想场景只存在于理想中。如果真实存在，只能说明项目过小或者已经趋于稳定迭代很少，这种情况要考虑是否真的有重构的必要！！！</li>\n<li>不要有了锤子(重构方法论)，就满世界去找钉子</li>\n<li>重构不是软件开发的必要流程，而是现有代码的组织缺陷或不合理的补救方式。</li>\n<li><code>养成好的代码风格</code>和<code>code review</code>的习惯避免代码的坏味道才是根本</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"WHEN：什么时候重构？\"><a href=\"#WHEN：什么时候重构？\" class=\"headerlink\" title=\"WHEN：什么时候重构？\"></a>WHEN：什么时候重构？</h2><ul>\n<li>不要等到积重难返有了瓶颈之后再进行重构，大规模高层次的重构耗时耗力难度剧大</li>\n<li>应该建立起渐进式持续重构的意识，发现当前业务代码写的有问题就应该及时进行小规模的重构，而不是欠一屁股技术债</li>\n</ul>\n<h2 id=\"BUG：重构会不会引入新的BUG？\"><a href=\"#BUG：重构会不会引入新的BUG？\" class=\"headerlink\" title=\"BUG：重构会不会引入新的BUG？\"></a>BUG：重构会不会引入新的BUG？</h2><p>会，所以怎么办呢？</p>\n<ul>\n<li>通过完整的<code>单元测试</code>保证重构前后的外部可见性一致</li>\n<li>有条件的话找专业的测试进行<code>端到端测试</code>和<code>灰度测试</code></li>\n</ul>\n<h2 id=\"RISK：重构上线带来BUG的风险怎么解决？\"><a href=\"#RISK：重构上线带来BUG的风险怎么解决？\" class=\"headerlink\" title=\"RISK：重构上线带来BUG的风险怎么解决？\"></a>RISK：重构上线带来BUG的风险怎么解决？</h2><p>如果不通知业务方直接将重构的代码上线，一旦出现问题，你肯定全责并且重构没有功劳也没有苦劳了</p>\n<ul>\n<li>有条件的话找专业的测试进行端到端测试和灰度测试</li>\n<li>必须通知业务方并说服业务方同意，让业务方做好准备上线后检查一下。如果真的引入了bug也不太会追责，因为在预期内并且我们的目标也是为了项目的长远发展呀</li>\n</ul>\n<h2 id=\"FEASIBILITY：如何让业务方意识到现阶段重构是必要的并同意？\"><a href=\"#FEASIBILITY：如何让业务方意识到现阶段重构是必要的并同意？\" class=\"headerlink\" title=\"FEASIBILITY：如何让业务方意识到现阶段重构是必要的并同意？\"></a>FEASIBILITY：如何让业务方意识到现阶段重构是必要的并同意？</h2><ul>\n<li>让业务方、产品、测试看到开发中的痛点和技术上的瓶颈</li>\n<li>让所有人意识到缝缝补补破窗效应导致问题加剧，已经积重难返了</li>\n<li>强调重构带来的<code>技术收益</code>和<code>业务收益</code></li>\n<li>提供<code>切实可行并可控的重构计划方案</code></li>\n</ul>\n<h2 id=\"PERFORMANCE：重构价值不被认可怎么办？\"><a href=\"#PERFORMANCE：重构价值不被认可怎么办？\" class=\"headerlink\" title=\"PERFORMANCE：重构价值不被认可怎么办？\"></a>PERFORMANCE：重构价值不被认可怎么办？</h2><ul>\n<li>明明是你代码写的烂才导致的重构，浪费时间，还有脸要绩效？想屁吃呢<ul>\n<li>承认自己会写bug，表明没有不写bug的程序员（勇于担当并弱化责任，表明<code>owner</code>身份和<code>地盘</code>）</li>\n<li>指出导致重构的其他原因：需求频繁变更，紧急需求倒排工时，没有将业务长期规划方向信息同步给开发，多人协作团队没有统一风格，团队没有code review，没有eslint规范等等（表明主要责任不在我，但是我<code>意识到了问题</code>并<code>主动</code>解决了）</li>\n<li>强调重构带来的优点：BUG数量减少，维护成本下降，BUG排查变快，开发速度增高等（<code>业务价值才是绩效的根本</code>）</li>\n</ul>\n</li>\n</ul>\n","text":"WHAT：什么是重构？ Martin Fowler：重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。 大型重构 对象：对系统、模块、代码结构、类与类之间的关系等的重构 方法：有分层垂直拆分、模块化水平拆分、解耦、抽象UI组件、抽象...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Logs","slug":"Logs","count":3,"path":"api/categories/Logs.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WHAT%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E6%9E%84%EF%BC%9F\"><span class=\"toc-text\">WHAT：什么是重构？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WHY%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%87%8D%E6%9E%84%EF%BC%9F\"><span class=\"toc-text\">WHY：为什么要重构？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HOW%EF%BC%9A%E5%A6%82%E4%BD%95%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%EF%BC%9F\"><span class=\"toc-text\">HOW：如何重构代码？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WHEN%EF%BC%9A%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%87%8D%E6%9E%84%EF%BC%9F\"><span class=\"toc-text\">WHEN：什么时候重构？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BUG%EF%BC%9A%E9%87%8D%E6%9E%84%E4%BC%9A%E4%B8%8D%E4%BC%9A%E5%BC%95%E5%85%A5%E6%96%B0%E7%9A%84BUG%EF%BC%9F\"><span class=\"toc-text\">BUG：重构会不会引入新的BUG？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RISK%EF%BC%9A%E9%87%8D%E6%9E%84%E4%B8%8A%E7%BA%BF%E5%B8%A6%E6%9D%A5BUG%E7%9A%84%E9%A3%8E%E9%99%A9%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\">RISK：重构上线带来BUG的风险怎么解决？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#FEASIBILITY%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%A9%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%84%8F%E8%AF%86%E5%88%B0%E7%8E%B0%E9%98%B6%E6%AE%B5%E9%87%8D%E6%9E%84%E6%98%AF%E5%BF%85%E8%A6%81%E7%9A%84%E5%B9%B6%E5%90%8C%E6%84%8F%EF%BC%9F\"><span class=\"toc-text\">FEASIBILITY：如何让业务方意识到现阶段重构是必要的并同意？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PERFORMANCE%EF%BC%9A%E9%87%8D%E6%9E%84%E4%BB%B7%E5%80%BC%E4%B8%8D%E8%A2%AB%E8%AE%A4%E5%8F%AF%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F\"><span class=\"toc-text\">PERFORMANCE：重构价值不被认可怎么办？</span></a></li></ol>","author":{"name":"Yak-0xff","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位不满现状，就爱瞎折腾的技术人 <br /> 🤔 <b>勿以事小而不为</b>","socials":{"github":"https://github.com/zycslog","twitter":"https://twitter.com/zh_robin","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3104676569682525","customs":{}}},"mapped":true,"prev_post":{"title":"机器学习基础介绍","uid":"2ddef7366c507d2b0030ac2779f34302","slug":"2018-09-20-Introduction_Of_Machine_Learning","date":"2023-05-19T09:57:19.837Z","updated":"2023-05-19T09:57:19.841Z","comments":true,"path":"api/articles/2018-09-20-Introduction_Of_Machine_Learning.json","keywords":null,"cover":[],"text":"机器学习是一门从数据中提取知识的技术。 它是统计学、人工智能和计算机科学的交叉研究领域，被常被称为预测分析、统计学习。机器学习方法的应用近年来在日常生活中无处不在。从自动推荐看哪部电影、点什么食物或买什么东西，到个性化的在线收音机、智能化在线教育，再到从照片中找到你的朋友等等需要...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"22 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":10,"path":"api/categories/机器学习.json"}],"tags":[{"name":"机器学习","slug":"机器学习","count":7,"path":"api/tags/机器学习.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"2022-07-04  关于死锁的简单记录","uid":"e0ae854e6f0229d985990b4529079d67","slug":"2022-07-04-log-dead-lock","date":"2022-07-04T14:21:38.000Z","updated":"2023-05-19T09:57:19.845Z","comments":true,"path":"api/articles/2022-07-04-log-dead-lock.json","keywords":null,"cover":[],"text":" 死锁 指的是在多线程环境中，两个以上的线程在执行过程中，因争夺资源而造成一种相互等待的现象，如果无外力作用下，它们都将无法推进下去。 举个简单例子： 如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Logs","slug":"Logs","count":3,"path":"api/categories/Logs.json"}],"tags":[],"author":{"name":"Yak-0xff","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位不满现状，就爱瞎折腾的技术人 <br /> 🤔 <b>勿以事小而不为</b>","socials":{"github":"https://github.com/zycslog","twitter":"https://twitter.com/zh_robin","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3104676569682525","customs":{}}}}}