{"title":"或许是频繁切换git分支的救星--git worktree","uid":"af1206b3336cbf2448dc968e084c5e69","slug":"2022-06-24-git-worktree","date":"2023-05-18T03:03:50.458Z","updated":"2023-05-18T03:03:50.458Z","comments":true,"path":"api/articles/2022-06-24-git-worktree.json","keywords":null,"cover":"/images/cover/2022-06-24-git-worktree.jpg","content":"<p>在实际的开发过程中，你是否也需要经常来回切换分支，如果是，那么这篇文章介绍的方法或者正合适你。</p>\n<h2 id=\"频繁切换分支的情况\"><a href=\"#频繁切换分支的情况\" class=\"headerlink\" title=\"频繁切换分支的情况\"></a>频繁切换分支的情况</h2><ul>\n<li><strong>场景1：协助同事</strong></li>\n</ul>\n<p>第一种场景是你正在自己的分支<code>feature-my</code>上做着功能的开发，这时候你的同事给你发信息说，帮忙看一个问题，分支是：<code>feature-abc</code>,通常的情况，你会采用以下的步骤：</p>\n<ol>\n<li>通过 <code>git stash --all</code> 保存你的修改，或者通过 <code>git commit -m a &quot;Temp&quot;</code> 做一个临时提交</li>\n<li>通过vscode，或者命令行：<code>git checkout -b feature-abc origin/feature-abc</code> 或者 <code>git swith feature-abc</code> 切换分支</li>\n<li>等待分支切换完成</li>\n<li>接着就可以在<code>feature-abc</code>正常修改，提交，推送更新，完成之后就可以切回到<code>feature-my</code>继续之前的工作</li>\n</ol>\n<p>这些都是比较常规的步骤，其中感觉比较痛苦的是第三步，有的时候需要长时间地等待。</p>\n<ul>\n<li><strong>场景2：修改bug</strong></li>\n</ul>\n<p>你已经完成了一个功能的开发，代码都已经提交并推送到服务器了，你已经在做另一个功能了，但是发现上一个功能有一个bug，急需要修复，这个时候，你又要通过上面说的步骤进行分支的来回切换</p>\n<ul>\n<li><strong>场景3：同时做着两个功能的开发</strong></li>\n</ul>\n<p>同时做着多个功能的开发，本身就不符合常规的开发流程，我们不论这个流程的问题，就说这种场景，例如，如果你的工作会经常去优化可持续集成的构建代码，确保本地的修改是否符合要求，就需要去CI系统中进行测试验证 使用过CI的同事就会知道，CI分支通常的提交信息就像下面这个：</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/images/git-worktree/upload_f3f58ac624e1d5c10a0ff2d8e000a50f\"></p>\n<p>每一个提交都是一个小小的改动，需要推送到服务器，等待CI构建的完成。根据CI构建环境的不同，需要等待反馈结果的时间也不同。</p>\n<p>在等待的过程中，我们还可以做着需求功能开发，于是就会切换到功能分支上进行开发，待CI构建结果出来后，又返回到CI分支上，去调整相关的修改，再次推送CI构建系统进行验证，接着有重复着上面的切换分支的流程，如此往复，是否觉得繁琐呢？</p>\n<h2 id=\"同时在多个分支上开发\"><a href=\"#同时在多个分支上开发\" class=\"headerlink\" title=\"同时在多个分支上开发\"></a>同时在多个分支上开发</h2><ul>\n<li><strong>方案1：再clone一次仓库</strong></li>\n</ul>\n<p>同时在多个分支上进行开发，最原始的方式就是在另一个文件夹clone该项目，这样就可以在不同的clone下打开不同的分支。</p>\n<p><img src=\"/images/git-worktree/upload_7b7c83250dd4c19bee9c818c5e0d5f15\"></p>\n<p>但是这种方式也有几个弊端；</p>\n<ol>\n<li><strong>重复的文件</strong>，上图所示，每一个文件夹下都有.git文件夹，包含了项目的所有修改记录，但是他们的内容是一样的</li>\n<li><strong>重复的更新操作</strong>，由于是在两个不同的文件夹，如果需要更新项目的时候，例如：git fetch或者git pull，必须重复这种操作</li>\n<li><strong>不能共享本地的分支</strong>，比如，在test_one分支上修改了文件内容，不能在另一个文件夹的项目里看到，除非将这个更改同步到服务器端，然后再另一个文件夹的项目中进行更新操作，如此也就显得有点复杂了</li>\n</ol>\n<ul>\n<li><strong>方案2：git worktree</strong></li>\n</ul>\n<p>方案2就是使用<strong>git worktree</strong>, 与方案1非常类似，但是不存在上述的缺点，接下就展示如何通过<strong>git worktree</strong>，实现同时在两个分支上进行工作。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于git worktree的相关使用帮助，可参考：<a href=\"https://git-scm.com/docs/git-worktree\">Git 官方文档</a>。</p></blockquote>\n<h3 id=\"通过git-worktree-实现同时多分支开发\"><a href=\"#通过git-worktree-实现同时多分支开发\" class=\"headerlink\" title=\"通过git worktree 实现同时多分支开发\"></a>通过git worktree 实现同时多分支开发</h3><p>git本身就有<strong>工作树</strong>的概念，就像是你在一个目录下打开一个分支后看到的那些文件（当然不包括.git 文件夹），当你切换另一个分支时，git就会更新这个分支下的所有文件。一个仓库中可以有很多分支，但是只有一个当前分支，你可以在上面修改文件。</p>\n<p><strong>git worktree</strong>允许你同时checkout多个分支。每一个工作树都属于不同的文件夹，和多个克隆有点类似。但是不同的是，多个工作树都是链接到同一个仓库，接下来将简单地解释一下这个概念。</p>\n<h4 id=\"通过git-worktree管理工作树\"><a href=\"#通过git-worktree管理工作树\" class=\"headerlink\" title=\"通过git worktree管理工作树\"></a>通过git worktree管理工作树</h4><p>有很多种方式使用git worktree，这里我们只展示一些最基本的使用场景。</p>\n<p><strong>通过一个现有的分支创建工作树</strong></p>\n<p>在上面提到的场景中，你正在自己的分支上做着新功能的开发，这个时候你的同事需要你在他的分支上，帮他看一个问题，但是你又不像暂存你的更改，此时，你可以创建一个工作树。假如你同事的分支为other_feature，你可以在的项目根目录下，执行以下的命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git worktree add ..&#x2F;test_demo2 feature-test</code></pre>\n\n<p>将会看到如下的输出信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Preparing worktree (new branch &#39;feature-test&#39;)\nBranch &#39;feature-test&#39; set up to track remote branch &#39;feature-test&#39; from &#39;origin&#39;.\nHEAD is now at 22aa823 delete some unused files</code></pre>\n\n<p>git worktree 有三个参数：</p>\n<ul>\n<li><strong>add</strong> 表示创建一个新的工作树</li>\n<li><strong>..&#x2F;test_demo2</strong> 就是我们新创建的工作树的目录。由于我们是在仓库的根目录下创建的工作树，因此会创建目录test_demo2与原始仓库目录平级</li>\n</ul>\n<p><img src=\"/images/git-worktree/upload_81f664f59816ab30ceaae8beb461a66c\"></p>\n<ul>\n<li><strong>other_feature</strong> 就是要在新工作树中checkout的分支</li>\n</ul>\n<p>运行完命令之后，将看到如下的目录结构：</p>\n<p><img src=\"/images/git-worktree/upload_a124c11e551d31517b592339e53bf9e8\"></p>\n<p>可以看到在test_demo2中没有.git文件夹，但是有一个.git文件，该文件就是指向原始的仓库，意味着你在test_demo2文件夹中所有的更改，同样的也会在test_demo中发生更改。</p>\n<p>如果不再需要other_feature工作树的话，可以进入到test_demo目录，通过下面的命令删除</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git worktree remove ..&#x2F;test_demo2</code></pre>\n\n<p>将会删除test_demo2整个目录，但不会影响test_feature这个分支，只是不再会checkout feature-test分支了。</p>\n<p>如果要删除的工作树中还有未提交的更改，git将会阻止你删除，但是你可以通过–force命令参数，强制进行删除。</p>\n<p><strong>从新的分支中创建工作树</strong></p>\n<p>第二种场景，假设你需要改一个着急的bug，但是你还没有有一个分支。git worktree命令有一个 <strong>-b</strong> 命令参数，可以用来创建一个新的分支关联到新的工作树中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git worktree add ..&#x2F;test_demo2 origin&#x2F;main -b bug_fix</code></pre>\n\n<p>通过远程origin&#x2F;main分支，创建了一个新的分支bug_fix，并在目录test_demo2进行了checkout操作，同样，也可以通过一下命令进行删除：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git worktree remove ..&#x2F;test_demo2</code></pre>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>不得不说git为代码的管理带来了不可估量的高效率，几乎每一种开发中遇到的代码管理问题都能在官方文档中找到解决方式。本文也是简单的记录下git worktree的基本使用，更多详细的使用方式，可参考<a href=\"https://git-scm.com/docs/git-worktree\">Git 官方文档</a>，如果英文阅读比较费劲的话，可参考<a href=\"https://static.kancloud.cn/apachecn/git-doc-zh/1945506\">Git 中文参考</a>。</p>\n","text":"在实际的开发过程中，你是否也需要经常来回切换分支，如果是，那么这篇文章介绍的方法或者正合适你。 频繁切换分支的情况 场景1：协助同事 第一种场景是你正在自己的分支feature-my上做着功能的开发，这时候你的同事给你发信息说，帮忙看一个问题，分支是：feature-abc,通常...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识","slug":"开发知识","count":3,"path":"api/tags/开发知识.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%91%E7%B9%81%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">频繁切换分支的情况</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%97%B6%E5%9C%A8%E5%A4%9A%E4%B8%AA%E5%88%86%E6%94%AF%E4%B8%8A%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">同时在多个分支上开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87git-worktree-%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%97%B6%E5%A4%9A%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">通过git worktree 实现同时多分支开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87git-worktree%E7%AE%A1%E7%90%86%E5%B7%A5%E4%BD%9C%E6%A0%91\"><span class=\"toc-text\">通过git worktree管理工作树</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"再议Objective-C 2.0 中的 Runtime","uid":"93feab5362ca8ea100621030ee9dd628","slug":"2022-05-25-runtime-again","date":"2023-05-18T03:03:50.458Z","updated":"2023-05-18T03:03:50.458Z","comments":true,"path":"api/articles/2022-05-25-runtime-again.json","keywords":null,"cover":"/images/cover/2022-05-25-runtime-again.jpg","text":"绝大多数 iOS 开发者在学习 runtime 时都阅读过 runtime.h 文件中的这段代码: struct objc_class &#123; Class isa OBJC_ISA_AVAILABILITY; #if !__OBJC2__ Class super_class...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识","slug":"开发知识","count":3,"path":"api/tags/开发知识.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"关于iOS App启动时间的那些事","uid":"065e711203c90529e076df9f2cdf951d","slug":"2019-10-30-app-start-time-measure-and-improvement","date":"2023-05-18T03:03:50.454Z","updated":"2023-05-18T03:03:50.454Z","comments":true,"path":"api/articles/2019-10-30-app-start-time-measure-and-improvement.json","keywords":null,"cover":"/images/start-time/cover.jpg","text":"在iOS应用程序的开发过程中，应用的启动时长可谓是影响应用程序用户体验的第一要素，过长的应用启动耗时，势必带来用户的长时间等待，直接让用户失去了对应用程序进一步体验的兴趣，影响应用程序在用户心中的印象。一般情况下，应用程序开发完成上线后，接下来就是针对架构、性能、业务进行进一步优...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"开发知识","slug":"开发知识","count":9,"path":"api/categories/开发知识.json"}],"tags":[{"name":"开发知识 iOS","slug":"开发知识-iOS","count":7,"path":"api/tags/开发知识-iOS.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}