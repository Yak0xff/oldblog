{"title":"\\#8\\ 队列的Swift实现与操作定义","uid":"69dccdbf9286082e902aaae1dff82001","slug":"2019-12-10-Data-Structures-&-Algorithms-in-Swift-08","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2019-12-10-Data-Structures-&-Algorithms-in-Swift-08.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/8/cover.jpg","content":"<p>在生活中，人人都熟悉排队等待。无论你是在排队购买喜欢的电影的电影票，还是排队等待打印一份文件等等，这些都是<strong>队列（Queue）</strong>数据结构。在上文<a href=\"https://robinchao.github.io/2019/12/08/Data-Structures-&-Algorithms-in-Swift-07.html\">\\#7\\ Stack &amp; Stack Simple Challenges</a>中已经提到过队列和栈属于基本的数据结构类型，但是其在应用层面非常有效。</p>\n<p><strong>队列（Queue）</strong>是一种<strong>FIFO(ﬁrst-in ﬁrst-out)<strong>型的数据操作特性，和栈的</strong>LIFO</strong>形成鲜明的对比。<strong>FIFO</strong>意味着首先进入队列的元素，也是第一个推出队列的元素。在项目中，如果要维护一个有顺序的数据并稍后处理，队列是无二之选。</p>\n<p>在本内容中，我们将学习关于队列的常见操作，以及使用Swift语言实现这些操作，衡量这些操作的时间复杂度等。</p>\n<h2 id=\"一般性操作实现\"><a href=\"#一般性操作实现\" class=\"headerlink\" title=\"一般性操作实现\"></a>一般性操作实现</h2><p>由于队列的操作特性较多，在这里我们可以使用Swift的面向协议的编程思想进行实现，首先我们定义一个关于操作的协议，如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public protocol Queue &#123;\n    associatedtype  Element\n    mutating func enqueue(_ element: Element) -&gt; Bool\n    mutating func dequeue() -&gt; Element?\n    var isEmpty: Bool &#123; get &#125;\n    var peek: Element? &#123; get &#125;\n&#125;</code></pre>\n\n<ul>\n<li><strong>enqueue：</strong> 向队列的尾部插入一个元素，如果该操作成功，则返回true，反之返回false；</li>\n<li><strong>dequeue：</strong> 从队列的头部删除一个元素，并返回被删除的元素；</li>\n<li><strong>isEmpty：</strong> 检查队列是否为空；</li>\n<li><strong>peek：</strong> 返回队列头部的元素，和<strong>dequeue</strong>的区别在于，该操作并不删除元素。</li>\n</ul>\n<p>通过操作类型的定义可以看到，队列有两个普遍的操作，在队列的尾部插入元素和从队列的头部删除元素，而并不需要关心队列的中间元素，如果需要关心中间元素，你可能需要使用数组。</p>\n<h2 id=\"一个队列的例子\"><a href=\"#一个队列的例子\" class=\"headerlink\" title=\"一个队列的例子\"></a>一个队列的例子</h2><p>理解队列最简单的方式是通过实际的示例了解队列的工作原理。假设在影院门口，很多人在排队购买电影票：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/queue-example.png\"></p>\n<p>队伍中有Ray、Brian、Sam和Mic四人，当Ray买到了电影票后，他就会从队伍中退出，相当于调用了**dequeue()**，从队伍的头部删除了一个元素类似。</p>\n<p>此时，调用<strong>peek</strong>将返回队列中此刻的头元素Brain。</p>\n<p>如果来了一个新的人Vicki，加入到了队伍中，等待购买电影票，她站到了队伍的尾部。相当于调用了**enqueue(“Vicki”)**。</p>\n<p>这就是队列的一般性工作原理，接下来我们将使用四种不同的基础数据结构来创建队列以及队列的一般性操作。分别为：</p>\n<ul>\n<li>使用数组（Array）</li>\n<li>使用双向链表（Double LinkedList）</li>\n<li>使用环形缓冲器（Ring buffer）</li>\n<li>使用两个栈（two stacks）</li>\n</ul>\n<h2 id=\"基于Array的队列\"><a href=\"#基于Array的队列\" class=\"headerlink\" title=\"基于Array的队列\"></a>基于Array的队列</h2><p>Swift标准库中继承了大量高度优化的核心数据结构，利用这些数据结构可以构建更高级别的抽象，例如基础数据结构Array，用于存储连续的有序元素列表。在本节中，将使用Array来构建队列，并实现队列的基础操作等。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/array-queue.png\"></p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public struct QueueArray&lt;T&gt;: Queue &#123;\n    private var array: [T] &#x3D; []\n    public init() &#123;&#125;\n&#125;</code></pre>\n\n<p>这里定义了一个采用Queue协议的通用型QueueArray结构体，在Queue协议中定义的关联类型Element这里由T推断。</p>\n<p>接下来实现Queue协议中的定义等，使得QueueArray符合Queue协议。</p>\n<h3 id=\"数组检查\"><a href=\"#数组检查\" class=\"headerlink\" title=\"数组检查\"></a>数组检查</h3><p>首先添加如下两个协议属性的实现：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public var isEmpty: Bool &#123;\n    return array.isEmpty\n&#125;\n    \npublic var peek: T? &#123;\n    return array.first\n&#125;</code></pre>\n\n<p>因为这里使用的是数组，因此在实现<code>isEmpty</code>和<code>peek</code>时，均可直接使用数组的内置属性，简洁方便。其中<code>peek</code>返回的是队列的头部元素，也就是数组的第一个元素。</p>\n<p>这连个操作的时间复杂度均为**O(1)**。</p>\n<h3 id=\"入队\"><a href=\"#入队\" class=\"headerlink\" title=\"入队\"></a>入队</h3><p>入队就是将元素添加到队列的末尾。使用数组实现也非常方便，只要进行append操作即可。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public mutating func enqueue(_ element: T) -&gt; Bool &#123;\n    array.append(element)\n    return true\n&#125;</code></pre>\n\n<p>入队的操作，无论数组的大小如何，该操作的时间复杂度都是**O(1)**。这是因为在数组的末尾，存在着空白空间。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/array-queue-enqueue.png\"></p>\n<p>在上例中，当添加了<code>Mic</code>元素之后，数组还剩下两个空白空间。当添加了多个元素之后，数组的空白空间将会被填满，继续添加元素的时候，则要使用超出数组原始分配空间的空间，进而必须调整数组大小以增加空间。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/array-queue-enqueue-full.png\"></p>\n<p>在数组进行大小重新调整的时候，其时间复杂度为O(n)，数组大小重组意味着数组需要重新分配内存空间，并将原数据元素拷贝到新的数组中，因为这样的调整并不是经常性的，因此入队操作的时间复杂度仍可认为是**O(1)**。</p>\n<h3 id=\"出队\"><a href=\"#出队\" class=\"headerlink\" title=\"出队\"></a>出队</h3><p>出队操作是将队列头节点的元素移出队列，可使用数组的<strong>removeFirst</strong>操作即可。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public mutating func dequeue() -&gt; T? &#123;\n    return isEmpty ? nil : array.removeFirst()\n&#125;</code></pre>\n\n<p>如果数组为空，则出队操作后返回nil，否则返回出队的元素。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/array-queue-dequeue.png\"></p>\n<p>从队列中头部移除元素的操作属于O(n)时间复杂度，在上述方式中就是从数组中移除第一个元素。这始终是一个线性的时间度量，因为在内存中，当移除一个元素后，其他所有的元素都需要移动其位置。</p>\n<h3 id=\"调试与测试\"><a href=\"#调试与测试\" class=\"headerlink\" title=\"调试与测试\"></a>调试与测试</h3><p>对于调试目的来说，Swift中提供了专用的协议<strong>CustomStringConvertible</strong>，为了调试的方便，我们需要添加如下的代码：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">extension QueueArray: CustomDebugStringConvertible &#123;\n    public var description: String &#123;\n        return String(describing: array)\n    &#125;\n&#125;</code></pre>\n\n<p>接下来进行队列的调试，调试代码如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;Debug the Queue with Array&quot;) &#123;\n    var queue &#x3D; QueueArray&lt;String&gt;()\n    queue.enqueue(&quot;Ray&quot;)\n    queue.enqueue(&quot;Brian&quot;)\n    queue.enqueue(&quot;Eric&quot;)\n    print(queue)\n    queue.dequeue()\n    print(queue)\n    queue.dequeue()\n    print(queue.peek ?? &quot;&quot;)\n&#125;\n\n&#x2F;*\n---Example of Debug the Queue with Array---\n[&quot;Ray&quot;, &quot;Brian&quot;, &quot;Eric&quot;]\n[&quot;Brian&quot;, &quot;Eric&quot;]\nEric\n*&#x2F;</code></pre>\n\n<p>由于是使用Array来进行队列的设计，因此操作方式非常类似于Array，上述打印结果也符合队列的先进先出的原则。</p>\n<h3 id=\"优势和劣势\"><a href=\"#优势和劣势\" class=\"headerlink\" title=\"优势和劣势\"></a>优势和劣势</h3><p>上述就是基于数组的队列的一般操作的算法实现，大多数的操作都是恒定时间复杂度的，例如*dequeue()*操作，属于线性时间，内存空间也是线性的。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/array-queue-adv-disa.png\"></p>\n<p>基于数组的队列相对是简单的，也是因为数组的append操作，使得入队操作是恒定的时间复杂度O(1)。然而在实施中却有一些明显的缺点，出队的操作是从队列的头部移除元素，移除后，其他的所有元素都需要向前移动一个位置，对于队列来说影响算是非常大的。一旦队列已满，队列就必须调整其大小，调整完后，队列中很容易存在未使用的空间，随着时间的推移，未使用空间越来越多，这可能增加内存的占用率。</p>\n<h2 id=\"基于双向链表（Double-LinkedList）的队列\"><a href=\"#基于双向链表（Double-LinkedList）的队列\" class=\"headerlink\" title=\"基于双向链表（Double LinkedList）的队列\"></a>基于双向链表（Double LinkedList）的队列</h2><p>在<a href=\"https://robinchao.github.io/2019/12/04/Data-Structures-&-Algorithms-in-Swift-05.html\">\\#5\\ Swift集合协议在Linked List上的应用</a>中我们已经了解了单向链表，双向链表则是每个节点不仅包含指向下一个节点的指针，还包含指向上一个节点的指针。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public class LinkedListNode&lt;T&gt; &#123;\n    var value: T\n    var next: LinkedListNode? &#x2F;&#x2F; 指向下一个节点。尾节点为nil\n    weak var previous: LinkedListNode? &#x2F;&#x2F; 指向上一个节点。头节点为nil\n        \n    public init(value: T) &#123;\n        self.value &#x3D; value\n    &#125;\n&#125;</code></pre>\n\n<p>利用双向链表实现队列如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public class QueueLinkedList&lt;T&gt;: Queue &#123;\n    private var list &#x3D; DoublyLinkedList&lt;T&gt;()\n    public init() &#123;&#125;\n    \n    public func enqueue(_ element: T) -&gt; Bool &#123;\n        list.append(element)\n        return true\n    &#125;\n    \n    public func dequeue() -&gt; T? &#123;\n        guard !list.isEmpty, let _ &#x3D; list.first else &#123;\n            return nil\n        &#125;\n        return list.remove(at: 0)\n    &#125;\n    \n    public var peek: T? &#123;\n        return list.head?.value\n    &#125;\n    \n    public var isEmpty: Bool &#123;\n        return list.isEmpty\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"入队操作\"><a href=\"#入队操作\" class=\"headerlink\" title=\"入队操作\"></a>入队操作</h3><p>由于链表中实现了能够直接添加元素到链表尾部的操作，因此入队操作相当于链表的追加操作。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public func enqueue(_ element: T) -&gt; Bool &#123;\n    list.append(element)\n    return true\n&#125;</code></pre>\n\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/double-linkedlist-enqueue.png\"></p>\n<p>基于双向链表的队列入队时，其内部需要转换节点的两个指针的指向，上一个节点中指向下一个节点的指针指向该新节点，该新节点的上一个节点指向上一个节点。同时tail节点的上一个节点指针也需要更新。</p>\n<h3 id=\"出队操作\"><a href=\"#出队操作\" class=\"headerlink\" title=\"出队操作\"></a>出队操作</h3><p>出队列操作前，需要检查队列是否为空队列，如果是空队列的时候，直接返回nil，否则移除链表中索引为0的元素即可。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public func dequeue() -&gt; T? &#123;\n    guard !list.isEmpty, let _ &#x3D; list.first else &#123;\n        return nil\n    &#125;\n    return list.remove(at: 0)\n&#125;</code></pre>\n\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/double-linkedlist-dequeue.png\"></p>\n<p>出队需要更新head节点的指针指向，将head的next指针的指向原来队列的第二个节点即可。</p>\n<h3 id=\"调试与测试-1\"><a href=\"#调试与测试-1\" class=\"headerlink\" title=\"调试与测试\"></a>调试与测试</h3><p>同样调试模式下，我们实现<strong>CustomStringConvertible</strong>协议。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">extension QueueLinkedList: CustomStringConvertible &#123;\n    public var description: String &#123;\n        return String(describing: list)\n    &#125;\n&#125;</code></pre>\n\n<p>在测试程序中实现和基于数组的队列相同的逻辑。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;Debug the Queue with Doubly Linkedlist&quot;) &#123;\n    let queue &#x3D; QueueLinkedList&lt;String&gt;()\n    queue.enqueue(&quot;Ray&quot;)\n    queue.enqueue(&quot;Brian&quot;)\n    queue.enqueue(&quot;Eric&quot;)\n    print(queue)\n    queue.dequeue()\n    print(queue)\n    queue.dequeue()\n    print(queue.peek ?? &quot;&quot;)\n&#125;\n\n&#x2F;*\n---Example of Debug the Queue with Doubly Linkedlist---\n[Ray, Brian, Eric]\n[Brian, Eric]\nEric\n*&#x2F;</code></pre>\n\n<h3 id=\"优势和劣势-1\"><a href=\"#优势和劣势-1\" class=\"headerlink\" title=\"优势和劣势\"></a>优势和劣势</h3><p>基于双向链接的队列，各个操作的最佳时间复杂度和最差时间复杂度如下图所示：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/double-linkedlist-queue-adv-disa.png\"></p>\n<p>基于数组的队列在出队操作上是一个线性的操作，使用链表的队列，出队操作简化为了恒定时间复杂，每次出队操作只需要更新节点的上一个和下一个指针即可。</p>\n<p>从上表中可以看出，基于链表的队列的弱点并不明显，但是O(1)的时间复杂度却只是表面性能，操作在执行的时候，需要很高的内存开销，每个元素的操作都必须有额外的空间以供前向指针和后向指针引用，此外，每次创建新元素都需要进行昂贵的内存动态分配，相比之下，基于数组的队列进行的是批量的内存分配，速度更快。</p>\n<h2 id=\"基于环形缓冲器的队列\"><a href=\"#基于环形缓冲器的队列\" class=\"headerlink\" title=\"基于环形缓冲器的队列\"></a>基于环形缓冲器的队列</h2><p>环形缓冲区也称为循环缓冲区，是一个固定大小的数组，当数组末尾没有要删除的元素时，环形缓冲区会从策略绕到数组开头。那么环形缓冲区是如何实现队列的操作的呢？</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/ring-buffer-queue-1.png\"></p>\n<p>首先创建一个固定大小为4的缓冲区，在该缓冲区中同时含有两个指针，分别追踪不同的事情：</p>\n<ul>\n<li><strong>read</strong>指针追踪队列的头部</li>\n<li><strong>write</strong>指针追踪下一个可写的空间指针，这样就能够重写已读过的元素了。</li>\n</ul>\n<p>进行入队操作，如：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/ring-buffer-queue-enqueue.png\"></p>\n<p>每次添加一个元素到队列的时候，<strong>write</strong>指针加一。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/ring-buffer-queue-enqueue-2.png\"></p>\n<p>上图中，<strong>write</strong>指针又移动了两个位置，而且其位置位于<strong>read</strong>指针的前面，也意味着队列是非空队列。</p>\n<p>接下来，进行两次出队的操作：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/ring-buffer-queue-dequeue.png\"></p>\n<p>出队操作的是<strong>read</strong>指针，read指针向后移动，指向第三个元素的位置即可。接下来在进行入队操作，将队列填充满：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/ring-buffer-queue-enqueue-full.png\"></p>\n<p>当<strong>write</strong>指针到达队列的末尾是，环形缓冲区会重新转换该指针到队列的开始位置。</p>\n<p>最后，在出队两个队列中的元素：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/ring-buffer-queue-dequeue-2.png\"></p>\n<p>此时<strong>read</strong>指针也指向了队列的开始位置。最后一次出队操作后，read指针和write指针都指向了队列的开始位置，这也意味着队列中已经无元素了，为空的队列。</p>\n<p>上述就是RingBuffer的基本数据结构和工作原理，接下来进行数据结构的实现和基本操作的实现。</p>\n<p>首先定义所需的变量，包括了数据存储的结构，这里使用Array即可，还有两个基本的指针read和write，为了方便对数据进行检验，增加辅助检查可写空间大小和可读空间大小的变量，以及是否为空和是否已满的变量：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public struct RingBuffer&lt;T&gt; &#123;\n    public var array: [T?]\n    public var readIndex &#x3D; 0\n    public var writeIndex &#x3D; 0\n    \n    public init(count: Int) &#123;\n        array &#x3D; [T?](repeating: nil, count: count)\n    &#125;\n    \n    public var availableSpaceForReading: Int &#123;\n      return writeIndex - readIndex\n    &#125;\n\n    public var isEmpty: Bool &#123;\n      return availableSpaceForReading &#x3D;&#x3D; 0\n    &#125;\n\n    public var availableSpaceForWriting: Int &#123;\n      return array.count - availableSpaceForReading\n    &#125;\n\n    public var isFull: Bool &#123;\n      return availableSpaceForWriting &#x3D;&#x3D; 0\n    &#125;\n&#125;</code></pre>\n\n<p>由于RingBuffer是固定大小的数据结构，因此在可读可写空间判断的时候，直接使用减法的方式即可获取到可用空间大小。接下来就是基本的read操作和write操作的实现，在实现这两个操作时需要检查缓存区是否已满和是否为空：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">@discardableResult\npublic mutating func write(_ element: T) -&gt; Bool &#123;\n    guard !isFull else &#123; return false &#125;\n    defer &#123;\n        writeIndex +&#x3D; 1\n    &#125;\n    array[wrapped: writeIndex] &#x3D; element\n    return true\n&#125;\n\npublic mutating func read() -&gt; T? &#123;\n    guard !isEmpty  else &#123; return nil &#125;\n    defer &#123;\n        array[wrapped: readIndex] &#x3D; nil\n        readIndex +&#x3D; 1\n    &#125;\n    return array[wrapped: readIndex]\n&#125;</code></pre>\n\n<p>另外在操作中使用了Array的subscript操作属性，但是原始的subscript并不符合RingBuffer的定义，因此还需要重写subscript操作如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">private extension Array &#123;\n    subscript (wrapped index: Int) -&gt; Element &#123;\n        get &#123;\n            return self[index % count]\n        &#125;\n        set &#123;\n            self[index % count] &#x3D; newValue\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>另由于RingBuffer还应该支持序列的可遍历迭代操作，因此定义RingBuffer的Iterator操作：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">extension RingBuffer: Sequence &#123;\n    public func makeIterator() -&gt; AnyIterator&lt;T&gt; &#123;\n        var index &#x3D; readIndex\n        return AnyIterator &#123;\n            guard index &lt; self.writeIndex else &#123; return nil &#125;\n            defer &#123;\n                index +&#x3D; 1\n            &#125;\n            return self.array[wrapped: index]\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>完成了RingBuffer的定义之后，就可以实现基于RingBuffer的队列定义和实现了。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public struct QueueRingBuffer&lt;T&gt;: Queue &#123;\n    \n    private var ringBuffer: RingBuffer&lt;T&gt;\n    \n    public init(count: Int) &#123;\n        ringBuffer &#x3D; RingBuffer&lt;T&gt;(count: count)\n    &#125;\n    \n    public var isEmpty: Bool &#123;\n        return ringBuffer.isEmpty\n    &#125;\n    \n    public var peek: T? &#123;\n        return ringBuffer.first as? T\n    &#125;\n    \n    \n    public mutating func enqueue(_ element: T) -&gt; Bool &#123;\n        return ringBuffer.write(element)\n    &#125;\n    \n    public mutating func dequeue() -&gt; T? &#123;\n        return isEmpty ? nil : ringBuffer.read()\n    &#125;\n&#125;</code></pre>\n\n<p>队列的定义都大同小异，同样对QueueRingBuffer进行测试如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;Debug the Queue with RingBuffer&quot;) &#123;\n    var queue &#x3D; QueueRingBuffer&lt;String&gt;(count: 10)\n    queue.enqueue(&quot;Ray&quot;)\n    queue.enqueue(&quot;Brian&quot;)\n    queue.enqueue(&quot;Eric&quot;)\n    print(queue)\n    queue.dequeue()\n    print(queue)\n    queue.dequeue()\n    print(queue.peek ?? &quot;&quot;)\n&#125;\n\n&#x2F;*\n---Example of Debug the Queue with RingBuffer---\nRingBuffer&lt;String&gt;(array: [Optional(&quot;Ray&quot;), Optional(&quot;Brian&quot;), Optional(&quot;Eric&quot;), nil, nil, nil, nil, nil, nil, nil], readIndex: 0, writeIndex: 3)\nRingBuffer&lt;String&gt;(array: [nil, Optional(&quot;Brian&quot;), Optional(&quot;Eric&quot;), nil, nil, nil, nil, nil, nil, nil], readIndex: 1, writeIndex: 3)\n*&#x2F;</code></pre>\n\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/ring-buffer-adc-disa.png\"></p>\n<p>基于环形缓冲区的队列具有相同的时间复杂性，和链表的入队和出队类似。唯一的区别是空间复杂度。环形缓冲区的大小是固定的，这意味着排队可能会失败。</p>\n<p>到目前为止，您已经看到了三种实现：简单数组、双链表和环形缓冲区。</p>\n<p>尽管它们看起来非常有用，但接下来您将看到使用两个栈实现的队列。您将看到它的空间位置如何远远优于链接列表。它也不需要像环形缓冲区那样的固定大小。</p>\n<h2 id=\"基于双栈的队列\"><a href=\"#基于双栈的队列\" class=\"headerlink\" title=\"基于双栈的队列\"></a>基于双栈的队列</h2><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public struct QueueStack&lt;T&gt;: Queue &#123;\n    private var leftStack: [T] &#x3D; []\n    private var rightStack: [T] &#x3D; []\n    public init() &#123;&#125;\n&#125;</code></pre>\n\n<p>双栈的思路其实很简单，无论何时加入元素都是讲元素添加到rightStack。当需要进行出队操作时，反转rightStack并将元素加入到leftStack中，然后在leftStack中即可使用FIFO原则进行出队操作了。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/double-stack-queue.png\"></p>\n<p>根据上图双栈的工作原理，实现队列的基本操作：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">public var isEmpty: Bool &#123;\n    return leftStack.isEmpty &amp;&amp; rightStack.isEmpty\n&#125;\n\npublic var peek: T?&#123;\n    return !leftStack.isEmpty ? leftStack.last : rightStack.first\n&#125;\n\npublic mutating func enqueue(_ element: T) -&gt; Bool &#123;\n    rightStack.append(element)\n    return true\n&#125;\n\npublic mutating func dequeue() -&gt; T? &#123;\n    if leftStack.isEmpty &#123;\n        leftStack &#x3D; rightStack.reversed()\n        rightStack.removeAll()\n    &#125;\n    return leftStack.popLast()\n&#125;</code></pre>\n\n<p><strong>入队操作</strong></p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/double-stack-queue-enqueue.png\"></p>\n<p><strong>出队操作</strong></p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/double-stack-queue-dequeue.png\"></p>\n<p>测试代码如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;Debug the Queue with Double Stack&quot;) &#123;\n    var queue &#x3D; QueueStack&lt;String&gt;()\n    queue.enqueue(&quot;Ray&quot;)\n    queue.enqueue(&quot;Brian&quot;)\n    queue.enqueue(&quot;Eric&quot;)\n    print(queue)\n    queue.dequeue()\n    print(queue)\n    queue.dequeue()\n    print(queue.peek ?? &quot;&quot;)\n&#125;\n\n&#x2F;*\n---Example of Debug the Queue with Double Stack---\n[&quot;Ray&quot;, &quot;Brian&quot;, &quot;Eric&quot;]\n[&quot;Brian&quot;, &quot;Eric&quot;]\nEric\n*&#x2F;</code></pre>\n\n<h3 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/double-stack-adv-disa.png\"></p>\n<p>与基于数组的实现相比，通过利用两个堆栈，您可以将出队操作转换为分步的O(1)操作。</p>\n<p>此外，两个栈实现是完全动态的，并且没有基于环形缓冲区的队列所具有的固定大小限制。</p>\n<p>最后，它在空间位置方面胜过了链表。这是因为数组元素在内存块中彼此相邻。因此，在第一次访问时，大量元素将加载到缓存中。</p>\n<p><strong>基于双栈的队列</strong></p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/queue-double-stack.png\"></p>\n<p><strong>基于链表的队列</strong></p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/8/queue-linked-list.png\"></p>\n<h2 id=\"关键点总结\"><a href=\"#关键点总结\" class=\"headerlink\" title=\"关键点总结\"></a>关键点总结</h2><ul>\n<li>队列是一个FIFO的结构；</li>\n<li>入队操作必须在队列的末尾；</li>\n<li>出队操作必须在队列的开端；</li>\n<li>数组中的元素在内存中是连续的，链表是分散的，并且链表的内存存储方式可能导致缓存未命中；</li>\n<li>基于环形缓冲区的队列适用于固定大小的队列结构；</li>\n<li>相比其他的数据结构，双栈结构的队列能够将出栈操作分散为O(1)的时间复杂度；</li>\n<li>双栈的操作在空间复杂度上由于链表结构。</li>\n</ul>\n","text":"在生活中，人人都熟悉排队等待。无论你是在排队购买喜欢的电影的电影票，还是排队等待打印一份文件等等，这些都是队列（Queue）数据结构。在上文\\#7\\ Stack &amp; Stack Simple Challenges中已经提到过队列和栈属于基本的数据结构类型，但是其在应用层面...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E8%88%AC%E6%80%A7%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">一般性操作实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">一个队列的例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EArray%E7%9A%84%E9%98%9F%E5%88%97\"><span class=\"toc-text\">基于Array的队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">数组检查</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A5%E9%98%9F\"><span class=\"toc-text\">入队</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BA%E9%98%9F\"><span class=\"toc-text\">出队</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95%E4%B8%8E%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">调试与测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8A%BF%E5%92%8C%E5%8A%A3%E5%8A%BF\"><span class=\"toc-text\">优势和劣势</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%88Double-LinkedList%EF%BC%89%E7%9A%84%E9%98%9F%E5%88%97\"><span class=\"toc-text\">基于双向链表（Double LinkedList）的队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A5%E9%98%9F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">入队操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BA%E9%98%9F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">出队操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95%E4%B8%8E%E6%B5%8B%E8%AF%95-1\"><span class=\"toc-text\">调试与测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8A%BF%E5%92%8C%E5%8A%A3%E5%8A%BF-1\"><span class=\"toc-text\">优势和劣势</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E7%8E%AF%E5%BD%A2%E7%BC%93%E5%86%B2%E5%99%A8%E7%9A%84%E9%98%9F%E5%88%97\"><span class=\"toc-text\">基于环形缓冲器的队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E5%8F%8C%E6%A0%88%E7%9A%84%E9%98%9F%E5%88%97\"><span class=\"toc-text\">基于双栈的队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9-1\"><span class=\"toc-text\">优缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E7%82%B9%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">关键点总结</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"\\#7\\ Stack & Stack Simple Challenges","uid":"d2a03c6015acad9ab2a35a4a08b03676","slug":"2019-12-08-Data-Structures-&-Algorithms-in-Swift-07","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2019-12-08-Data-Structures-&-Algorithms-in-Swift-07.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/7/cover.jpeg","text":"栈（Stack）是一个常见的基础类型数据结构，在生活中经常也能看到栈的身影，例如一本书、一叠现金等等。栈的数据结构在概念上和对象的物理存储栈相同。再向栈添加元素时，需要将其放在栈顶，通俗称压栈，而从站内删除元素时，始终删除的是栈顶的元素，又称为出栈，而这种进栈和出栈的特性使得栈属...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"\\#9\\ 一般树与树节点遍历","uid":"ad7db3b90885866da085b02a06020b3f","slug":"2019-12-23-Data-Structures-&-Algorithms-in-Swift-09","date":"2023-05-13T11:36:09.799Z","updated":"2023-05-13T11:36:09.799Z","comments":true,"path":"api/articles/2019-12-23-Data-Structures-&-Algorithms-in-Swift-09.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/9/cover.png","text":"在计算机编程的世界中，树是一种非常重要的数据结构。树用于解决很多计算机编程世界的挑战，例如： 等级关系的描述 分类数据的管理 分类查找操作 在计算机算法中，树有很多种，每一种都有其特有的形状和大小。在本文中将学习关于树的基础知识，以及使用Swfit编程语言实现树结构等。 术语关于...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}