{"title":"《实现模式》读书小记","uid":"e82075038d4d045b9b352d5ca62ff95f","slug":"2022-05-01-iOS-implementation-patterns-tips","date":"2023-05-18T03:03:50.454Z","updated":"2023-05-18T03:03:50.454Z","comments":true,"path":"api/articles/2022-05-01-iOS-implementation-patterns-tips.json","keywords":null,"cover":"/images/cover/2022-05-01-iOS-implementation-patterns-tips.jpg","content":"<p>《实现模式》一书作者Kent Beck，软件开发方法学的泰山北斗，是最早研究软件开发模式和重构方法论的先导者之一，是敏捷开发的开创者之一，更是极限编程和测试驱动开发的创始人。该书是一本关于如何撰写代码的书。本书中的模式，是基于 Kent 对现存代码的阅读以及他自己的编程习惯而形成的。这些模式来自他早年使用 Smalltalk 模式通过代码与其他开发人员进行沟通的过程。它们的级别相对设计模式较低，与 Larman 提出的 GRASP 模式处于同一粒度。本书中的模式试图为如何撰写大家都能看得懂的代码提供一个清晰明确的视角，并告诉你这些代码如何为人的需要和降低成本的需求提供保障。</p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p><strong>编程中很多决策是无法复制的，但是当决策的内容越接近技术化，其中的相似性也越多。</strong></p>\n<p>大多数的程序都遵循一组简单的法则：</p>\n<ul>\n<li>更多的时候，程序是在被阅读，而不是被编写；</li>\n<li>在软件编码中，无绝对的“完成”一说，修改程序的投入可能会远远大于最初编写程序的投入；</li>\n<li>程序是由一组基本的语句和控制流概念组合而成的；</li>\n<li>程序的阅读者需要理解程序 — 既从细节上，也从概念上。有时从细节开始，逐渐理解概念，有时从概念开始，逐渐理解细节。</li>\n</ul>\n<p>模式则是基于上述共性的法则而衍生的。而这些法则在编写程序的时候，则悄无声息的转变为编写者的压力（force），影响着每个程序的编写方式，因此模式的本质其实是<strong>压力（force）</strong>的模式。 </p>\n<span id=\"more\"></span>\n\n<h2 id=\"一种编程理论\"><a href=\"#一种编程理论\" class=\"headerlink\" title=\"一种编程理论\"></a>一种编程理论</h2><p>在现实生活中，哪怕在巨细靡遗的模式列表，也不可能涵盖编程中所遇到的每一种情况，你避免不了（甚至经常）会遇到上穷碧落，也找不到对应现成解决方案的情况。每一种模式都承载着一点点理论，但实际编程中存在一些更加深广的影响力，是孤立的模式所不能概括的。而<code>价值观</code>、<code>原则</code>、<code>模式</code>这三种元素组成的开发方式，相对比较稳定，更能契合大多数的解决方案。</p>\n<p>贯穿于编程中的横切概念：<strong>价值观和原则</strong>。</p>\n<ul>\n<li><strong>价值观：</strong> 是编程过程中的统一支配性主题。<strong>沟通、简单和灵活</strong></li>\n<li><strong>原则：</strong> 在价值观和模式之间搭建桥梁。<strong>编程原则可以演变出解决问题的方案等</strong></li>\n</ul>\n<p><strong>模式表述要什么，价值观提供了动机，原则把动机转化成了实际行动。</strong></p>\n<h3 id=\"价值观\"><a href=\"#价值观\" class=\"headerlink\" title=\"价值观\"></a>价值观</h3><p>有三种与价值观血脉相连的价值观，分别是：<code>沟通</code>、<code>简单</code>和<code>灵活</code>。看似有些互相矛盾，但是更多的时候却相得益彰，优秀的程序往往会为未来的扩展留下充分的选择余地，不包含不相关的元素，容易理解，便于阅读。</p>\n<h4 id=\"沟通\"><a href=\"#沟通\" class=\"headerlink\" title=\"沟通\"></a>沟通</h4><p>如果说人类的语言是为了加强联系，那么程序的阅读难易程度便是人类与程序世界沟通的桥梁。一份更加干净易读的程序，会更加高效清晰的表达编写者的想法，减轻阅读者的压力。那些把别人当做空气一样的编程方式，使得程序以及编写者慢慢退去颜色，就算耗尽心力搭建的城堡，也会无人问津。</p>\n<p><strong>程序应该读起来想读一本书，需要有情节和韵律，句子间应该有优雅的笑笑跌宕起伏。 — Knuth</strong></p>\n<p>在软件的生命周期内，第一次的部署决定着软件的绝大部分成本，对既有代码的阅读要比编写全新的代码耗时更长。因此注重代码的沟通力可以帮助我们改进思想，一方面投入更多的思考，阅读的同时调用脑细胞思考原有逻辑以及编写者是怎么想的；另一方面则是由于压力的减轻，因为在改变既有代码或者按照合适的方式编写代码的时候，自己知道是在务正业，做的是对的，自我认可感强。</p>\n<h4 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h4><p>在代码中，有复杂的，有简单的，而却出复杂性可以让阅读者、使用者以及后来修改代码的人更加理解，避免陷入猜想（猜想是代码修改者最痛恨，也最难受的）。但是在软件开发中，有些复杂性是难以避免的，这些复杂性反映出所要解决的问题的复杂性。但是有些复杂性的产生时因为我们忙着让程序运行起来，这种多余的复杂性降低了软件的价值，正确运行的可能性也降低了，在未来的改动中，改正确的成功率也降低了，回顾自己做过的事情，<strong>把麦子和糠分开，是编程不可或缺的一部分</strong>。</p>\n<p>秉承<strong>在各个层次上都应该要求简单。对代码进行调整，删除所有不提供信息的代码。设计中不出现无关元素。对需求提出质疑，找出最本质的概念。去掉多余的复杂性后，就好像有一束光照亮余下的代码，你就有机会用全新的视角来处理它们。</strong></p>\n<h4 id=\"灵活\"><a href=\"#灵活\" class=\"headerlink\" title=\"灵活\"></a>灵活</h4><p>在三种价值观中，灵活是衡量那些低效编码与设计实践的一把标尺。例如常量不应该使用环境变量去定义等等，程序是灵活的，但只有在发生变化的时候才可能真实需要某些设计。</p>\n<p>灵活性的提高可能以复杂性的提高为代价。例如给用户提供一个自定义配置的选择，以提高灵活性，但是因为多了一个配置文件，编程时就要考虑这一点，所以也就变得复杂了。然而简单也可以促进灵活，例如如果可以找到取消配置选项但又不丧失价值的方式，那么程序的后续改动就更加简单了。</p>\n<p>增进软件的沟通效果同样会提高灵活性，能够快速阅读、理解和修改你代码的人越多，它将来发生变化的选择就越多，即软件的灵活度也就提升了。</p>\n<h3 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h3><p>原则是另一个层次上的通用思想，比价值观更贴近与编程实际，同时又是模式的基础。原则可以解释模式背后的动机，它是有普遍意义的。</p>\n<p>在对立模式间进行选择时，最好的方式就是用原则来说话，而不是让模式去争宠。</p>\n<p>例如在学习新的编程语言，不必盲目的模仿现有的编程方式，更不用拘泥于其他语言中形成的习惯，可以根据自己对原则的理解快速去学习，即使在新鲜局面下仍能一以贯之。</p>\n<h4 id=\"局部化影响\"><a href=\"#局部化影响\" class=\"headerlink\" title=\"局部化影响\"></a>局部化影响</h4><p><strong>在组织代码结构时，要保证变化只会产生局部化影响。</strong> </p>\n<p>把修改的影响范围缩小到最小，代码就会有极佳的沟通效果，可被逐步理解，而不用一开始鸟瞰全景。</p>\n<p>在实现模式的背后，最主要的动机就是减少变化所引起的代价，所以局部化影响这条原则也是很多模式的形成缘由之一。</p>\n<h4 id=\"最小化重复\"><a href=\"#最小化重复\" class=\"headerlink\" title=\"最小化重复\"></a>最小化重复</h4><p><strong>最小化重复有助于保证局部化影响。</strong>   </p>\n<p>复制代码只是重复的一种形势，并行的类层次结构也是其一，同样破坏了局部化影响。如果出现修改一处概念需要同时修改两个或更多的类层级结构，就代表变化的影响已经扩散了，此时应该及时止损，停止一味地修改，而去重新组织代码，让变化只对局部产生影响。</p>\n<p>重复往往不易被预见到，又是在出现很长时间后才会被察觉，重复不是错误也不是罪过，只是增加了变化的开销，提高了各类成本等。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>重复解决：拆分程序为更小的单元 —- 小段语句、小段方法、小型对象和小型包等，从而慢慢消除重复。 大段逻辑很容易与其他大段逻辑出现重复的代码片段，于是就有了模式诞生的可能。</p></blockquote>\n<h4 id=\"将逻辑和数据捆绑\"><a href=\"#将逻辑和数据捆绑\" class=\"headerlink\" title=\"将逻辑和数据捆绑\"></a>将逻辑和数据捆绑</h4><p><strong>局部化影响的必然结果就是将逻辑与数据捆绑。</strong> 把逻辑与逻辑所处理的数据放在一起，如果有可能放在一个方法中，或者放到一个对象中，最次放在一个包下，如果发生了变化，逻辑和数据很可能会同事被改动，如果放在一起，那么修改它们所造成的影响就会只停留在局部。</p>\n<p>但是在一开始编程前，可能意识不到逻辑和数据的依赖，慢慢的演进中，发现此依赖彼，彼依赖其他的问题，此时就要考虑改如果组织代码结构，或者使用辅助类来解决依赖等。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>未完待续</p></blockquote>\n<h4 id=\"对称性\"><a href=\"#对称性\" class=\"headerlink\" title=\"对称性\"></a>对称性</h4><h4 id=\"声明式表达\"><a href=\"#声明式表达\" class=\"headerlink\" title=\"声明式表达\"></a>声明式表达</h4><h4 id=\"变化率\"><a href=\"#变化率\" class=\"headerlink\" title=\"变化率\"></a>变化率</h4><h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><h2 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h2><h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><h2 id=\"改进框架\"><a href=\"#改进框架\" class=\"headerlink\" title=\"改进框架\"></a>改进框架</h2><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>","text":"《实现模式》一书作者Kent Beck，软件开发方法学的泰山北斗，是最早研究软件开发模式和重构方法论的先导者之一，是敏捷开发的开创者之一，更是极限编程和测试驱动开发的创始人。该书是一本关于如何撰写代码的书。本书中的模式，是基于 Kent 对现存代码的阅读以及他自己的编程习惯而形成...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"读书小记","slug":"读书小记","count":2,"path":"api/categories/读书小记.json"}],"tags":[{"name":"读书小记","slug":"读书小记","count":2,"path":"api/tags/读书小记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%A7%8D%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA\"><span class=\"toc-text\">一种编程理论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%B7%E5%80%BC%E8%A7%82\"><span class=\"toc-text\">价值观</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B2%9F%E9%80%9A\"><span class=\"toc-text\">沟通</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95\"><span class=\"toc-text\">简单</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%81%B5%E6%B4%BB\"><span class=\"toc-text\">灵活</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">原则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8C%96%E5%BD%B1%E5%93%8D\"><span class=\"toc-text\">局部化影响</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%B0%8F%E5%8C%96%E9%87%8D%E5%A4%8D\"><span class=\"toc-text\">最小化重复</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%86%E9%80%BB%E8%BE%91%E5%92%8C%E6%95%B0%E6%8D%AE%E6%8D%86%E7%BB%91\"><span class=\"toc-text\">将逻辑和数据捆绑</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%A7%B0%E6%80%A7\"><span class=\"toc-text\">对称性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%BC%8F%E8%A1%A8%E8%BE%BE\"><span class=\"toc-text\">声明式表达</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E5%8C%96%E7%8E%87\"><span class=\"toc-text\">变化率</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%9C%BA\"><span class=\"toc-text\">动机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB\"><span class=\"toc-text\">类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">状态</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">行为</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%B9%E8%BF%9B%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">改进框架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"Runtime剖析05 --- 再议iOS内存管理","uid":"e756f728cc576c6fe02245695ebbf9dd","slug":"2020-07-13-iOS-memory-manager","date":"2023-05-18T03:03:50.454Z","updated":"2023-05-18T03:03:50.454Z","comments":true,"path":"api/articles/2020-07-13-iOS-memory-manager.json","keywords":null,"cover":[],"text":"我们都知道，iOS中进行内存管理的管理模型是引用计数，但是这属于上层应用的范畴，在系统底层，iOS会根据不同的数据结构或者不同的数据类型，进行系统内存的分区，在不同的分区中，管理着自己的内存，另外，iOS的内存管理并不直接管理硬件内存，而是管理着硬件内存之上的一个过渡内存—虚拟内...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"Runtime","slug":"Runtime","count":5,"path":"api/tags/Runtime.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"基于MFCC的语音数据特征提取概述","uid":"c98e5d32ae2d193866c4e1eb0feb55b3","slug":"2018-07-24-speech-recognation-mfcc","date":"2023-05-18T03:03:50.450Z","updated":"2023-05-18T03:03:50.450Z","comments":true,"path":"api/articles/2018-07-24-speech-recognation-mfcc.json","keywords":null,"cover":"/images/speech-recognition/audio_draw.png","text":"1. 概述语音是人类之间沟通交流的最直接也是最快捷方便的一种手段，而实现人类与计算机之间畅通无阻的语音交流，一直是人类追求的一个梦想。 伴随着移动智能设备的普及，各家移动设备的厂家也开始在自家的设备上集成了语音识别系统，像Apple Siri、Microsoft Cortana、...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":10,"path":"api/categories/机器学习.json"}],"tags":[{"name":"机器学习 MFCC","slug":"机器学习-MFCC","count":1,"path":"api/tags/机器学习-MFCC.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}