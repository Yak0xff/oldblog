{"title":"使用 SwiftUI 构建大型应用程序---模块化架构指南【译】","uid":"07d3abf92c8398cc87ec4baa82641a83","slug":"2023-05-13-build-large-scale-apps-swiftui","date":"2023-05-19T09:57:19.845Z","updated":"2023-05-19T09:57:19.845Z","comments":true,"path":"api/articles/2023-05-13-build-large-scale-apps-swiftui.json","keywords":null,"cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/fotis-fotopoulos-SyvsTmuuZyM-unsplash.jpg","content":"<p>软件架构始终是一个热门争论的话题，特别是当有这么多不同的选择时。在过去的 8-12 个月里，作者一直在尝试使用 MV 模式来构建客户端&#x2F;服务器应用程序，并在作者最初的文章中写到了这一点 <a href=\"https://azamsharp.com/2022/10/06/practical-mv-pattern-crud.html\">SwiftUI 架构 - MV 模式方法的完整指南</a>。在本文中，作者将讨论如何将 MV 模式应用于构建大型客户端&#x2F;服务器应用程序。从SwiftUI本身的设计模式触发，探索SwiftUI在大型应用程序中如何使用MV模式来构建，以及其合理性等，很值得一读。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>架构与模式的选择取决于要构建的应用程序的类型。没有哪一种架构适用于所有的项目方案。选择合适你应用程序需求的，才是最佳的架构。</p></blockquote>\n<p>本文大纲：</p>\n<ul>\n<li>模块化架构</li>\n<li>理解MV模式</li>\n<li>屏幕与视图</li>\n<li>多个聚合模型</li>\n<li>视图的特定逻辑</li>\n<li>验证</li>\n<li>路由</li>\n<li>分组视图与事件</li>\n<li>测试</li>\n</ul>\n<h2 id=\"模块化架构\"><a href=\"#模块化架构\" class=\"headerlink\" title=\"模块化架构\"></a>模块化架构</h2><p>软件中的模块化架构是指将软件系统设计和组织成小型、自包含的模块或组件。这些模块可以独立地进行测试和维护。每个模块都有一个特定的目的，解决一个特定的业务需求。</p>\n<p>模块化架构在处理由多个团队组成的大型项目时也具有优势。每个团队都可以处理特定的模块，而不会相互干扰。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果您正在处理将由其他团队使用或使用的模块，请确保您正在与他们通信，而不是完全孤立地创建模块。软件开发中存在许多问题仅仅是因为团队之间缺乏沟通。</p></blockquote>\n<p>模块化可以通过几种不同的方式实现。您可以将每个模块公开为包 （SPM），该包可以导入到不同的应用程序中。模块化也可以通过基于特定的分组或文件夹结构来构建应用来实现。请记住，在使用文件夹进行模块化时，您必须特别注意关注点分离和单一责任原则。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文的重点不是 Swift 包管理器，而是如何通过基于应用程序的边界上下文中断应用程序来实现模块化。<strong>Swift Package Manager 可用于将这些依赖项打包到可重用的模块中。</strong></p></blockquote>\n<h2 id=\"理解MV模式\"><a href=\"#理解MV模式\" class=\"headerlink\" title=\"理解MV模式\"></a>理解MV模式</h2><p>MV 模式背后的主要思想是允许视图直接与模型对话。这消除了为每个视图创建不必要的视图模型的需要，这只会增加项目的大小，但不提供任何其他好处。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>MV 模式不主张将所有逻辑都放在视图中。该特定模式称为 <a href=\"https://www.patterns.dev/posts/presentational-container-pattern/\">容器模式</a> .我也在我的博客上谈到过它。你可以在<a href=\"https://azamsharp.com/2023/01/24/introduction-to-container-pattern.html\">这里</a>阅读它。</p></blockquote>\n<p>关于 SwiftUI 最令人困惑的事情之一是视图。我不怪你，我认为它们不应该被称为观点。它们应该被称为Widgets（Flutter）或Components（React）。SwiftUI 中的视图与传统的 UIKit 视图不同。它们只是您想要在屏幕上显示的内容的声明。</p>\n<p>SwiftUI 中的视图让我想起了 ReactJS JSX 语法。让我们看一个非常小的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function App() &#123;\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Hello World&lt;&#x2F;h1&gt;\n            &lt;button&gt;Save&lt;&#x2F;button&gt;\n        &lt;&#x2F;div&gt;\n    )\n&#125;</code></pre>\n\n<p>在上面的 ReactJS 代码中，我们创建了一个名为 <code>App</code> 的功能组件。App 组件返回一个包含 <code>&lt;h1&gt;</code> 和 <code>&lt;button&gt;</code> 的 <code>&lt;div&gt;</code> 元素。这里要注意的是，这些不是实际的HTML元素。这些是由 React 框架管理的虚拟 DOM（文档对象模型）元素。主要原因是 React 需要跟踪这些元素的更改，因此它只能渲染已更改的内容。一旦 React 使用差异过程找到更改的元素，这些虚拟 DOM 元素就会用于在屏幕上渲染真实的 HTML 元素。</p>\n<p>我相信 SwiftUI 在内部使用相同的概念。body 属性中的视图不是实际视图，而是视图的声明。最终，这些视图被转换为真实视图，然后显示在屏幕上。John Sundell 在他的文章 <a href=\"https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers/\">SwiftUI 视图与修饰符</a>中也谈到了这一点。</p>\n<p>如果您有兴趣了解有关虚拟DOM概念的更多信息，请查看此演讲标题 <a href=\"https://youtu.be/GW0rj4sNH2w?t=301\">Tom Occhino and Jordan Walke：Facebook上的JS应用程序</a>。这是Facebook向公众介绍ReactJS的演讲。</p>\n<p>苹果在SwiftUI官方文档页面上发布的文章<a href=\"https://developer.apple.com/documentation/swiftui/model-data\">模型数据</a>中也谈到了这一点。</p>\n<p>好的，现在回到MV模式！</p>\n<p>在 WWDC 2020 中，题为<a href=\"https://developer.apple.com/videos/play/wwdc2020/10040/\">SwiftUI 中的数据要点</a>的演讲中，Apple 展示了下图。</p>\n<p><img src=\"https://azamsharp.com/images/single-source.png\" alt=\"ObservableObject as the data dependency surface\"></p>\n<p>主要思想是提供对单个层或表面的视图访问，该层或表面用作事实来源，并允许访问应用程序中的所有实体。</p>\n<p>Apple 示例项目（包括 <a href=\"https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui\">Fruta</a> 和 <a href=\"https://developer.apple.com/documentation/swiftui/food_truck_building_a_swiftui_multiplatform_app\">FoodTruck 应用程序</a>）演示了如何针对硬编码数据源使用此模式。但是在WWDC视频标题 <a href=\"https://developer.apple.com/videos/play/wwdc2022/110360/\">使用Xcode进行服务器端开发</a>中，Apple展示了如何更新现有的FoodTruck应用程序并使用API响应中的数据。</p>\n<p>下面的屏幕截图显示了 <code>FoodTruckModel</code> 使用 <code>DonutsServerClient</code> 检索甜甜圈列表。甜甜圈服务器客户端负责向服务器发出实际请求并下载甜甜圈。下载甜甜圈后，它们将被分配给由FoodTruckModel维护的serverDonuts属性。</p>\n<p><img src=\"https://azamsharp.com/images/xcode-server.png\" alt=\"Use Xcode for server-side development\"></p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2022/110360/\">使用 Xcode 进行服务器端开发</a></p>\n<p>下面是支持网络层的更新图。</p>\n<p><img src=\"https://azamsharp.com/images/aggregate-model-updated.001.jpeg\" alt=\"Aggregate Root\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我知道你在想什么。我们会盲目地根据Apple的代码示例提出建议吗？不！永远不要盲目地接受任何建议。始终投入时间和研究，并权衡每种方法的优缺点。我评估了许多不同的技术和模式，发现这是使用 SwiftUI 构建客户端&#x2F;服务器应用程序时最好和最简单的选择。<strong>供你的探究！</strong></p></blockquote>\n<p>根据 Apple 在他们的 WWDC 视频和代码示例中的建议以及我自己的个人经验，我一直在实现一个聚合模型，该模型保存应用程序的整个状态。对于中小型应用，单个聚合模型可能就足够了。对于复杂的应用，可以有多个聚合模型，这些模型会将相关实体组合在一起。本文稍后将讨论多个聚合模型。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>再次记住，本文是关于客户端&#x2F;服务器应用程序的。如果您正在使用核心数据或其他任何东西，那么您将不得不进行研究。对于纯粹的核心数据应用程序，我一直在尝试活动记录模式。你可以在<a href=\"https://azamsharp.com/2023/01/30/active-record-pattern-swiftui-core-data.html\">这里</a>阅读它。</p></blockquote>\n<p>按照<a href=\"https://developer.apple.com/videos/play/wwdc2022/110360/\">使用 Xcode 进行服务器端开发</a>讲座中讨论的模式，下面是我为我的应用程序实现的 StoreModel。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">class StoreModel: ObservableObject &#123;\n    \n    private var storeHTTPClient: StoreHTTPClient\n    \n    init(storeHTTPClient: StoreHTTPClient) &#123;\n        self.storeHTTPClient &#x3D; storeHTTPClient\n    &#125;\n    \n    @Published var products: [Product] &#x3D; []\n    @Published var categories: [Category] &#x3D; []\n    \n    func addProduct(_ product: Product) async throws &#123;\n         try await storeHTTPClient.addProduct(product)\n    &#125;\n    \n    func populateProducts() async throws &#123;\n        self.products &#x3D; try await storeHTTPClient.loadProducts()\n    &#125;\n&#125;</code></pre>\n<p><code>StoreModel</code> 是一个聚合模型，用于集中应用程序的所有数据。视图直接与 StoreModel 通信以执行查询和暂留操作。StoreModel 也利用 <code>StoreHTTPClient</code> ，它用于执行网络操作。StoreHTTPClient 是一个无状态网络层。这意味着它可以用于应用程序的其他部分，而不是SwiftUI，即UIKit，甚至可以在不同的平台（macOS）上使用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在域驱动设计 （DDD） 中，聚合是相关对象的群集，出于数据一致性和事务边界的目的，这些对象被视为单个工作单元。因此，聚合模型是代码中聚合的表示形式，通常为类或类组。</p></blockquote>\n<p><code>StoreModel</code> 可以以各种不同的方式使用。如果只希望数据可用于特定视图，并且希望将对象与视图的生存期相关联，则可以使用 StoreModel 作为@StateObject。但是我经常发现自己将 StoreModel 添加到@EnvironmentObject，以便它可以在注入的视图及其所有子视图中可用。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">@main\nstruct StoreAppApp: App &#123;\n    var body: some Scene &#123;\n        WindowGroup &#123;\n            ContentView()\n                .environmentObject(StoreModel(client: StoreHTTPClient()))\n            \n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>通过@EnvironmentObject注入 StoreModel 后，可以访问 <code>StoreModel</code> ，如下面的实现所示。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ContentView: View &#123;\n\n    @EnvironmentObject private var model: StoreModel\n    \n    var body: some View &#123;\n        ProductListView(products: model.products)\n            .task &#123;\n                do &#123;\n                    try await model.populateProducts()\n                &#125; catch &#123;\n                    print(error.localizedDescription)\n                &#125;\n            &#125;\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>您可能想在所有视图中使用 <code>@EnvironmentObject</code> 。虽然，它将按预期工作，但对于较大的应用程序，您需要使演示视图没有任何依赖项。表示视图通常是为实现可重用性而创建的子视图。如果您尝试访问子视图中的 <code>@EnvironmentObject</code> ，则会影响它们的可重用性状态，并且它们变得不那么有用。主要原因是现在他们依赖于 <code>@EnvironmentObject</code> 向他们提供数据。相反，我们应该遵循自上而下的方法，其中数据从父视图传递到子视图。这也称为<a href=\"https://www.patterns.dev/posts/presentational-container-pattern/\">容器&#x2F;表示模式</a>。</p></blockquote>\n<p>除了获取和持久化之外，StoreModel 还可以直接对视图提供排序、过滤、搜索和其他操作。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果我使用传统的 MVVM 模式，那么我将创建多个视图模型来适应每个屏幕。这可以包括 <code>ProductListViewModel</code> 、 <code>ProductViewModel</code> 、 <code>AddProductViewModel</code> 、 <code>ProductDetailViewModel</code> 等等。大多数时候，这些视图模型最终只有一个或两个函数，维护单一事实来源可能会变得非常困难。在 MV 模式中，视图本身就是视图模型，因此我们在大多数情况下不需要创建不必要的视图模型。视图也是一个视图模型，它只是向模型（聚合模型）请求数据。</p></blockquote>\n<p><strong>客户端&#x2F;服务器应用程序中的事实来源是服务器</strong>。这意味着您不应该仅仅因为添加了新视图而添加符合 ObservableObject（新事实来源）协议的视图模型。该视图的真相来源没有改变，它仍然是服务器。</p>\n<p>单个StoreModel非常适合小型甚至中型应用程序。但对于较大的应用，最好根据应用程序的边界上下文引入多个聚合模型。在下一节中，我们将介绍多个聚合模型，以及它们在大型团队中工作时如何受益。</p>\n<h2 id=\"多个聚合模型\"><a href=\"#多个聚合模型\" class=\"headerlink\" title=\"多个聚合模型\"></a>多个聚合模型</h2><p>正如您在前面的部分所学到的，聚合模型的目的是将数据暴露给视图。正如Luca在<a href=\"https://developer.apple.com/videos/play/wwdc2020/10040/\">Data Essentials in SwiftUI WWDC 2020 (11:30)</a>中所解释的，“聚合模型是一种<code>ObservableObject</code>，它充当您数据依赖关系的表面。这使我们能够使用值类型对数据进行建模，并使用引用类型管理其生命周期和副作用。”</p>\n<p>随着业务的增长，单个聚合模型可能不足以维护整个应用程序的生命周期和副作用。在这里，我们将介绍多个聚合模型。这些聚合模型基于应用程序的边界上下文。边界上下文是指系统中具有明确边界并旨在服务于特定业务目的的特定区域。</p>\n<p>在电子商务应用程序中，我们可以有多个边界上下文，包括结帐流程、库存管理系统、目录、履行、装运、订购、营销和客户管理模块。</p>\n<p>定义边界上下文在软件开发中非常重要，它有助于将应用程序分解为可管理的小部分。这也允许团队在系统的不同部分工作，而不会相互干扰。</p>\n<p>开发人员通常不擅长为软件应用程序查找边界上下文。主要原因是他们的技术知识没有直接映射到领域知识。领域知识需要不同的技能，领域专家更适合这种角色。领域专家是一个人，他可能不精通技术，但了解业务或特定领域的运作方式。在大型项目中，您可能有多个领域专家，每个专家处理不同的业务领域。这就是为什么开发人员在开始任何开发之前与领域专家沟通并了解领域非常重要的原因。</p>\n<p>确定与应用程序关联的不同边界上下文后，可以以聚合模型的形式表示它们。如下图所示。</p>\n<p><img src=\"https://azamsharp.com/images/aggregate-model-updated.002.jpeg\" alt=\"Multiple Aggregate Root\"></p>\n<p>网络层也可以划分为多个 HTTP 客户端，或者您可以对整个应用程序使用单个通用网络层。如下图所示。</p>\n<p><img src=\"https://azamsharp.com/images/aggregate-model-updated.003.jpeg\" alt=\"Multiple Aggregate Root\"></p>\n<p>目录聚合模型将负责提供与目录关联的所有实体的视图。这可能包括但不限于：</p>\n<ul>\n<li>Product</li>\n<li>Category</li>\n<li>Brand</li>\n<li>Review</li>\n</ul>\n<p>排序聚合模型将负责提供所有排序相关实体的视图。这可能包括但不限于：</p>\n<ul>\n<li>Order</li>\n<li>OrderLineItem</li>\n<li>OrderStatus</li>\n<li>ShippingMethod</li>\n<li>Discount</li>\n</ul>\n<p><code>目录</code>和<code>订购</code>聚合模型将是符合<code>ObservableObject</code>协议的引用类型。它们提供的所有实体都将是值类型。</p>\n<p><code>Catalog</code>聚合模型和<code>Product</code>实体的概要如下所示:</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">\nstruct Product: Codable &#123;\n    let productId: Int\n    let name: String\n    let category: Category\n    let price: Double\n    let description: String\n    let reviews: [Review]?\n&#125;\n\n@MainActor \nclass Catalog: ObservableObject &#123;\n    \n    &#x2F;&#x2F; designated or generic HTTP client \n    let storeHTTPClient: StoreHTTPClient\n    \n    @Published var products: [Product]\n    @Published var categories: [Category]\n    \n    init(storeHTTPClient: StoreHTTPClient) &#123;\n        self.storeHTTPClient &#x3D; storeHTTPClient\n    &#125;\n    \n    func loadProducts() &#123;\n         products &#x3D; storeHTTPClient.loadProducts\n    &#125;\n    \n    func getProductById(_ productId: Int) -&gt; Product? &#123;\n        &#x2F;&#x2F; fetch product by id \n    &#125;\n    \n    func getProductsByCategory(_ categoryId: Int) -&gt; [Product] &#123;\n       &#x2F;&#x2F; get products by category\n    &#125;\n    \n    func getCategories() -&gt; [Category] &#123;\n        categories &#x3D; storeHTTPClient.loadCategories()\n    &#125;\n&#125;</code></pre>\n\n<p>目录和订单聚合模型作为环境对象注入到应用程序中。可以直接在应用程序根视图或应用程序每个部分的根视图中注入它们。后者如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">@main\nstruct StoreApp: App &#123;\n    \n    var body: some Scene &#123;\n        WindowGroup &#123;\n            ContentView()\n                .environmentObject(Catalog(client: CatalogHTTPClient()))\n                .environmentObject(Ordering(client: OrderingHTTPClient()))\n            \n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>现在，在视图中，您可以通过访问<code>@EnvironmentObject</code>来使用Catalog或Ordering模型。具体实现如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct CatalogListScreen: View &#123;\n    \n    @EnvironmentObject private var catalog: Catalog\n    \n    var body: some View &#123;\n        List(catalog.products) &#123; product in\n            Text(product.name)\n        &#125;.task &#123;\n            do &#123;\n                try await catalog.loadProducts()\n            &#125; catch &#123;\n                print(error.localizedDescription)\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<p>如果您的视图需要访问订单信息，那么它也可以利用排序聚合模型。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct AdminDashboardScreen: View &#123;\n    \n    @EnvironmentObject private var catalog: Catalog\n    @EnvironmentObject private var ordering: Ordering\n    \n    var body: some View &#123;\n        VStack &#123;\n            List(catalog.products) &#123; product in\n                Text(product.name)\n            &#125;\n            List(ordering.allOrders) &#123; order in\n                Text(order.status)\n            &#125;\n        &#125;.task &#123;\n            do &#123;\n                try await catalog.loadProducts()\n                try await ordering.loadOrders()\n            &#125; catch &#123;\n                print(error.localizedDescription)\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>在某些情况下，聚合模型需要访问另一个聚合模型中的信息。在这些情况下，聚合模型将仅使用网络服务来获取所需的信息。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>重要的是，缓存层是从网络层内部调用的，而不是从聚合模型中调用的。这将允许聚合模型利用通过网络层的缓存，而不是自行实现它。通过从网络层内部访问缓存层，所有聚合模型都可以通过使用缓存资源从更快的响应中受益。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如前所述，对于小型甚至中型应用，可能只需要一个聚合模型。对于较大的应用，可以引入新的聚合模型。在创建应用程序边界之前，请确保咨询领域专家。</p></blockquote>\n<p>域边界的概念也可以应用于用户界面。这使我们能够在其他应用程序中重用用户界面元素。</p>\n<p><img src=\"https://azamsharp.com/images/user-interface.png\" alt=\"Factor out common pieces\"></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">图片的原作者已授予在本文中使用它的许可。</p>\n<p>:::</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>您可以使用 Swift 包管理器分解出常见的界面元素，并将这些包导入到其他应用程序中。</p></blockquote>\n<p>让我们继续缩小，看看我们的架构在所有部分都到位后的样子。</p>\n<p><img src=\"https://azamsharp.com/images/architecture-model-updated.jpeg\" alt=\"Architecture\"></p>\n<p>:::tip 此图像已更新，并且已从图像的原始作者授予在本文中使用它的权限。</p>\n</div>\n<p>如前所述，每个边界上下文都由其自己的模块表示。这些模块可以由文件夹或包依赖项表示。</p>\n<p><strong>CatalogUI:</strong> 表示与目录关联的用户界面。这可以包括所有特定于目录的内容，如AddCatalogScreen，UpdateCatalogScreen等。</p>\n<p><strong>Catalog:</strong> 表示与目录关联的模型。这将包含聚合模型和聚合模型公开的所有实体。</p>\n<p><strong>MyStoreKit</strong>: 表示用于执行网络调用的 HTTP 客户端。</p>\n<p><strong>Foundation Core</strong>: 表示所有模块使用的资源。这可以包括帮助程序类&#x2F;结构、可重用视图、图像、图标，甚至用于测试的预览内容。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>每个模块（如运输，库存，订购等）都可以由文件夹结构或包依赖项表示。这实际上取决于您的需求以及您是否希望在其他项目中重用您的模块。</p></blockquote>\n<p>使用此体系结构，可以在不干扰现有需求的情况下添加未来的业务需求和数据访问服务。这也允许更多的协作环境，因为不同的团队可以在不同的模块上工作而不会相互干扰。</p>\n<h2 id=\"视图的特定逻辑\"><a href=\"#视图的特定逻辑\" class=\"headerlink\" title=\"视图的特定逻辑\"></a>视图的特定逻辑</h2><p>在最后一部分中，我讨论了聚合模型如何充当单一事实来源并为视图提供所需的数据。但是视图特定的逻辑呢？应该将该逻辑放在哪里，以及我们必须使用哪些选项来对该逻辑进行测试。</p>\n<p>在下面的代码中，我们希望根据最低和最高价格过滤产品。实现如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ContentView: View &#123;\n    \n    let httpClient: HTTPClientProtocol\n    @State private var products: [Product] &#x3D; []\n    @State private var min: Double?\n    @State private var max: Double?\n    @State private var filteredProducts: [Product] &#x3D; []\n    \n    private func filterProducts() &#123;\n        \n        guard let min &#x3D; min,\n              let max &#x3D; max else &#123; return &#125;\n        \n        filteredProducts &#x3D; products.filter &#123;\n            $0.price &gt;&#x3D; min &amp;&amp; $0.price &lt;&#x3D; max\n        &#125;\n    &#125;\n    \n    private var isFormValid: Bool &#123;\n        \n        guard let min &#x3D; min,\n              let max &#x3D; max else &#123; return false &#125;\n        \n        return min &lt; max\n    &#125;\n    \n    var body: some View &#123;\n        VStack &#123;\n            HStack &#123;\n                TextField(&quot;Min&quot;, value: $min, format: .number)\n                    .textFieldStyle(.roundedBorder)\n                TextField(&quot;Max&quot;, value: $max, format: .number)\n                    .textFieldStyle(.roundedBorder)\n            &#125;\n            Text(&quot;Max must be larger than min.&quot;)\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .font(.caption)\n                .padding([.bottom], 20)\n            \n            Button(&quot;Apply&quot;) &#123;\n                filterProducts()\n            &#125;\n            \n            .disabled(!isFormValid)\n          \n            List(filteredProducts.isEmpty ? products: filteredProducts) &#123; product in\n                HStack &#123;\n                    Text(product.title)\n                    Spacer()\n                    Text(product.price, format: .currency(code: &quot;USD&quot;))\n                &#125;\n            &#125;\n            .task &#123;\n                do &#123;\n                    products &#x3D; try await httpClient.loadProducts()\n                &#125; catch &#123;\n                    print(error)\n                &#125;\n        &#125;\n        &#125;.padding()\n    &#125;\n&#125;\n\nstruct ContentView_Previews: PreviewProvider &#123;\n    static var previews: some View &#123;\n        ContentView(httpClient: HTTPClientStub())\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果 filterProducts 或类似函数将涉及任何模型逻辑，那么您也可以将其放在聚合根模型中，而不是视图中。</p></blockquote>\n<p>请注意，我们没有调用真正的服务，而是使用返回预配置响应的 HTTPClient 的存根版本。另一个不错的选择是为每个响应创建单独的 JSON 文件，并在使用 Xcode 预览时从这些文件读取数据。我在我的一个YouTube视频中介绍了这一点，<a href=\"https://youtu.be/EycwLxTU-EA\">使用JSON File构建SwiftUI Xcode Previews</a>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请记住，在上述方案中，如果在筛选过程中未找到结果，则返回原始产品数组。</p></blockquote>\n<p>我们在视图中有两段构成逻辑的代码， <code>isFormValid</code> 和 <code>filterProducts</code> 。如果我们想测试该代码，我们有很多方法。</p>\n<p>使用 Xcode 预览！我知道这听起来并不花哨，但我鼓励您使用 Xcode 预览来测试基于视图的逻辑。Xcode 预览非常快（取决于您使用的机器），它给你的感觉与红色&#x2F;绿色&#x2F;重构循环相同。对于这种特殊情况，Xcode 预览将是我的首选。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Xcode 预览并不是所有问题的答案。如果您正在处理复杂的视图逻辑，那么最好将所有逻辑移到一个单独的结构中，然后为该代码段编写单元测试。请记住，我们测试的重要方面之一是<a href=\"https://azamsharp.com/2023/02/15/testing-is-about-confidence.html\">获得对我们代码的信心</a>。</p></blockquote>\n<p>另一种选择是从视图中提取逻辑，然后针对它编写单元测试。这在下面的实现中显示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ProductFilterForm &#123;\n    \n    var min: Double?\n    var max: Double?\n    \n    func filterProducts(_ products: [Product]) -&gt; [Product] &#123;\n        \n        guard let min &#x3D; min,\n              let max &#x3D; max else &#123; return [] &#125;\n        \n        return products.filter &#123;\n            $0.price &gt;&#x3D; min &amp;&amp; $0.price &lt;&#x3D; max\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><code>ProductFilterForm</code> 现在可以单独进行单元测试。单元测试如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">\nfunc test_user_can_filter_products_by_price() throws &#123;\n        \n        self.continueAfterFailure &#x3D; false\n      \n        let products &#x3D; [\n            Product(id: 1, title: &quot;Product 1&quot;, price: 10),\n            Product(id: 2, title: &quot;Product 2&quot;, price: 100),\n            Product(id: 3, title: &quot;Product 3&quot;, price: 200),\n            Product(id: 4, title: &quot;Product 4&quot;, price: 500)\n        ]\n        \n        let expectedFilteredProducts &#x3D; [\n            Product(id: 2, title: &quot;Product 2&quot;, price: 100),\n            Product(id: 3, title: &quot;Product 3&quot;, price: 200),\n            Product(id: 4, title: &quot;Product 4&quot;, price: 500)\n        ]\n        \n        let productFilterForm &#x3D; ProductFilterForm(min: 100, max: 500)\n        let filteredProducts &#x3D; productFilterForm.filterProducts(products)\n        \n        for expectedProduct in expectedFilteredProducts &#123;\n            \n            let product &#x3D; filteredProducts.first &#123; $0.id &#x3D;&#x3D; expectedProduct.id &#125;\n            \n            XCTAssertNotNil(product)\n            XCTAssertEqual(product!.title, expectedProduct.title)\n            XCTAssertEqual(product!.price, expectedProduct.price)\n        &#125;\n        \n    &#125;\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如上所示，单元测试视图的逻辑隔离对于复杂的用户界面可能很有用。请记住，仅仅因为单元测试通过，并不意味着用户界面按预期工作。</p></blockquote>\n<p>你可以写的最终一种测试是端到端测试。E2E 测试很棒，因为它们从用户的角度测试应用程序，并且最适合防止回归。缺点是 E2E 测试比运行单元测试慢。它们较慢的主要原因是因为它们正在测试完整的应用程序而不是小单元。软件中的大多数问题之所以存在，是因为应用程序是在单元级别而不是系统级别进行测试的。我鼓励你花一些时间编写有意义的E2E测试。</p>\n<p>下面是上述方案的 E2E 测试的实现。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func test_user_can_filter_products_based_on_price() &#123;\n      \n      let app &#x3D; XCUIApplication()\n      app.launchEnvironment &#x3D; [&quot;ENV&quot;: &quot;TEST&quot;]\n      app.launch()\n      \n      app.textFields[&quot;minTextField&quot;].tap()\n      app.textFields[&quot;minTextField&quot;].typeText(&quot;100&quot;)\n      \n      app.textFields[&quot;maxTextField&quot;].tap()\n      app.textFields[&quot;maxTextField&quot;].typeText(&quot;500&quot;)\n      \n      app.buttons[&quot;applyButton&quot;].tap()\n      \n      &#x2F;&#x2F; assert that the count is correct\n      XCTAssertEqual(3, app.collectionViews[&quot;productList&quot;].cells.count)\n      &#x2F;&#x2F; assert that the items are correct\n      XCTAssertEqual(&quot;Product 2&quot;, app.collectionViews[&quot;productList&quot;].staticTexts[&quot;Product 2&quot;].label)\n      XCTAssertEqual(&quot;Product 3&quot;, app.collectionViews[&quot;productList&quot;].staticTexts[&quot;Product 3&quot;].label)\n      XCTAssertEqual(&quot;Product 4&quot;, app.collectionViews[&quot;productList&quot;].staticTexts[&quot;Product 4&quot;].label)\n  &#125;</code></pre>\n\n<p>最后，您将不得不决定在<a href=\"https://martinfowler.com/articles/practical-test-pyramid.html\">测试金字塔</a>中要投入时间以获得最佳投资回报。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果你想了解更多关于测试的信息，那么你可以看看我的课程 <a href=\"https://www.udemy.com/course/test-driven-development-in-ios-using-swift/?referralCode=07649C41E6E184CE86B3\">使用 Swift 在 iOS 中测试驱动开发</a> 。</p></blockquote>\n<h2 id=\"屏幕与视图\"><a href=\"#屏幕与视图\" class=\"headerlink\" title=\"屏幕与视图\"></a>屏幕与视图</h2><p>当我使用 Flutter 时，我观察到一种组织小部件的常见模式。Flutter 开发人员根据小部件是否仅代表可重用控件的整个屏幕来分离小部件。由于 React、Flutter 和 SwiftUI 在本质上非常相似，因此我们可以在构建 SwiftUI 应用程序时应用相同的原则。</p>\n<p>例如，在显示影片的详细信息时，可以将其称为 MovieDetailScreen，而不是将该视图称为 MovieDetailView。这将清楚地表明详细信息视图是实际屏幕，而不是一些可重用的子视图。下面再举几个例子。</p>\n<p><strong>Screens</strong></p>\n<ul>\n<li>MovieDetailScreen</li>\n<li>HomeScreen</li>\n<li>LoginScreen</li>\n<li>RegisterScreen</li>\n<li>SettingsScreen</li>\n</ul>\n<p><strong>Views</strong></p>\n<ul>\n<li>RatingsView</li>\n<li>MessageView</li>\n<li>ReminderListView</li>\n<li>ReminderCellView</li>\n</ul>\n<p>我发现密切关注我们友好的邻居 React 和 Flutter 总是一个好主意。你永远不知道你会从其他声明式框架中带来什么想法到 SwiftUI 中。</p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>软件开发中有一句名言，垃圾进，垃圾出。这意味着，如果您允许用户通过用户界面输入不正确的信息（垃圾），那么垃圾最终将进入您的数据库。通常，当这种情况发生时，清理数据库变得非常困难和耗时。</p>\n<p>您必须采取必要的步骤来防止用户首先提交不正确的信息。</p>\n<p>考虑一个简单的 <code>LoginScreen</code> 视图，其中包含用户名和密码文本字段。如果我们想仅在视图正确验证时才启用登录按钮，我们可以使用以下实现：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct LoginScreen: View &#123;\n    \n    @State private var username: String &#x3D; &quot;&quot;\n    @State private var password: String &#x3D; &quot;&quot;\n    \n    private var isFormValid: Bool &#123;\n        !username.isEmptyOrWhiteSpace &amp;&amp; !password.isEmptyOrWhiteSpace\n    &#125;\n    \n    var body: some View &#123;\n        Form &#123;\n            TextField(&quot;Username&quot;, text: $username)\n            TextField(&quot;Password&quot;, text: $password)\n            Button(&quot;Login&quot;) &#123;\n                \n            &#125;.disabled(!isFormValid)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>对于此类简单的逻辑，您可以使用 Xcode 预览快速执行手动测试并验证结果。</p>\n<p>如果您正在处理更复杂的表单，则建议将其提取到自己的结构中。此概念显示在下面的实现中。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct LoginFormConfig &#123;\n    \n    var username: String &#x3D; &quot;&quot;\n    var password: String &#x3D; &quot;&quot;\n    \n    var isFormValid: Bool &#123;\n        !username.isEmptyOrWhiteSpace &amp;&amp; !password.isEmptyOrWhiteSpace\n    &#125;\n&#125;\n\nstruct LoginScreen: View &#123;\n    \n    @State private var loginFormConfig: LoginFormConfig &#x3D; LoginFormConfig()\n    \n    var body: some View &#123;\n        Form &#123;\n            TextField(&quot;Username&quot;, text: $loginFormConfig.username)\n            TextField(&quot;Password&quot;, text: $loginFormConfig.password)\n            Button(&quot;Login&quot;) &#123;\n                \n            &#125;.disabled(!loginFormConfig.isFormValid)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><code>LoginFormConfig</code> 封装表单验证。这也允许我们针对 LoginFormConfig 编写单元测试。下面显示了几个单元测试：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">final class LearnTests: XCTestCase &#123;\n\n    func test_login_form_validates_successfully() &#123;\n        \n        let expectedOutputs: [[String: Any]] &#x3D; [\n            [&quot;username&quot;: &quot;johndoe&quot;, &quot;password&quot;: &quot;password&quot;, &quot;isFormValid&quot;: true],\n            [&quot;username&quot;: &quot;&quot;, &quot;password&quot;: &quot;password&quot;, &quot;isFormValid&quot;: false],\n            [&quot;username&quot;: &quot;johndoe&quot;, &quot;password&quot;: &quot; &quot;, &quot;isFormValid&quot;: false],\n            [&quot;username&quot;: &quot;&quot;, &quot;password&quot;: &quot; &quot;, &quot;isFormValid&quot;: false],\n            [&quot;username&quot;: &quot;   &quot;, &quot;password&quot;: &quot;password&quot;, &quot;isFormValid&quot;: false],\n            [&quot;username&quot;: &quot; johndoe&quot;, &quot;password&quot;: &quot; password&quot;, &quot;isFormValid&quot;: true]\n        ]\n        \n        for expectedOutput in expectedOutputs &#123;\n            let username &#x3D; expectedOutput[&quot;username&quot;] as! String\n            let password &#x3D; expectedOutput[&quot;password&quot;] as! String\n            let isFormValid &#x3D; expectedOutput[&quot;isFormValid&quot;] as! Bool\n            \n            let loginFormConfig &#x3D; LoginFormConfig(username: username, password: password)\n            XCTAssertEqual(loginFormConfig.isFormValid, isFormValid)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>最后，将表单验证提取到单独的结构中并为其编写单元测试取决于您的置信度。简单的表单可以通过 Xcode 预览轻松测试，不需要额外的结构甚至单元测试。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>验证帮助程序函数，如isEmptyOrWhiteSpace，isNumeric，isEmail，isLessThan可以移动到单独的Swift包中。这将促进可重用性，其他项目也可以从使用它中受益。</p></blockquote>\n<p>我在之前的一篇文章中介绍了几种处理和显示验证错误的不同方法，您可以在<a href=\"https://azamsharp.com/2022/08/09/intro-to-mv-state-pattern.html\">此处阅读</a>。</p>\n<h2 id=\"显示错误\"><a href=\"#显示错误\" class=\"headerlink\" title=\"显示错误\"></a>显示错误</h2><p>显示错误是任何应用程序不可或缺的一部分。</p>\n<p>在 SwiftUI 中，我们可以将显示错误集中到一个位置。这将防止我们编写重复的代码，并在代码库中提供一个点来更改布局和外观。</p>\n<p>我们可以从创建一个 ErrorWrapper 开始，它将负责包装实际错误，并为用户提供后续步骤的指导。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ErrorWrapper: Identifiable &#123;\n    let id &#x3D; UUID()\n    let error: Error\n    let guidance: String\n&#125;</code></pre>\n\n<p>ErrorWrapper 将由 ErrorView 使用。ErrorView将负责以可视格式显示错误的详细信息。您可以在下面找到错误视图的基本实现。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ErrorView: View &#123;\n    \n    let errorWrapper: ErrorWrapper\n    \n    var body: some View &#123;\n        VStack &#123;\n            Text(&quot;Error has occured in the application.&quot;)\n                .font(.headline)\n                .padding([.bottom], 10)\n            Text(errorWrapper.error.localizedDescription)\n            Text(errorWrapper.guidance)\n                .font(.caption)\n        &#125;.padding()\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ErrorView只是一个视图，您可以根据需要对其进行自定义。</p></blockquote>\n<p>为了从应用程序的任何部分设置错误包装器，我们将添加一个 ErrorState 作为 ObservableObject 并将其注入到环境对象中。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">class ErrorState: ObservableObject &#123;\n    @Published var errorWrapper: ErrorWrapper?\n&#125;\n\n@main\nstruct StoreApp: App &#123;\n    \n    @StateObject private var errorState &#x3D; ErrorState()\n    \n    var body: some Scene &#123;\n        WindowGroup &#123;\n            ContentView()\n                .environmentObject(errorState)\n                .sheet(item: $errorState.errorWrapper) &#123; errorWrapper in\n                    ErrorView(errorWrapper: errorWrapper)\n                &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<p>每当错误状态更改时，将显示一个包含最新错误的工作表。同样，您可以自由使用不同的方法来显示错误，而不是工作表。</p>\n<p>此技术允许您在代码库中有一个点，该点负责显示错误。</p>\n<h2 id=\"分组视图与事件\"><a href=\"#分组视图与事件\" class=\"headerlink\" title=\"分组视图与事件\"></a>分组视图与事件</h2><p>在 SwiftUI 中创建可重用视图的一种方法是将事件委托给父视图。这允许视图在不同的方案中使用，而无需将它们绑定到特定逻辑。实现此目的的一种方法是使用闭包。</p>\n<p>考虑一个 <code>ReminderCellView</code> ，它允许用户执行检查&#x2F;取消选中和删除操作。实现如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ReminderCellView: View &#123;\n    \n    let index: Int\n    let onChecked: (Int) -&gt; Void\n    let onDelete: (Int) -&gt; Void\n\n    var body: some View &#123;\n        HStack &#123;\n            Image(systemName: &quot;square&quot;)\n                .onTapGesture &#123;\n                    onChecked(index)\n                &#125;\n            Text(&quot;ReminderCellView \\(index)&quot;)\n            Spacer()\n            Image(systemName: &quot;trash&quot;)\n                .onTapGesture &#123;\n                    onDelete(index)\n                &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><code>ReminderCellView</code> 公开了 <code>onChecked</code> 和 <code>onDelete</code> 闭包。调用者可以使用这些闭包来执行特定任务。调用方如下:</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ContentView: View &#123;\n\n    var body: some View &#123;\n        List(1...20, id: \\.self) &#123; index in\n            ReminderCellView(index: index, onChecked: &#123; index in\n                &#x2F;&#x2F; do something\n            &#125;, onDelete: &#123; index in\n                &#x2F;&#x2F; do something\n            &#125;)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>随着 <code>ReminderCellView</code> 的复杂性增加，它会暴露更多的事件，那么调用方将变得更加复杂。</p>\n<p>我们可以将所有事件分组到一个简单的枚举中来解决此问题。如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">enum ReminderCellEvents &#123;\n    case onChecked(Int)\n    case onDelete(Int)\n&#125;</code></pre>\n\n<p>可以使用<code>ReminderCellEvents</code>来对<code>ReminderCellView</code>进行操作和更新，如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ReminderCellView: View &#123;\n    \n    let index: Int\n    let onEvent: (ReminderCellEvents) -&gt; Void\n    \n    var body: some View &#123;\n        HStack &#123;\n            Image(systemName: &quot;square&quot;)\n                .onTapGesture &#123;\n                    onEvent(.onChecked(index))\n                &#125;\n            Text(&quot;ReminderCellView \\(index)&quot;)\n            Spacer()\n            Image(systemName: &quot;trash&quot;)\n                .onTapGesture &#123;\n                    onEvent(.onDelete(index))\n                &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>现在，我们不再处理多个闭包，而是只处理单个基于枚举的事件结构。调用站点看起来也干净得多。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ContentView: View &#123;\n\n    var body: some View &#123;\n        List(1...20, id: \\.self) &#123; index in\n            ReminderCellView(index: index) &#123; event in\n                switch event &#123;\n                    case .onChecked(let index):\n                        print(index)\n                    case .onDelete(let index):\n                        print(index)\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>最后，您必须决定何时要将事件分组到枚举中，以及何时要单独使用它们（多个闭包）。如果我的视图公开了两个以上的闭包，我倾向于使用枚举事件。</p>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>SwiftUI 在 iOS 16 中引入了 NavigationStack，它允许开发人员为其应用程序配置全局路由。</p>\n<p>在 SwiftUI 中，有几种不同的方法可以处理路由。一种可能的方法是处理应用程序根视图中的所有路由。我们将从创建路由枚举开始，它将为整个应用程序设置路由。实现如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">\nenum Routes: Hashable &#123;\n    case catalog(CatalogRoutes)\n    case inventory(InventoryRoutes)\n    \n    enum CatalogRoutes: Hashable &#123;\n        case home\n        case detail(Category)\n                \n    &#125;\n    \n    enum InventoryRoutes: Hashable &#123;\n        case home\n        case detail(Product)\n    &#125;\n&#125;</code></pre>\n\n<p><code>Routes</code> 枚举表示屏幕每个部分的根路由。这包括<code>catalog</code>, <code>inventory</code>, <code>shipping</code> 等。每个部分的路线在其相应的路线枚举（<code>CatalogRoutes</code>、<code>InventoryRoutes</code>）中声明。</p>\n<p>对于编程路由，我们添加了 <code>NavigationState</code>。 NavigationState 跟踪所有路线，并将通过 <code>@EnvironmentObject</code> 注入到应用程序中</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">class NavigationState: ObservableObject &#123;\n    @Published var routes: [Routes] &#x3D; []\n&#125;</code></pre>\n\n<p>最后，我们在应用程序的根视图中处理所有路由。如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">@main\nstruct LearnApp: App &#123;\n    \n    @StateObject private var navigationState &#x3D; NavigationState()\n    \n    var body: some Scene &#123;\n        WindowGroup &#123;\n            NavigationStack(path: $navigationState.routes) &#123;\n                ContentView()\n                    .navigationDestination(for: Routes.self) &#123; route in\n                        switch route &#123;\n                            case .catalog(let catalogRoutes):\n                                switch catalogRoutes &#123;\n                                    case .home:\n                                        Text(&quot;Home View&quot;)\n                                    case .detail(let category):\n                                        &#x2F;&#x2F; show category detail view\n                                        Text(category.name)\n                                &#125;\n                            case .inventory(let inventoryRoutes):\n                                switch inventoryRoutes &#123;\n                                    case .home:\n                                        &#x2F;&#x2F; show home view\n                                        Text(&quot;Home View&quot;)\n                                    case .detail(let product):\n                                        &#x2F;&#x2F; show product details View\n                                        Text(product.name)\n                                &#125;\n                        &#125;\n                    &#125;\n            &#125;.environmentObject(navigationState)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>上述方法可行，但很快就会变得混乱，因为我们将应用程序的所有路由都放在一个地方。控制这个问题的一种方法是为屏幕的每个部分创建单独的路由器，并允许路由器处理特定的路由行为。<code>CatalogRouter</code>的实现如下所示。CatalogRouter负责处理与目录屏幕相关的所有路由。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct CatalogRouter &#123;\n    \n    let routes: CatalogRoutes\n\n    @ViewBuilder\n    func configure() -&gt; some View &#123;\n        switch routes &#123;\n            case .detail(let category):\n                return Text(category.name)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>同样，我们可以为清单添加路由器。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct InventoryRouter &#123;\n    let routes: InventoryRoutes\n    \n    &#x2F;&#x2F; view builder\n    @ViewBuilder\n    func configure() -&gt; some View &#123;\n        switch routes &#123;\n            case .detail(let product):\n                Text(product.name)\n            case .home:\n                Text(&quot;Home&quot;)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>现在，我们的导航目的地看起来更干净。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">@main\nstruct LearnApp: App &#123;\n    \n    @StateObject private var navigationState &#x3D; NavigationState()\n    \n    var body: some Scene &#123;\n        WindowGroup &#123;\n            NavigationStack(path: $navigationState.routes) &#123;\n                ContentView()\n                    .navigationDestination(for: Routes.self) &#123; route in\n                        switch route &#123;\n                            case .catalog(let routes):\n                                CatalogRouter(routes: routes).configure()\n                            case .inventory(let routes):\n                                InventoryRouter(routes: routes).configure()\n                        &#125;\n                    &#125;\n            &#125;.environmentObject(navigationState)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>如果需要调用某个路由，可以在 <code>NavigationState</code> 中附加该路由。这在下面的实现中显示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ContentView: View &#123;\n    \n    @EnvironmentObject private var navigationState: NavigationState\n    \n    var body: some View &#123;\n       \n        VStack &#123;\n            \n            Button(&quot;Go to Catalog&quot;) &#123;\n                navigationState.routes.append(.catalog(.detail(Category(name: &quot;Category 1&quot;))))\n            &#125;\n            \n            Button(&quot;Go to Inventory&quot;) &#123;\n                navigationState.routes.append(.inventory(.detail(Product(name: &quot;Product 1&quot;))))\n            &#125;\n           \n        &#125; .padding()\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我还写了一本关于 SwiftUI 导航 API 的书。如果您有兴趣，可以免费下载 <a href=\"https://azamsharp.com/books\">从这里开始</a> .</p></blockquote>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文的这一部分摘自我的文章 <a href=\"https://azamsharp.com/2012/12/23/pragmatic-unit-testing.html\">务实的测试和避免常见的陷阱</a></p></blockquote>\n<p>编写测试的主要目的是确保软件按预期工作。测试还让您确信，在一个模块中所做的更改不会破坏相同模块或其他模块中的内容。</p>\n<p>并非所有应用程序都需要编写测试。如果要构建具有直接域的基本应用程序，则可以使用手动测试来测试完整的应用程序。话虽如此，在大多数专业环境中，您正在使用具有业务规则的复杂域。这些业务规则构成了公司运营和产生收入的基础。</p>\n<p>在本文中，我将讨论编写测试的不同技术，以及开发人员如何编写好的测试以获得最大的投资回报(ROI)。</p>\n<h2 id=\"并非所有测试都等于\"><a href=\"#并非所有测试都等于\" class=\"headerlink\" title=\"并非所有测试都等于\"></a>并非所有测试都等于</h2><p>考虑您正在为银行编写应用程序的情况。业务规则之一是在资金不足的情况下收取透支费。<a href=\"https://www.depositaccounts.com/blog/banks-income-fees.html\">银行仅通过收费就创造了数十亿美元的收入</a>。作为开发人员，您必须编写高质量的测试，以确保透支费用计算按预期工作。</p>\n<p>在同一银行应用程序中，您可能具有诸如呈现电子邮件模板或记录某些交互等功能。这些功能很重要，但与收取透支费相比，可能不会产生相同的投资回报。这意味着如果电子邮件模板格式不正确，那么银行就不会损失数百万美元，并且您将不会在半夜接到电话。如果日志记录是为开发人员准备的，那么在大多数情况下，您甚至不需要为其编写测试。这只是一个实现细节。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>如果要构建日志记录框架，则必须彻底测试框架公开的公共 API。</p></blockquote>\n</blockquote>\n<p>下次编写测试时，请问问自己此功能对业务有多重要。如果它是业务不可或缺的一部分，请确保对其进行彻底测试并获得高代码覆盖率。</p>\n<h2 id=\"测试行为而不是实现\"><a href=\"#测试行为而不是实现\" class=\"headerlink\" title=\"测试行为而不是实现\"></a>测试行为而不是实现</h2><p>开发人员犯的最大错误之一是专注于针对实现细节而不是应用程序的行为编写测试。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>添加新测试的触发器是要求，而不是类或函数。</p></blockquote>\n</blockquote>\n<p>仅仅因为您添加了新类或函数并不意味着您将开始编写测试。这只是一个可以随时间变化的实现细节。测试应针对业务需求，而不是实现细节。</p>\n<p>下面是从业务需求派生的几个行为示例：</p>\n<ol>\n<li>当客户提取金额且资金不足时，则收取透支费。</li>\n<li>一旦达到限制，客户指定的股票数量将以指定价格提交交易。</li>\n</ol>\n<p>该行为源于项目的要求。检查实现细节而不是行为的测试往往非常脆弱，并且在实现更改时很容易中断，即使行为保持不变。</p>\n<p>让我们考虑一个方案，其中您正在构建一个应用程序以在屏幕上显示产品列表。这些产品是从JSON API获取的，并使用SwiftUI框架呈现，遵循MVVM设计模式的原则。</p>\n<p>首先，我们将研究大多数开发人员采用的测试上述场景的常用方法，然后我们将以更务实的方式实现测试。</p>\n<p>完整的应用可能类似于下面的实现：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">class Webservice &#123;\n    \n    func fetchProducts() async throws -&gt; [Product] &#123;\n        &#x2F;&#x2F; ignore the hard-coded URL. We can inject the URL from using test configuration. \n        let url &#x3D; URL(string: &quot;https:&#x2F;&#x2F;test.store.com&#x2F;api&#x2F;v1&#x2F;products&quot;)!\n        let (data, _) &#x3D; try await URLSession.shared.data(from: url)\n        return try JSONDecoder().decode([Product].self, from: data)\n    &#125;\n    \n&#125;\n\nclass ProductListViewModel: ObservableObject &#123;\n    \n    @Published var products: [ProductViewModel] &#x3D; []\n    \n    func populateProducts() async &#123;\n        do &#123;\n            let products &#x3D; try await Webservice().fetchProducts()\n            self.products &#x3D; products.map(ProductViewModel.init)\n        &#125; catch &#123;\n            print(error)\n        &#125;\n    &#125;\n    \n&#125;\n\nstruct ProductViewModel: Identifiable &#123;\n    \n    private let product: Product\n    \n    init(product: Product) &#123;\n        self.product &#x3D; product\n    &#125;\n    \n    var id: Int &#123;\n        product.id\n    &#125;\n    \n    var title: String &#123;\n        product.title\n    &#125;\n&#125;\n\n\nstruct ProductListScreen: View &#123;\n    \n    @StateObject private var vm &#x3D; ProductListViewModel()\n    \n    var body: some View &#123;\n        List(vm.products) &#123; product in\n            Text(product.title)\n        &#125;.task &#123;\n            await vm.populateProducts()\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>上述应用程序按预期工作并产生预期的结果。而不是测试 <code>Webservice</code> 的具体实现，我们将引入一个接口&#x2F;合约&#x2F;协议，以便我们可以注入一个模拟。创建协议的唯一目的是满足测试，即使只有一个符合该协议&#x2F;接口的具体实现。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>这称为 <a href=\"https://dhh.dk/2014/test-induced-design-damage.html\">测试引起的损伤</a> .测试规定我们应该添加依赖项，以便您可以模拟服务。引入协议&#x2F;合约&#x2F;接口的唯一目的是让你最终可以模拟它。请记住，在应用程序中使用协议&#x2F;协定没有错。它们确实有一个非常重要的目的，即向用户隐藏实现细节并提供抽象，但只是添加合约以满足测试目标，这不是一个好的做法，因为它使实现复杂化，并且您的测试远离测试应用程序的实际行为。</p></blockquote>\n</blockquote>\n<p>在下面的代码中，我们引入了一个WebserviceProtocol。Web服务和新创建的模拟Web服务都符合Webservice协议，如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">protocol WebserviceProtocol &#123;\n    func fetchProducts() async throws -&gt; [Product]\n&#125;\n\nclass Webservice: WebserviceProtocol &#123;\n    \n    func fetchProducts() async throws -&gt; [Product] &#123;\n        \n        let url &#x3D; URL(string: &quot;https:&#x2F;&#x2F;test.store.com&#x2F;api&#x2F;v1&#x2F;products&quot;)!\n        let (data, _) &#x3D; try await URLSession.shared.data(from: url)\n        return try JSONDecoder().decode([Product].self, from: data)\n    &#125;\n&#125;\n\nclass MockedWebService: WebserviceProtocol &#123;\n    func fetchProducts() async throws -&gt; [Product] &#123;\n        return [Product(id: 1, title: &quot;Product 1&quot;), Product(id: 2, title: &quot;Product 2&quot;)]\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>您可能应该使用更好的名称，而不是将其称为WebserviceProtocol。我称之为WebserviceProtocol的主要原因只是为了简单和方便。</p></blockquote>\n</blockquote>\n<p>Web 服务现在作为依赖项注入到我们的 ProductListViewModel。如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">class ProductListViewModel: ObservableObject &#123;\n    \n    private let webservice: WebserviceProtocol\n    @Published var products: [ProductViewModel] &#x3D; []\n    \n    init(webservice: WebserviceProtocol) &#123;\n        self.webservice &#x3D; webservice\n    &#125;\n    \n    func populateProducts() async &#123;\n        do &#123;\n            let products &#x3D; try await Webservice().fetchProducts()\n            self.products &#x3D; products.map(ProductViewModel.init)\n        &#125; catch &#123;\n            print(error)\n        &#125;\n    &#125;\n    \n&#125;</code></pre>\n\n<p><code>ProductListScreen</code>视图也会更新以反映更改。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct ProductListScreen: View &#123;\n    \n    @StateObject private var vm &#x3D; ProductListViewModel(webservice: WebserviceFactory.create())\n    \n    var body: some View &#123;\n        List(vm.products) &#123; product in\n            Text(product.title)\n        &#125;.task &#123;\n            await vm.populateProducts()\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>WebserviceFactory 负责返回 Web 服务或 MockedWebservice，具体取决于应用程序环境。</p></blockquote>\n</blockquote>\n<p>现在，让我们继续检查测试。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">final class ProductsTests: XCTestCase &#123;\n    \n    func test_populate_products() async throws &#123;\n        \n        let mockedWebService &#x3D; MockedWebService()\n        let productListVM &#x3D; ProductListViewModel(webservice: mockedWebService)\n        \n        await productListVM.populateProducts()\n        \n        &#x2F;&#x2F; This line is verifying the implementation detail.\n        &#x2F;&#x2F; Implementation details can change\n        &#x2F;&#x2F; fetchProducts can change to getProducts and the test will fail. \n        verify(mockedWebService.fetchProducts()).wasCalled()\n        \n        XCTAssertEqual(2, productListVM.products.count)\n    &#125;\n&#125;</code></pre>\n\n<p>我们在测试中创建了<code>MockedWebservice</code>的一个实例，并将其传递给<code>ProductListViewModel</code>。接下来，我们在视图模型上调用<code>populateProducts</code>函数，然后检查确保<code>mockedWebservice</code>实例上的<code>fetchProducts</code>被调用。最后，测试检查<code>ProductListViewModel</code>实例的<code>products</code>属性以确保其正确填充。</p>\n<p>上述测试的问题在于它不是测试行为，而是测试实现。以下代码行是实现详细信息。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">verify(mockedWebService.fetchProducts()).wasCalled()</code></pre>\n\n<p>这意味着，如果您决定重构代码并将<code>fetchProducts</code>函数重命名为<code>getProducts</code>，则您的测试将失败。这些类型的测试通常被称为脆弱测试，因为当内部实现发生变化时，它们会失败，即使API提供的功能&#x2F;行为仍然相同。这也是您的测试应该验证行为而不是实现的主要原因。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>你编写的代码是一种责任，包括测试。编写测试时，请关注测试的质量而不是数量。请记住，您不仅负责编写测试，还负责维护它们。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果使用的是 MVVM 模式，则 VM 可能具有逻辑。针对视图模型中包含的逻辑编写单元测试是完全可以的。</p></blockquote>\n<h2 id=\"端到端测试\"><a href=\"#端到端测试\" class=\"headerlink\" title=\"端到端测试\"></a>端到端测试</h2><p>在上一节中，您了解到，在大多数情况下，模拟并不能提供投资回报。使用模拟编写的测试通常最终会太脆弱，并且可能会因为重构而失败，即使行为保持不变，也会破坏所有依赖的测试。</p>\n<p>在编写测试时，人类心理学也起着重要作用。作为软件开发人员，我们希望快速反馈少量的多巴胺。接收快速反馈并没有错。快速反馈是单元测试的重要特征之一。不幸的是，有时我们走得太快，以至于没有意识到我们走错了路。我们开始表现得像一个测试成瘾者，他希望立即在测试旁边看到绿色复选标记。</p>\n<p>如前所述，添加测试实现细节而不是行为的测试不会为您的项目带来任何好处。从长远来看，它甚至可能对您不利，因为现在您将负责维护这些测试用例，并且每当实现细节发生变化时，即使功能保持不变，您的所有测试也会中断。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我并不是建议你不应该编写单元测试。单元测试在测试小型代码单元时非常有用。我建议你必须确保你测试的是代码的行为，而不是实现细节。这意味着，如果要为视图模型编写单元测试，则可以。</p></blockquote>\n<p>除了单元测试和集成测试之外，端到端测试最适合防止回归。一个好的端到端将测试一个完整的故事&#x2F;行为。您可以在下面找到端到端测试的实现。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">final class ProductTests: XCTestCase &#123;\n    \n    private var webservice: Webservice!\n    &#x2F;&#x2F; products\n    let products &#x3D; [Product(id: 1, title: &quot;Handmade Fresh Table&quot;),Product(id: 2, title: &quot;Durable Water Bottle&quot;)]\n    \n    override func setUp() &#123;\n        &#x2F;&#x2F; make sure the Webservice is using the TEST server endpoints and not PRODUCTION\n        webservice &#x3D; Webservice()\n        \n        &#x2F;&#x2F; add few products &#x2F;&#x2F; seeding the database\n        for product in products &#123;\n            await webservice.addProduct(product: product)\n        &#125;\n    &#125;\n    \n    func test_display_list_of_all_products() async &#123;\n        \n        let app &#x3D; XCUIApplication()\n        app.launch()\n        \n        let productList &#x3D; app.tables[&quot;productList&quot;]\n        \n        &#x2F;&#x2F; check if the item numbers is correct\n        XCTAssertEqual(productList.tables.cells.count, 2)\n        \n        &#x2F;&#x2F; check if the correct items are displayed\n        for(index, product) in products.enumerated() &#123;\n            let cell &#x3D; productList.cells.element(boundBy: index)\n            XCTAssertEqual(cell.staticTexts[&quot;productTitle&quot;].label, product.title)\n        &#125;\n        \n    &#125;\n    \n    override func tearDown() async throws &#123;\n        &#x2F;&#x2F; make sure to delete ALL records from the database so future test results are not influenced\n        await webservice.deleteProductById(productId: 1)\n        await webservice.deleteProductById(productId: 2)\n    &#125;\n    \n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>开发人员可以在其开发计算机上本地运行 E2E 测试。这将需要初始设置，例如测试框架、测试环境、依赖项（数据库、服务）。E2E 测试可能非常耗时，因此开发人员可能会选择运行 E2E 测试的频率低于单元测试或其他类型的测试。</p></blockquote>\n</blockquote>\n<p>E2E 测试比本节前面讨论的前面的测试慢，但它们较慢的主要原因是因为它们测试应用程序的所有层。E2E 测试是完整的测试，针对应用的特定行为。</p>\n<p>端到端测试还需要一些初始设置，以允许测试运行数据库迁移、插入种子数据、模拟用户界面事件，然后在测试完成后回滚更改。</p>\n<p>端到端测试不能替代域模型测试。您必须针对域模型编写测试，特别是如果您的应用是域密集型的并且包含大量业务规则。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>您必须在运行端到端测试的频率上找到适当的平衡。如果在每次签入代码时运行它，则持续集成服务器将始终在 100% 的时间内运行。如果每隔几天运行一次，则故障通知将比预期晚得多。请记住，您可以在计算机上本地运行 E2E 测试。获得所需结果后，CI 服务器可以在代码签入过程中运行所有测试。</p></blockquote>\n</blockquote>\n<h2 id=\"集成测试\"><a href=\"#集成测试\" class=\"headerlink\" title=\"集成测试\"></a>集成测试</h2><p>执行集成测试以确保两个不同的系统可以协同工作。这些系统可以是外部依赖项，如数据库或API，但也可以是同一系统中的不同模块。</p>\n<p>依赖项可分为托管依赖项和非托管依赖项。托管依赖项包括数据库、文件系统等。对于托管依赖项，使用真实实例而不是模拟实例非常重要。非托管依赖项包括SMTP服务器，支付网关等。对于非托管依赖项，请使用模拟来验证其行为。</p>\n<p>让我们查看用于用户登录操作的网络服务的示例集成测试。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">&#x2F;&#x2F; This test is generated by ChatGPT AI \nimport XCTest\n\nclass IntegrationTests: XCTestCase &#123;\n    func testLogin() &#123;\n        &#x2F;&#x2F; Set up the URL for the login endpoint\n        let url &#x3D; URL(string: &quot;https:&#x2F;&#x2F;api.example.com&#x2F;login&quot;)!\n\n        &#x2F;&#x2F; Create a URL request\n        var request &#x3D; URLRequest(url: url)\n        request.httpMethod &#x3D; &quot;POST&quot;\n        request.addValue(&quot;application&#x2F;json&quot;, forHTTPHeaderField: &quot;Content-Type&quot;)\n\n        &#x2F;&#x2F; Set the body of the request to a JSON object with the login credentials\n        let body &#x3D; [&quot;username&quot;: &quot;user123&quot;, &quot;password&quot;: &quot;password&quot;]\n        request.httpBody &#x3D; try! JSONSerialization.data(withJSONObject: body)\n\n        &#x2F;&#x2F; Create a URLSession and send the request\n        let session &#x3D; URLSession.shared\n        let task &#x3D; session.dataTask(with: request) &#123; data, response, error in\n            &#x2F;&#x2F; Make sure there is no error\n            XCTAssertNil(error)\n\n            &#x2F;&#x2F; Check the response status code\n            let httpResponse &#x3D; response as! HTTPURLResponse\n            XCTAssertEqual(httpResponse.statusCode, 200)\n\n            &#x2F;&#x2F; Check the response data\n            XCTAssertNotNil(data)\n            let responseBody &#x3D; try! JSONSerialization.jsonObject(with: data!, options: []) as! [String: Any]\n            XCTAssertEqual(responseBody[&quot;status&quot;], &quot;success&quot;)\n        &#125;\n        task.resume()\n    &#125;\n&#125;\n</code></pre>\n\n<p>上述集成测试可确保 HTTP 客户端层按预期工作。集成是在网络客户端和服务器之间进行的。客户端确保响应正确且有效，以便成功执行登录操作。</p>\n<p>非托管依赖项（如支付网关，SMTP客户端等）可以在集成测试期间模拟出来。对于托管依赖项，请使用具体的实现。</p>\n<h2 id=\"代码覆盖率\"><a href=\"#代码覆盖率\" class=\"headerlink\" title=\"代码覆盖率\"></a>代码覆盖率</h2><p>代码覆盖率是一个指标，用于计算测试中覆盖了多少代码。让我们举一个非常简单的例子。在下面的代码中，我们有一个 <code>BankAccount</code> 类，它由 <code>deposit</code> 和 <code>withdraw</code> 函数组成。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>请记住，在实际场景中，银行帐户不是作为计算器实现的。银行帐户记录在分类帐中，其中保留了所有财务交易。</p></blockquote>\n</blockquote>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">class BankAccount &#123;\n    \n    private(set) var balance: Double\n    \n    init(balance: Double) &#123;\n        self.balance &#x3D; balance\n    &#125;\n    \n    func deposit(_ amount: Double) &#123;\n        self.balance +&#x3D; amount\n    &#125;\n    \n    func withdraw(_ amount: Double) &#123;\n        self.balance -&#x3D; amount\n    &#125;\n    \n&#125;</code></pre>\n\n<p>银行账户的一个可能的测试是检查账户是否成功存款。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">final class BankAccountTests: XCTestCase &#123;\n    \n    func test_deposit_amount() &#123;\n        \n        let bankAccount &#x3D; BankAccount(balance: 0)\n        bankAccount.deposit(100)\n        XCTAssertEqual(100, bankAccount.balance)\n        \n    &#125;\n&#125;</code></pre>\n\n<p>如果这是我们测试套件中唯一的测试，那么我们的代码覆盖率不是 100%。这意味着并非所有路径&#x2F;函数都在测试中。这是真的，因为我们从未实现过 <code>withraw</code> 函数的测试。</p>\n<p>您可能想知道是否始终拥有 100% 的代码覆盖率。简单的答案是否定的。但这也取决于您正在处理的应用程序。如果你正在为NASA编写代码，它将负责火星上的着陆漫游车，那么你最好确保每一行都经过测试，并且你的代码覆盖率是100%。</p>\n<p>如果您正在为有助于调节心跳的起搏器设备实现应用程序，那么您最好确保您的代码覆盖率为 100%。一行丢失和未经测试的代码可能会导致某人的生活……按照字面。</p>\n<p>那么，理想的代码覆盖率是多少。这实际上取决于应用程序，但任何高于 70% 的数字都被认为是一个不错的代码覆盖率。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>在计算代码覆盖率时，请确保忽略第三方库&#x2F;框架，因为它们的代码覆盖率不是您的责任。</p></blockquote>\n</blockquote>\n<h2 id=\"单元测试、数据访问和文件访问\"><a href=\"#单元测试、数据访问和文件访问\" class=\"headerlink\" title=\"单元测试、数据访问和文件访问\"></a>单元测试、数据访问和文件访问</h2><p>与我交谈过的大多数开发人员都认为单元测试无法访问数据库或文件系统。<strong>这是不正确的，而且是完全错误的</strong>。单元测试可以访问数据库或文件系统。</p>\n<p>了解 <strong>单元测试是隔离，而不是被测试的东西</strong> 非常重要。这一点非常重要，我将再次重复一遍。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>Unit test is the isolation, not the thing under test</p></blockquote>\n</blockquote>\n<p>在单元测试期间不访问数据库或文件系统的正当原因之一是，测试可能会留下数据，这可能会导致其他测试以意外的方式运行。解决方案是确保在每次测试完成后始终将数据库恢复到初始状态，以便将来的测试获得一个干净的数据库，而没有任何副作用。</p>\n<p>某些框架还允许您构造内存数据库。例如，Core Data 默认使用 SQLite，但可以将其配置为使用内存数据库，如下所示：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">storeDescription.type &#x3D; NSInMemoryStoreType</code></pre>\n\n<p>内存数据库具有多种优势，包括：</p>\n<ul>\n<li>No removal of test data</li>\n<li>Run faster</li>\n<li>Can be initialized before each test run</li>\n</ul>\n<p>即使认为这些好处看起来很吸引人，我个人也不建议使用内存数据库进行测试。主要原因是内存中数据库并不代表实际的生产环境。这意味着您在测试期间可能不会遇到相同的问题，在使用实际数据库时可能会遇到这些问题。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>确保测试环境和生产环境在本质上几乎相同始终是一个好主意。</p></blockquote>\n</blockquote>\n<h2 id=\"测试视图模型不验证用户界面\"><a href=\"#测试视图模型不验证用户界面\" class=\"headerlink\" title=\"测试视图模型不验证用户界面\"></a>测试视图模型不验证用户界面</h2><p>几周前，我与另一位开发人员进行了讨论，他提到他们通过 SwiftUI 中的视图模型测试他们的用户界面。我不确定他的意思，所以我检查了源代码，发现他们对他们的视图模型有很多单元测试，他们只是假设如果视图模型测试通过，那么用户界面将自动工作。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请记住，我并不是建议你不应该为视图模型编写单元测试。我只是说您的视图模型单元测试不会验证用户界面是否按预期工作。</p></blockquote>\n<p>让我们举一个非常简单的构建计数器应用程序的示例。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">class CounterViewModel: ObservableObject &#123;\n    \n    @Published var count: Int &#x3D; 0\n    \n    func increment() &#123;\n        count +&#x3D; 1\n    &#125;\n&#125;\n\nstruct ContentView: View &#123;\n    \n    @StateObject private var counterVM &#x3D; CounterViewModel()\n    \n    var body: some View &#123;\n        VStack &#123;\n            Text(&quot;\\(counterVM.count)&quot;)\n            Button(&quot;Increment&quot;) &#123;\n                counterVM.increment()\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>按下递增按钮时，我们在 CounterViewModel 实例上调用递增函数并递增计数。由于 count 属性是用@Published属性包装器修饰的，因此它会通知视图重新计算并最终重新呈现。</p>\n<p>为了测试计数是否递增并显示在屏幕上，编写了以下单元测试。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">import XCTest\n@testable import Learn\n\nfinal class LearnTests: XCTestCase &#123;\n\n    func test_user_updated_count() &#123;\n        let vm &#x3D; CounterViewModel()\n        vm.increment()\n        XCTAssertEqual(1, vm.count)\n    &#125;\n\n&#125;</code></pre>\n\n<p>这是一个完全有效的单元测试，但它不会验证计数是否已更新并显示在屏幕上。让我再重复一遍。<strong>视图模型单元测试不会验证计数是否成功显示在屏幕上。这是一个单元测试，而不是 UI 测试。</strong></p>\n<p>若要证明视图模型单元测试不验证用户界面元素，只需从 ContentView 中删除按钮视图甚至文本视图。单元测试仍将通过。这可能会让您错误地相信您的界面正在工作。</p>\n<p>验证用户界面是否按预期工作的更好方法是实现 UI 测试。看看下面的实现。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">final class LearnUITests: XCTestCase &#123;\n\n    func testExample() throws &#123;\n        &#x2F;&#x2F; UI tests must launch the application that they test.\n        let app &#x3D; XCUIApplication()\n        app.launch()\n\n        app.buttons[&quot;incrementButton&quot;].tap()\n        XCTAssertEqual(&quot;1&quot;, app.staticTexts[&quot;countLabel&quot;].label)\n    &#125;\n&#125;</code></pre>\n\n<p>此测试将在模拟器中启动应用，并验证按下按钮时标签是否正确更新。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>根据要测试的行为的复杂性，您甚至可能不需要编写用户界面测试。我发现大多数用户界面都可以使用 Xcode 预览快速测试。</p></blockquote>\n<p>那么什么是正确的平衡呢？与 UI 测试相比，视图模型应有多少单元测试。</p>\n<p>答案是<strong>视情况而定</strong>。如果您的视图模型中有复杂的逻辑，那么单元测试会有所帮助。UITest （E2E） 测试提供了针对回归的最佳防御。对于每个故事，您可以编写几个长快乐路径用户界面测试和几个边缘情况。再一次，这真的取决于故事和与故事相关的复杂性。</p>\n<p>最后，<a href=\"https://azamsharp.com/2023/02/15/testing-is-about-confidence.html\">测试关乎信心</a>。有时您可以通过编写较少或不编写测试来获得信心，而其他时候您必须编写更多测试才能达到置信度。</p>\n<h2 id=\"理想测试\"><a href=\"#理想测试\" class=\"headerlink\" title=\"理想测试\"></a>理想测试</h2><p>我们讨论了几种不同类型的测试。您可能想知道编写哪种测试是最好的。什么是理想的测试？</p>\n<p>不幸的是，没有理想的测试。这完全取决于您的项目和要求。如果您的项目是域繁重的，那么您应该进行更多的域级别测试。如果你的项目是UI繁重的，那么你应该有端到端的测试。最后，如果您的项目与托管和非托管依赖项集成，则集成测试将更适合这些方案。</p>\n<p>请记住测试模块公开的公共 API，而不是实现细节。通过这种方式，您可以编写有用的质量测试，这也将帮助您捕获错误。</p>\n<p>不要创建协议&#x2F;接口&#x2F;合约，其目的只是为了嘲笑。如果协议由单个具体实现组成，则使用具体实现并删除接口&#x2F;合约。体系结构应基于当前的业务需求，而不是基于可能永远不会发生的假设方案。记住YAGNI（你不需要它）。代码少比代码多好。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>应用程序架构是一个复杂的主题，最终项目的最佳架构取决于许多因素。这些因素可能包括项目的规模和复杂性、团队的技能和经验、项目的目标和要求。</p>\n<p>最终，成功的应用程序架构的关键是选择适合项目独特需求的模式，并随着项目的发展不断评估和调整架构。</p>\n<p>通过投入时间和资源来设计周到且有效的应用程序架构，团队可以确保其代码库具有可维护性、可扩展性和灵活性，足以适应不断变化的需求和技术趋势。</p>\n<h2 id=\"原文链接\"><a href=\"#原文链接\" class=\"headerlink\" title=\"原文链接\"></a>原文链接</h2><ul>\n<li><a href=\"https://azamsharp.com/2023/02/28/building-large-scale-apps-swiftui.html\">Building Large-Scale Apps with SwiftUI: A Guide to Modular Architecture</a></li>\n</ul>\n","feature":true,"text":"软件架构始终是一个热门争论的话题，特别是当有这么多不同的选择时。在过去的 8-12 个月里，作者一直在尝试使用 MV 模式来构建客户端&#x2F;服务器应用程序，并在作者最初的文章中写到了这一点 SwiftUI 架构 - MV 模式方法的完整指南。在本文中，作者将讨论如何将 MV...","link":"","photos":[],"count_time":{"symbolsCount":"43k","symbolsTime":"39 mins."},"categories":[{"name":"Swift Learning","slug":"Swift-Learning","count":1,"path":"api/categories/Swift-Learning.json"}],"tags":[{"name":"SwiftUI","slug":"SwiftUI","count":1,"path":"api/tags/SwiftUI.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">模块化架构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%A7%A3MV%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">理解MV模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%B8%AA%E8%81%9A%E5%90%88%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">多个聚合模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%86%E5%9B%BE%E7%9A%84%E7%89%B9%E5%AE%9A%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">视图的特定逻辑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%8F%E5%B9%95%E4%B8%8E%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">屏幕与视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">验证</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">显示错误</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%BB%84%E8%A7%86%E5%9B%BE%E4%B8%8E%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">分组视图与事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">路由</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E9%9D%9E%E6%89%80%E6%9C%89%E6%B5%8B%E8%AF%95%E9%83%BD%E7%AD%89%E4%BA%8E\"><span class=\"toc-text\">并非所有测试都等于</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E8%A1%8C%E4%B8%BA%E8%80%8C%E4%B8%8D%E6%98%AF%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">测试行为而不是实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">端到端测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">集成测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87\"><span class=\"toc-text\">代码覆盖率</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%92%8C%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">单元测试、数据访问和文件访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E8%A7%86%E5%9B%BE%E6%A8%A1%E5%9E%8B%E4%B8%8D%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2\"><span class=\"toc-text\">测试视图模型不验证用户界面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%90%86%E6%83%B3%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">理想测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">原文链接</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"【网文转帖】我什么时候可以称自己为高级开发人员？","uid":"a624b9d2b57fce741977b91273d0a5a2","slug":"2023-05-18-when-can-i-call-myself-a-senior-developer","date":"2023-05-19T09:57:19.845Z","updated":"2023-05-19T09:57:19.845Z","comments":true,"path":"api/articles/2023-05-18-when-can-i-call-myself-a-senior-developer.json","keywords":null,"cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/senior-developer.jpg","text":"Renan Benatti Dias目前处于高级开放岗位，但是在此之前他在中级开发岗位停留了很长时间。在此期间，他思考了成为高级开发人员需要什么，如何准备以及如果掌握了所需技术能力和敢于承担责任后，最终该如何做好职业规划等。文中，他概述了高级开发人员所需的必要技术能力和经验等，并...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":10,"path":"api/categories/技术人生.json"}],"tags":[{"name":"读书笔记","slug":"读书笔记","count":2,"path":"api/tags/读书笔记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},"next_post":{"title":"《大道至简---软件工程实践者的思想》  读书笔记","uid":"5ea20968d8e7130fecf289d5412e680c","slug":"2022-10-29-dadaozhijian","date":"2023-05-19T09:57:19.845Z","updated":"2023-05-19T09:57:19.845Z","comments":true,"path":"api/articles/2022-10-29-dadaozhijian.json","keywords":null,"cover":"https://raw.githubusercontent.com/zycslog/assets-pro/main/ryosuke-nasu--Pn_23L3OEs-unsplash.jpg","text":"内容提要本书提出了审视软件工程的全新视角和软件工程的 体系模型(EHM，软件工程层状模型)。本书用非工 程的方式重新解析软件工程现象，全面、细致而深 刻地分析了工程中各个环节的由来、价值及其内在 关系，综合论述开发、工程二者的现状。全书语言 轻快，可读性强，薄且有味。 本书作者周...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"技术人生","slug":"技术人生","count":10,"path":"api/categories/技术人生.json"}],"tags":[{"name":"读书笔记","slug":"读书笔记","count":2,"path":"api/tags/读书笔记.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true}}