{"title":"\\#15\\ 堆数据结构（The Heap Data Structure）","uid":"4a00ba60db357b4d5652c54beb6b2091","slug":"2020-01-10-Data-Structures-&-Algorithms-in-Swift-15","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2020-01-10-Data-Structures-&-Algorithms-in-Swift-15.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/15/cover.jpg","content":"<p>想必抓娃娃机如今没有人不知道其实什么了，抓娃娃机的爪子总是那么的难以控制，总是看起来容易的机会却难以如愿。抓抓机的爪子其实就工作在一个堆数据结构之上，爪子每次抓的几乎都是那边一堆玩具最上面的那一个，只有这样机会才会更大一些。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/zhuawawa.png\"></p>\n<p>在本文中将学习关于堆（Heap）的基础知识，包含如何创建一个堆数据结构，如果从堆数据结构中获取最大和最小元素等。</p>\n<h2 id=\"什么是堆？\"><a href=\"#什么是堆？\" class=\"headerlink\" title=\"什么是堆？\"></a>什么是堆？</h2><p>堆是一个使用数组构建的完整二叉树，也称为二叉堆。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里的堆和内存堆是完全不同的一个概念，需要区分。在计算机科学中，经常有一些术语被重复使用，但是涵义却有所不同，本文不会对内存堆进行阐述。</p></blockquote>\n<p>堆有两种类型：</p>\n<ol>\n<li><strong>最大堆：</strong>堆中元素越大，其优先级越高；</li>\n<li><strong>最小堆：</strong>堆中元素越小，其优先级越高。</li>\n</ol>\n<h2 id=\"堆属性\"><a href=\"#堆属性\" class=\"headerlink\" title=\"堆属性\"></a>堆属性</h2><p>一个堆结构，有着必须始终满足的重要特征，称之为<strong>堆不变式</strong>或<strong>堆属性</strong>。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/max-min-heap.png\"></p>\n<p>在最大堆中，父节点必须包含一个大于等于其子节点的值，根节点包含最大的值。</p>\n<p>在最小堆中，父节点必须包含一个小于等于其子节点的值，根节点包含最小的值。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/level-heap.png\"></p>\n<p>另一个堆的必须属性是<strong>堆是一个完全二叉树</strong>。意味着树除了叶子节点层之外，其他每一层都必须被填充，有点类似某些闯关类游戏，本关没有完成，则下一关无法开始。</p>\n<h2 id=\"堆的应用\"><a href=\"#堆的应用\" class=\"headerlink\" title=\"堆的应用\"></a>堆的应用</h2><p>堆在很多场景下都被广泛的应用，例如：</p>\n<ul>\n<li>计算集合中最小元素和最大元素；</li>\n<li>堆排序</li>\n<li>优先级队列构造</li>\n<li>构造图算法，例如普林演算法 (Prim’s algorithm)或狄克斯特拉算法（Dijkstra’s algorithm）等。</li>\n</ul>\n<h2 id=\"常用的堆操作\"><a href=\"#常用的堆操作\" class=\"headerlink\" title=\"常用的堆操作\"></a>常用的堆操作</h2><p>首先定义Heap的数据结构：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">struct Heap&lt;Element: Equatable&gt; &#123;\n    var elements: [Element] &#x3D; []\n    let sort: (Element, Element) -&gt; Bool\n    \n    init(sort: @escaping (Element, Element) -&gt; Bool) &#123;\n        self.sort &#x3D; sort\n    &#125;\n&#125;</code></pre>\n\n<p>在Heap的数据结构中，包含一个数组<em>elemtns</em>用来保存堆元素，一个<em>sort</em>函数定义堆中集合如何排序的排序函数。构造器接收一个适当的参数，后续用来构建最大和最小堆。</p>\n<h2 id=\"如何表示堆？\"><a href=\"#如何表示堆？\" class=\"headerlink\" title=\"如何表示堆？\"></a>如何表示堆？</h2><p>树型结构中的节点能够保存值和其子节点的索引，二叉树同时保存左子树和右子树的引用。堆本质上是一颗二叉树，但是可以使用简单的数组进行表示。利用数组表示堆的好处是良好的时间复杂度和空间复杂度，因为这样堆中的元素保存在内存里，堆元素的交换等能够有良好的的性能表现，与使用二叉树来表示堆，使用数组更加的容易。接下来了解使用数组如何表示一个堆。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/array-heap-tree.png\"></p>\n<p>为了使用数组表示堆，只需要从左至右一层一层迭代元素即可。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/traversal-eg.png\"></p>\n<p>当遍历进入高层级的时候，所需要遍历节点数可能会成倍的增加。</p>\n<p>现在可以轻松访问堆中的任何节点。您可以将这一点与访问数组中元素的方式进行比较：无需向下遍历左分支或右分支，只需使用简单公式访问数组中的节点即可。</p>\n<p>例如给定一个以零为开始索引的 <em>i</em> 对应的节点：</p>\n<ul>\n<li>当前节点的左子树能够使用 <em>2i + 1</em> 进行访问；</li>\n<li>当前节点的右子树能够使用 <em>2i + 2</em> 进行访问；</li>\n</ul>\n<p>如下图：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/index-math.png\"></p>\n<p>如果需要访问节点的父节点，依然可以使用索引值 <em>i</em> 求解，例如在索引为 <em>i</em> 的节点上，其父节点索引可通过 *floor( (i - 1) &#x2F; 2)*求得。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在二叉树中，左子树和右子树的节点搜索需要O(log n)时间复杂度，但是通过数组的方式获取的时候，时间复杂度仅为O(1)。</p></blockquote>\n<p>了解了堆的知识后，即可继续完善堆的数据结构，并为其添加一些方便的方法：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">var isEmpty: Bool &#123;\n    return elements.isEmpty\n&#125;\n\nvar count: Int &#123;\n    return elements.count\n&#125;\n\nfunc peek() -&gt; Element? &#123;\n    return elements.first\n&#125;\n\nfunc leftChildIndex(ofParentAt index: Int) -&gt; Int &#123;\n    return (2 * index) + 1\n&#125;\n\nfunc rightChildIndex(ofParentAt index: Int) -&gt; Int &#123;\n    return (2 * index) + 2\n&#125;\n\nfunc parentIndex(ofChildAt index: Int) -&gt; Int &#123;\n    return (index - 1) &#x2F; 2\n&#125;</code></pre>\n\n<h2 id=\"从堆中移除元素\"><a href=\"#从堆中移除元素\" class=\"headerlink\" title=\"从堆中移除元素\"></a>从堆中移除元素</h2><p>最基本的元素节点移除操作是移除根节点，例如下图所示的移除最大堆中的根节点10：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/remove-max-heap.png\"></p>\n<p>此时，移除操作将移除位于根节点的集合最大值。首先要使用堆中最末尾的元素和根节点进行交换，一旦交换了元素，就可以删除位于叶子节点上的需要删除的元素了。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/delete-leaf-node.png\"></p>\n<p>但是，删除后的堆还是最大堆结构么？需要注意的是，最大堆的原则或者规则是每一个子节点的值都小于或等于父节点的值，一旦不符合这个规则，则需要进行节点的<strong>sift down</strong>调整。（最大堆调整算法称为<strong>sift down</strong>，最小堆调整算法称为** sift up**）</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/sift-down.png\"></p>\n<p>针对上图所示，<strong>sift down</strong>调整的方法是，获取根节点元素3，判断和其左子节点和右子节点的大小，如果左子节点的值大于当前节点，则进行节点的交换，如果左子节点和右子节点均大于该值，则使用子节点中大的那个值和当前节点进行交换。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/sift-down-2.png\"></p>\n<p>继续使用<strong>sift down</strong>调整法，调整节点，直到所有的节点满足最大堆的规则。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/sift-down-done.png\"></p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">mutating func remove() -&gt; Element? &#123;\n    guard !isEmpty else &#123;\n        return nil\n    &#125;\n    \n    elements.swapAt(0, count - 1)\n    \n    defer &#123;\n        siftSown(from: 0)\n    &#125;\n    return elements.removeLast()\n&#125;</code></pre>\n\n<ul>\n<li>首先检查堆是否为空，如果为空，则返回<em>nil</em>；</li>\n<li>交换根节点和堆中最后的元素位置；</li>\n<li>移除集合中最后一个元素并返回该元素（最后一个元素不是最大值就是最小值）；</li>\n<li>移除后，堆可能不符合最大堆或最小堆的原则，需要继续采用siftDown或者siftUp方法进行调整，直到符合堆的规则。</li>\n</ul>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">mutating func siftSown(from index: Int) &#123;\n    var parent &#x3D; index\n    while true &#123;\n        let left &#x3D; leftChildIndex(ofParentAt: parent)\n        let right &#x3D; rightChildIndex(ofParentAt: parent)\n        var candidate &#x3D; parent\n        \n        if left &lt; count &amp;&amp; sort(elements[left], elements[candidate]) &#123;\n            candidate &#x3D; left\n        &#125;\n        if right &lt; count &amp;&amp; sort(elements[right], elements[candidate]) &#123;\n            candidate &#x3D; right\n        &#125;\n        if candidate &#x3D;&#x3D; parent &#123;\n            return\n        &#125;\n        elements.swapAt(parent, candidate)\n        parent &#x3D; candidate\n    &#125;\n&#125;</code></pre>\n\n<p>**siftDown(from:)**接受任意的索引，并将其视为根节点，该方法的工作原理是：</p>\n<ol>\n<li>临时保存索引到变量<em>parent</em>；</li>\n<li>一直进行sifting操作，直到return（while true）；</li>\n<li>获取<em>parent</em>索引所在节点的左节点和右节点对应的索引；</li>\n<li>使用临时变量<em>candidate</em>追踪和父节点进行交换的节点索引；</li>\n<li>如果是左节点，并且左节点相比父节点有更高的优先级，则<em>candidate</em>为左节点；</li>\n<li>如果是右节点，并且右节点相比父节点有更高的优先级，则<em>candidate</em>为右节点；</li>\n<li>如果<em>candidate</em>依然是<em>parent</em>，说明已经调整到末尾，再无sifting的必要了；</li>\n<li>一轮sifting结束时，重新设定parent为候选的<em>candidate</em>，进行下一轮的sifting。</li>\n</ol>\n<h2 id=\"向堆中插入元素\"><a href=\"#向堆中插入元素\" class=\"headerlink\" title=\"向堆中插入元素\"></a>向堆中插入元素</h2><p>假设需要向如下的堆中插入元素7：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/insert-origin.png\"></p>\n<p>首先将待插入的元素添加到堆的末端：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/insert-end.png\"></p>\n<p>之后，检查最大堆的堆属性。和<em>siftdown</em>不同的是，此时使用<em>siftup</em>方法，工作原理类似于<em>siftdown</em>，通过比较当前节点和其父节点进行节点的交换。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/siftup.png\"></p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/siftup-done.png\"></p>\n<h3 id=\"算法实现-1\"><a href=\"#算法实现-1\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">extension Heap &#123;\n    mutating func insert(_ element: Element) &#123;\n        elements.append(element)\n        siftUp(from: elements.count - 1)\n    &#125;\n    \n    mutating func siftUp(from index: Int) &#123;\n        var child &#x3D; index\n        var parent &#x3D; parentIndex(ofChildAt: child)\n        while child &gt; 0 &amp;&amp; sort(elements[child], elements[parent]) &#123;\n            elements.swapAt(child, parent)\n            child &#x3D; parent\n            parent &#x3D; parentIndex(ofChildAt: child)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>插入算法相较于移除算法，更为直接：</p>\n<ul>\n<li>首先直接向数组中追加待插入的元素，之后进行 <strong>sift up</strong> 调整；</li>\n<li><em>siftUp</em>比较当前节点和其父节点，并进行条件进行交换，直到该节点有一个比其父节点更高的优先级为止。</li>\n</ul>\n<p>在从堆中移除元素的时候，删除算法只是移除了堆的根节点，但是非根节点的元素移除可能更加的符合实际的场景。</p>\n<h2 id=\"从任意索引中删除\"><a href=\"#从任意索引中删除\" class=\"headerlink\" title=\"从任意索引中删除\"></a>从任意索引中删除</h2><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">extension Heap &#123;\n    mutating func remove(at index: Int) -&gt; Element? &#123;\n        guard index &lt; elements.count else &#123;\n            return nil\n        &#125;\n        \n        if index &#x3D;&#x3D; elements.count - 1 &#123;\n            return elements.removeLast()\n        &#125; else &#123;\n            elements.swapAt(index, elements.count - 1)\n            defer &#123;\n                siftSown(from: index)\n                siftUp(from: index)\n            &#125;\n            return elements.removeLast()\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>检查待删除的索引是否在集合的边界之内，如果不在，返回<em>nil</em>；</li>\n<li>如果删除的是堆中最末尾的元素，则直接进行删除，类似<em>remove</em>；</li>\n<li>如果是非末尾的元素，首先交换待删除索引和末尾索引；<ul>\n<li>之后删除末尾的元素，并返回该元素</li>\n<li>最后，调用<em>siftDown</em>和<em>siftUp</em>进行堆节点调整</li>\n</ul>\n</li>\n</ul>\n<p>但是为什么要同时调用<em>siftDown</em>和<em>siftUp</em>呢？</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/sift-both.png\"></p>\n<p>例如上图所示的堆中，想要删除元素5，首先交换5和最末尾的元素8，之后删除元素5。此时需要使用<em>sift up</em>对最大堆属性进行调整。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/sift-swap.png\"></p>\n<p>例如上图，想要删除元素7，需要和末尾元素1进行交换后删除，删除后，需要使用<em>sift down</em>进行调整。</p>\n<h2 id=\"在堆中搜索元素\"><a href=\"#在堆中搜索元素\" class=\"headerlink\" title=\"在堆中搜索元素\"></a>在堆中搜索元素</h2><p>在删除元素之前，首先要通过索引查找对应的元素，此时需要进行堆元素的搜索。不过，堆本身并没有设计快速的搜索，对于一颗二叉搜索树来说，搜索元素有O(log n)的时间复杂度，但是对于使用数组构建的堆，数组中的元素进行排序确实不同于二叉搜索树的，此时并不能使用二分查找。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在堆中搜索元素最差的情况下有O(n)的时间复杂度，因此在搜索的时候，可能要检查数组中的每一个元素。</p></blockquote>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">extension Heap &#123;\n    func index(of element: Element, startingAt i: Int) -&gt; Int? &#123;\n        if i &gt;&#x3D; count &#123;\n            return nil\n        &#125;\n        if sort(element, elements[i]) &#123;\n            return nil\n        &#125;\n        if element &#x3D;&#x3D; elements[i] &#123;\n            return i\n        &#125;\n        if let j &#x3D; index(of: element, startingAt: leftChildIndex(ofParentAt: i)) &#123;\n            return j\n        &#125;\n        if let j &#x3D; index(of: element, startingAt: rightChildIndex(ofParentAt: i)) &#123;\n            return j\n        &#125;\n        return nil\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>如果索引i大于或者等于堆元素个数，则搜索失败，返回<em>nil</em>；</li>\n<li>判断当前元素是否比索引i所对应的元素有更高的优先级，如果是，则所搜索的元素不可能在堆的更低的索引；</li>\n<li>如果所搜索的元素和索引i所对应的元素相等，则待删除元素所在的索引就是i；</li>\n<li>递归的搜索左子树从索引i开始的元素；</li>\n<li>递归的搜索右子树从索引i开始的元素；</li>\n<li>如果上述过程全部搜索失败，则整个搜索失败。</li>\n</ul>\n<h2 id=\"构建堆\"><a href=\"#构建堆\" class=\"headerlink\" title=\"构建堆\"></a>构建堆</h2><p>至此，已经有足够的工具针对堆进行各类操作了，但是还有一个问题就是，如果使用已存在的数组构建一个堆？在开始定义堆数据结构的时候，我们使用了一个非常简单的构造器，对其进行改造如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">init(sort: @escaping (Element, Element) -&gt; Bool, elements: [Element] &#x3D; []) &#123;\n    self.sort &#x3D; sort\n    self.elements &#x3D; elements\n    \n    if !elements.isEmpty &#123;\n        for i in stride(from: elements.count &#x2F; 2 - 1, through: 0, by: -1) &#123;\n            siftSown(from: i)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>构造器现在能够接收一个额外的参数，如果传入一个非空的数组，将会使用该数组构建堆，为了使得堆满足堆属性，从第一个非叶节点开始向后循环数组，然后筛选所有父节点。您只遍历了一半的元素，因为筛选叶节点没有点，只有父节点。</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/build-heap-with-array.png\"></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">example(of: &quot;building a heap with array&quot;) &#123;\n    var heap &#x3D; Heap(sort: &gt;, elements: [1, 12, 3, 4, 1, 6, 8, 7])\n    \n    while !heap.isEmpty  &#123;\n        print(heap.remove()!)\n    &#125;\n&#125;\n\n&#x2F;*\n---Example of building a heap with array---\n12\n8\n7\n6\n4\n3\n1\n1\n*&#x2F;</code></pre>\n\n<h2 id=\"关键点总结\"><a href=\"#关键点总结\" class=\"headerlink\" title=\"关键点总结\"></a>关键点总结</h2><ul>\n<li>对于堆的各类操作，有着不同的时间复杂度，具体如下：<br>  <img src=\"/images/Data-Structures-&-Algorithms-in-Swift/15/heap-time.png\"></li>\n<li>堆数据结构非常适合维护优先级最高或最低优先级的元素。</li>\n<li>每次从堆中插入或删除项时，都必须检查它是否符合优先级的规则。</li>\n</ul>\n","text":"想必抓娃娃机如今没有人不知道其实什么了，抓娃娃机的爪子总是那么的难以控制，总是看起来容易的机会却难以如愿。抓抓机的爪子其实就工作在一个堆数据结构之上，爪子每次抓的几乎都是那边一堆玩具最上面的那一个，只有这样机会才会更大一些。 在本文中将学习关于堆（Heap）的基础知识，包含如何创...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86%EF%BC%9F\"><span class=\"toc-text\">什么是堆？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">堆属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">堆的应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%A0%86%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">常用的堆操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E5%A0%86%EF%BC%9F\"><span class=\"toc-text\">如何表示堆？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%A0%86%E4%B8%AD%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">从堆中移除元素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">算法实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%91%E5%A0%86%E4%B8%AD%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">向堆中插入元素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">算法实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E4%BB%BB%E6%84%8F%E7%B4%A2%E5%BC%95%E4%B8%AD%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">从任意索引中删除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%A0%86%E4%B8%AD%E6%90%9C%E7%B4%A2%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">在堆中搜索元素</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E5%A0%86\"><span class=\"toc-text\">构建堆</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E7%82%B9%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">关键点总结</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"\\#14\\ 二分查找（Binary Search）","uid":"193dbb4158d425c4c3d00532baa1c670","slug":"2020-01-07-Data-Structures-&-Algorithms-in-Swift-14","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2020-01-07-Data-Structures-&-Algorithms-in-Swift-14.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/14/cover.jpg","text":"二分查找是时间复杂度为O(log n)的搜索算法中较为高效的算法之一，这一点和在平衡的二叉搜索树中搜索元素的时间复杂度相当。在使用二分查找之前，有两个条件需要预先满足： 集合必须是在恒定的时间内执行索引操作，意味着集合必须是RandomAccessCollection类型的； 集...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"\\#16\\ 优先级队列","uid":"5d749126a5c6ef9bea973d557d834975","slug":"2020-01-12-Data-Structures-&-Algorithms-in-Swift-16","date":"2023-05-22T03:17:40.071Z","updated":"2023-05-22T03:17:40.071Z","comments":true,"path":"api/articles/2020-01-12-Data-Structures-&-Algorithms-in-Swift-16.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/16/cover.png","text":"队列是一种先进先出（FIFO）的数据结构，而优先级队列是另一种队列结构，其可替代队列的先进先出顺序，该队列中的元素有着优先级的顺序。一个优先级队列也可以是： 最大优先级队列：队列中最前面的元素具有最高优先级； 最小优先级队列：队列中最前面的元素具有最低优先级。 当需要在给定的元素...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}