{"title":"\\#3\\ 关于时间复杂度和大O符号","uid":"ed1a650be4c536b8ed544197809a0599","slug":"2019-12-02-Data-Structures-&-Algorithms-in-Swift-03","date":"2023-05-22T03:17:40.067Z","updated":"2023-05-22T03:17:40.067Z","comments":true,"path":"api/articles/2019-12-02-Data-Structures-&-Algorithms-in-Swift-03.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/3/cover.jpg","content":"<p>算法复杂度的衡量问题在软件开发的诞生早起就已经被提出来，并且有多个方面具体的问题。例如，从系统的架构来看，可伸缩性的架构设计和算法实现，应用程序是如何在数据特征增加的情况下被合理有效地激活的；从数据库的角度来看，数据库的处理能力是否能够应对越来越多的数据和用户行为等。</p>\n<p>对于算法而言，可伸缩性指的是算法是否能够随着输入体量的变化，算法在执行时间和内存使用上的变现。</p>\n<p>当你面对的是小体量的数据输入时，算法可能运行良好，执行快速，内存使用良好。但是随着数据输入体量的增加，算法的表现可能越来越糟糕，但是具体有多糟糕呢？掌握如何衡量一个算法的优劣是程序开发者的一项重要的技能。</p>\n<p>在本篇内容中，我们将从两个角度 — 时间维度和内存使用维度 观察算法的<a href=\"https://en.wikipedia.org/wiki/Big_O_notation\">大O符号</a>问题。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>对于小体量的数据来说，大多数的既定算法能够即快速且高效地在目标设备环境中执行，但是随着数据量的增大、业务逻辑的变化，算法的表现可能会越来越差。<strong>时间复杂度（Time complexity）</strong>是衡量一个算法随着输入大小的改变，其运行耗时的衡量标准，时间复杂度本质上是一个函数，一个关于输入大小和耗时之间的相关性模型。</p>\n<h3 id=\"恒定时间复杂度\"><a href=\"#恒定时间复杂度\" class=\"headerlink\" title=\"恒定时间复杂度\"></a>恒定时间复杂度</h3><p><strong>恒定时间</strong>复杂度指的是，算法的执行耗时并不会随着输入体量的改变而改变。例如：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func checkFirst(names: [String]) &#123;\n    if let first &#x3D; names.first &#123;\n        print(first)\n    &#125;else&#123;\n        print(&quot;no names&quot;)\n    &#125;\n&#125;</code></pre>\n\n<p>对于上述函数来说，输入<code>names</code>的大小并不会影响该函数的执行时间，无论<code>names</code>中有10个元素还是10万个元素，该函数仅仅检查数组中的第一个元素。对于恒定时间复杂度的算法来说，其时间复杂度可视化后如下图：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/3/contant-time.png\"></p>\n<p>在程序员的时间，通常使用<a href=\"https://en.wikipedia.org/wiki/Big_O_notation\">大O符号</a>来表示一个算法的时间复杂度，对于恒定时间复杂度的算法，表示为**O(1)**。</p>\n<h3 id=\"线性时间复杂度\"><a href=\"#线性时间复杂度\" class=\"headerlink\" title=\"线性时间复杂度\"></a>线性时间复杂度</h3><p>假设有如下的一个函数：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func printNames(names: [String]) &#123;\n    for name in names &#123;\n        print(name)\n    &#125;\n&#125;</code></pre>\n\n<p>该函数打印字符串数组中的每一个元素。随着输入体量的增加，<code>for</code>循环的次数也随之增加，并且两者之间呈现线性的关系。线性时间复杂度的图像可表示为：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/3/linear-time.png\"></p>\n<p>线性时间复杂度相对较为简单且易于理解。当输入的数据体量增大时，算法的执行耗时会同时增加，这也是其图像是一条直线的原因。对于线性时间复杂度的算法，大O符号表示为**O(n)**。</p>\n<h3 id=\"二次时间复杂度\"><a href=\"#二次时间复杂度\" class=\"headerlink\" title=\"二次时间复杂度\"></a>二次时间复杂度</h3><p><strong>二次时间复杂度</strong>通常也被称为<strong>n平方时间复杂度</strong>，是指算法的执行耗时随着输入体量的增加而呈现二次方。例如下方示例代码：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func printNames(names: [String]) &#123;\n    for _ in names &#123;\n        for name in names &#123;\n            print(name)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>上述示例代码的耗时是数组遍历中再次对数组进行全量遍历的时间总和。如果原始数组中有10个元素，则会打印10个元素10次，总共100次打印操作。</p>\n<p>如果输入增加一个单位，则上述打印操作需要执行 11 * 11 次，即总共121次。可视化后的图像如下：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/3/quadratic-time.png\"></p>\n<p>使用大O符号表示为**O(n^2)**。</p>\n<h3 id=\"对数时间复杂度\"><a href=\"#对数时间复杂度\" class=\"headerlink\" title=\"对数时间复杂度\"></a>对数时间复杂度</h3><p>到目前为止，已经了解了线性和二次时间复杂性，其中输入的每个元素至少检查一次。但是，在某些情况下，只需要检查输入的子集，从而加快运行速度。</p>\n<p>属于此类别的时间复杂性的算法是可以通过对输入数据进行一些假设来利用一些快捷方式的算法。例如，如果您有一个已排序的整数数组，那么查找是否存在特定值的最快方法是什么？</p>\n<p>一个普遍的解决方案是从头到尾检查数组，在得出结论之前检查每个元素，由于您检查每个元素一次，这将是一个 <strong>O（n）</strong> 算法，线性时间相当不错，但你可以做得更好，由于输入数组已排序，因此可以进行优化。例如以下代码：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">let numbers &#x3D; [1, 3, 56, 66, 68, 80, 99, 105, 450]\n\nfunc naiveContains(_ value: Int, in array: [Int]) -&gt; Bool &#123;\n    for element in array &#123;\n        if element &#x3D;&#x3D; value &#123;\n            return true\n        &#125;\n    &#125;\n    return false\n&#125;</code></pre>\n\n<p>如果你检查458是否在上述数组中的时候，算法将会遍历数组中的每一个元素。假设数组是已经排序好的，你可以尝试使用二分查找的方式，提高算法的执行效率，例如：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func naiveContains(_ value: Int, in array: [Int]) -&gt; Bool &#123;\n    guard !array.isEmpty else &#123; return false &#125;\n    let middleIndex &#x3D; array.count &#x2F; 2\n    \n    if value &lt;&#x3D; array[middleIndex] &#123;\n        for index in 0 ..&lt; middleIndex &#123;\n            if array[index] &#x3D;&#x3D; value &#123;\n                return true\n            &#125;\n        &#125;\n    &#125;else&#123;\n        for index in middleIndex ..&lt; array.count &#123;\n            if array[index] &#x3D;&#x3D; value &#123;\n                return true\n            &#125;\n        &#125;\n    &#125;\n    return false\n&#125;</code></pre>\n\n<p>上述算法仅仅是进行了一个小的优化，即可将耗时减小一半，说明该优化是有意义的。</p>\n<p>该算法首先检查数组的中间值，如果中间值大于目标值，曾说明目标值在数组的前半部分，否则在后半部分。每次只需要检查原有数组的一半的位置即可，这样即节省了内存空间，而且从算法的执行效率或者算法的响应能力上来说，算是一个成功的算法优化。</p>\n<p>该算法可以重复有效地丢弃一半的数据，从而提高算法执行效率。对数时间复杂度可视化可表示为：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/3/logarithmic-time.png\"></p>\n<p>随着输入的增加，耗时的增加相对比较缓慢。如果仔细观察该图像，可以发现耗时呈现不温不火的现象，因为在算法的具体执行中，输入的一半已经被丢弃，算法并不关心他们。</p>\n<p>如果你有100个元素，那么算法最终会压缩到50个元素进行检索，如果有100000个元素，最终执行时，算法只关心50000个元素而已。数据越多，丢弃的元素也就越多，最终的执行耗时和数据的输入大小之间便呈现了如上图所示的关系。对数时间复杂度使用大O符号表示为**O(log n)**。</p>\n<h3 id=\"准线性时间复杂度\"><a href=\"#准线性时间复杂度\" class=\"headerlink\" title=\"准线性时间复杂度\"></a>准线性时间复杂度</h3><p>另一个常见时间复杂度是<strong>准线性时间复杂度</strong>。准线性时间算法的性能比线性时间差，但明显优于二次时间复杂度。在Swift中典型的算法是数组的<strong>sort</strong>算法。</p>\n<p>准线性时间复杂度的大O表示是<strong>O（n log n）</strong>，它是线性和对数时间的乘积。因此，准线性拟合与对数时间与线性时间不相契合；它比线性时间差一个量级，但仍比接下来您将看到的许多其他复杂性要好。下图：</p>\n<p><img src=\"/images/Data-Structures-&-Algorithms-in-Swift/3/quasilinear-time.png\"></p>\n<p>准线性时间复杂性与二次时间有着类似的曲线，但对大型数据集的弹性更大。</p>\n<h3 id=\"其他时间复杂度\"><a href=\"#其他时间复杂度\" class=\"headerlink\" title=\"其他时间复杂度\"></a>其他时间复杂度</h3><p>上述五种时间复杂度是程序开发中经常遇到的，还有其他的一些时间复杂度，例如多项式时间、指数时间、因子时间等。但是需要说明的是，时间复杂度并不能判断算法的执行速度，两种算法可能具有相同的时间复杂度，但是其中一种可能仍比其他算法快得多，对于小型数据集，时间复杂度可能不是实际算法执行时间的准确衡量。</p>\n<p>例如，如果数据集较小，则插入排序等二次算法可能比准线性算法（如合并排序）更快。这是因为插入排序不需要分配额外的内存来执行算法，而合并排序需要分配多个数组。对于小型数据集，相对于算法需要接触的元素数，内存分配可能会非更加昂贵。</p>\n<h2 id=\"时间复杂度的比较\"><a href=\"#时间复杂度的比较\" class=\"headerlink\" title=\"时间复杂度的比较\"></a>时间复杂度的比较</h2><p>假设你编写了一个求从 1 到 n 和的算法，如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func sumFromOne(upto n: Int) -&gt; Int &#123;\n    var result &#x3D; 0\n    for i in 1 ... n &#123;\n        result +&#x3D; i\n    &#125;\n    return result\n&#125;\n\nsumFromOne(upto: 10000)</code></pre>\n\n<p>上述代码中的循环将执行10000次，最终得到结果50005000。该算法是O(n)时间复杂度。但是如何改进一下该算法如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func sumFromOne2(upto n: Int) -&gt; Int &#123;\n    return (1 ... n).reduce(0, +)\n&#125;\n\nsumFromOne2(upto: 10000)</code></pre>\n\n<p>解决同样的问题，但是该实现的执行上会比上面循环的代码快很多，但是这里的时间复杂度依然是O(n)。使用<code>reduce</code>时，系统内部会执行 <code>n</code>次加法，但是调用的是Swift标准库中已经编译的代码，因此省去了很大一部分代码的编译时间。</p>\n<p>继续优化上述代码，如下：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func sumFromOne3(upto n: Int) -&gt; Int &#123;\n    return (n + 1) * n &#x2F; 2\n&#125;\n\nsumFromOne3(upto: 10000)</code></pre>\n\n<p>整个版本的算法使用了弗雷德里克·高斯算法，可以使用简单的算术计算总和。该算法的最时间复杂度是<strong>O（1）</strong>，属于恒定时间算法。也是该特定问题在时间复杂度上的的最优算法。</p>\n<h2 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h2><p>算法的时间复杂度有助于预测算法的可伸缩性，但它并不是唯一的指标。<strong>空间复杂性是算法运行所需的资源的度量。</strong> 对于计算机而言，内存一直是昂贵而紧俏的资源。假设有以下代码：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func printSorted(_ array: [Int]) &#123;\n    let sorted &#x3D; array.sorted()\n    for element in sorted &#123;\n        print(element)\n    &#125;\n&#125;</code></pre>\n\n<p>上述代码创建了一个排序后的数组拷贝并遍历该数据，打印其中元素。为了计算其空闲复杂度，需要分析该函数的内存开辟情况。</p>\n<p>**array.sorted()**方法的调用系统会新建一个和原数组同样大小和类型的新数组，因此<code>printSorted</code>函数的空间复杂度是 **O(n)**。当然对于在内存中开辟尽量小的空间而言，该函数是简单而轻量的。可以将上述函数修改为如下方式：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">func printSorted2(_ array: [Int]) &#123;\n    &#x2F;&#x2F; 1\n    guard !array.isEmpty else &#123; return &#125;\n    \n    &#x2F;&#x2F; 2\n    var currentCount &#x3D; 0\n    var minValue &#x3D; Int.min\n    \n    &#x2F;&#x2F; 3\n    for value in array &#123;\n        if value &#x3D;&#x3D; minValue &#123;\n            print(value)\n            currentCount +&#x3D; 1\n        &#125;\n    &#125;\n    \n    while currentCount &lt; array.count &#123;\n        &#x2F;&#x2F; 4\n        var currentValue &#x3D; array.max()!\n        \n        for value in array &#123;\n            if value &lt; currentValue &amp;&amp; value &gt; minValue &#123;\n                currentValue &#x3D; value\n            &#125;\n        &#125;\n        \n        &#x2F;&#x2F; 5\n        for value in array &#123;\n            if value &#x3D;&#x3D; currentValue &#123;\n                print(value)\n                currentCount +&#x3D; 1\n            &#125;\n        &#125;\n        \n        &#x2F;&#x2F; 6\n        minValue &#x3D; currentValue\n    &#125;\n&#125;</code></pre>\n\n<p>此实现尊重空间限制。总体目标是多次遍历迭代数组，为每个迭代打印下一个最小值。</p>\n<ol>\n<li><p>检查是否数组为空的情况。如果是，则不打印内容。</p>\n</li>\n<li><p><code>currentCount</code>跟踪打印语句的数量。<code>minValue</code> 存储最后一个打印值。</p>\n</li>\n<li><p>算法首先打印出与 <code>minValue</code>  匹配的所有值，并根据打印语句的数量更新当前计数。</p>\n</li>\n<li><p>使用 <code>while</code> 循环，算法查找大于 <code>minValue</code>  的最小值并将其存储在当前值中。</p>\n</li>\n<li><p>然后，该算法在更新<code>currentCount</code>的同时打印数组内所有<code>currentValue</code>的值。</p>\n</li>\n<li><p><code>minValue</code> 设置为<code>currentValue</code>，因此下一次迭代将尝试查找下一个最小值。</p>\n</li>\n</ol>\n<p>上述算法仅分配内存以跟踪几个变量，因此空间复杂性为 **O(1)**。这与前面的函数不同，后者分配整个数组以创建源数组的排序表示形式。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PS: 在实际开发中并不会为了追求类似的空间，而将代码写成上述样子，上述代码仅仅是为了说明代码的不同写法，会导致算法的空间复杂度有质的飞跃。</p></blockquote>\n<h2 id=\"关键点总结\"><a href=\"#关键点总结\" class=\"headerlink\" title=\"关键点总结\"></a>关键点总结</h2><ul>\n<li><strong>时间复杂度</strong>是对输入大小增加时，算法运行时间的衡量；</li>\n<li><strong>空间复杂度</strong>是对算法运行时，对资源使用情况的衡量；</li>\n<li><strong>大O符号表示法</strong>是用于表示时间和空间复杂性的一般形式；</li>\n<li>时间和空间复杂性是可伸缩性的高级度量，它们不测量算法本身的实际速度；</li>\n<li>对于小型数据集，时间复杂性通常无关紧要。准线性算法可能比线性算法慢。</li>\n</ul>\n","text":"算法复杂度的衡量问题在软件开发的诞生早起就已经被提出来，并且有多个方面具体的问题。例如，从系统的架构来看，可伸缩性的架构设计和算法实现，应用程序是如何在数据特征增加的情况下被合理有效地激活的；从数据库的角度来看，数据库的处理能力是否能够应对越来越多的数据和用户行为等。 对于算法而...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">时间复杂度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%81%92%E5%AE%9A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">恒定时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">线性时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E6%AC%A1%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">二次时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%95%B0%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">对数时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%86%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">准线性时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">其他时间复杂度</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">时间复杂度的比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">空间复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E7%82%B9%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">关键点总结</span></a></li></ol>","author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"mapped":true,"prev_post":{"title":"\\#2\\ 认识 Array & Dictionary","uid":"c0089ea14d61cc249075e2e9c2241913","slug":"2019-12-01-Data-Structures-&-Algorithms-in-Swift-02","date":"2023-05-22T03:17:40.067Z","updated":"2023-05-22T03:17:40.067Z","comments":true,"path":"api/articles/2019-12-01-Data-Structures-&-Algorithms-in-Swift-02.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/2/cover.jpg","text":"在 Swift Standard Library 中包含了Swift语言的核心组件。在标准库框架中你可以发现很多可用于应用程序开发的同居和类型，在开始设计自己的数据结构前，了解Swift语言本身的语言特性是设计良好数据结构和算法设计的基础。 在此篇内容中，着重了解 Swift S...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},"next_post":{"title":"\\#4\\ 单向链表的Swift实现","uid":"433ae949273168d0f60f97343029174d","slug":"2019-12-03-Data-Structures-&-Algorithms-in-Swift-04","date":"2023-05-22T03:17:40.067Z","updated":"2023-05-22T03:17:40.067Z","comments":true,"path":"api/articles/2019-12-03-Data-Structures-&-Algorithms-in-Swift-04.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/4/cover.jpg","text":"链表是一种线性的、单向的数据结构，不同于数组连续的内存存储，链表中的元素在内存是独立的对象。链表具有以下理论优势： 元素插入和从列表头部删除元素的时间恒定； 具有可靠的性能特性。 如上图所示，链表的结构是一个节点结构。节点具有两个功能： 保存值； 保存下一个节点的指针。nil节点...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}}