[{"title":"\\#5\\ Linked List && Swift Collection Protocol","uid":"e7521306a70b406b8e5f7047760055b6","slug":"2019-12-04-Data-Structures-&-Algorithms-in-Swift-05","date":"2023-05-13T11:29:06.795Z","updated":"2023-05-13T11:29:06.795Z","comments":true,"path":"api/articles/2019-12-04-Data-Structures-&-Algorithms-in-Swift-05.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/5/cover.jpg","text":"在Swift标准库（Swift standard library）中定义了很多协议或协议的集合，这些协议分别对应了特定的数据类型，每个协议都对所定义的数据类型有一些特性和性能方面的保证，而对于开发者而言，这些协议也是自定义数据结构和对现有数据类型进行扩展的基础准则。在这些协议的集...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},{"title":"\\#4\\ 单向链表的Swift实现","uid":"433ae949273168d0f60f97343029174d","slug":"2019-12-03-Data-Structures-&-Algorithms-in-Swift-04","date":"2023-05-13T11:29:06.795Z","updated":"2023-05-13T11:29:06.795Z","comments":true,"path":"api/articles/2019-12-03-Data-Structures-&-Algorithms-in-Swift-04.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/4/cover.jpg","text":"链表是一种线性的、单向的数据结构，不同于数组连续的内存存储，链表中的元素在内存是独立的对象。链表具有以下理论优势： 元素插入和从列表头部删除元素的时间恒定； 具有可靠的性能特性。 如上图所示，链表的结构是一个节点结构。节点具有两个功能： 保存值； 保存下一个节点的指针。nil节点...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true},{"title":"\\#3\\ 关于时间复杂度和大O符号","uid":"ed1a650be4c536b8ed544197809a0599","slug":"2019-12-02-Data-Structures-&-Algorithms-in-Swift-03","date":"2023-05-13T11:29:06.795Z","updated":"2023-05-13T11:29:06.795Z","comments":true,"path":"api/articles/2019-12-02-Data-Structures-&-Algorithms-in-Swift-03.json","cover":"/images/Data-Structures-&-Algorithms-in-Swift/3/cover.jpg","text":"算法复杂度的衡量问题在软件开发的诞生早起就已经被提出来，并且有多个方面具体的问题。例如，从系统的架构来看，可伸缩性的架构设计和算法实现，应用程序是如何在数据特征增加的情况下被合理有效地激活的；从数据库的角度来看，数据库的处理能力是否能够应对越来越多的数据和用户行为等。 对于算法而...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}},"feature":true}]