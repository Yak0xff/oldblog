{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"postlist":[{"title":"\\#1\\ 为什么要学习数据结构与算法","uid":"e90242255f8181a299a4107cc70159e8","slug":"2019-12-01-Data-Structures-&-Algorithms-in-Swift-01","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-01-Data-Structures-&-Algorithms-in-Swift-01.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/1/cover.jpg","text":"随机网络上有大量的程序员应该学习数据结构和算法的文章。还记得实在大学时代的时候，系统的学习过数据结构、算法相关的课程，而后几乎没有系统学习过了。工作后从一开始的各种业务逻辑的开发，慢慢深入了解到系统底层，了解了代码的执行效率以及对硬件设备资源的消耗基本上都是由数据结构和算法决定的...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#2\\ 认识 Array & Dictionary","uid":"c0089ea14d61cc249075e2e9c2241913","slug":"2019-12-01-Data-Structures-&-Algorithms-in-Swift-02","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-01-Data-Structures-&-Algorithms-in-Swift-02.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/2/cover.jpg","text":"在 Swift Standard Library 中包含了Swift语言的核心组件。在标准库框架中你可以发现很多可用于应用程序开发的同居和类型，在开始设计自己的数据结构前，了解Swift语言本身的语言特性是设计良好数据结构和算法设计的基础。 在此篇内容中，着重了解 Swift S...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#3\\ 关于时间复杂度和大O符号","uid":"ed1a650be4c536b8ed544197809a0599","slug":"2019-12-02-Data-Structures-&-Algorithms-in-Swift-03","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-02-Data-Structures-&-Algorithms-in-Swift-03.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/3/cover.jpg","text":"算法复杂度的衡量问题在软件开发的诞生早起就已经被提出来，并且有多个方面具体的问题。例如，从系统的架构来看，可伸缩性的架构设计和算法实现，应用程序是如何在数据特征增加的情况下被合理有效地激活的；从数据库的角度来看，数据库的处理能力是否能够应对越来越多的数据和用户行为等。 对于算法而...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#4\\ 单向链表的Swift实现","uid":"433ae949273168d0f60f97343029174d","slug":"2019-12-03-Data-Structures-&-Algorithms-in-Swift-04","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-03-Data-Structures-&-Algorithms-in-Swift-04.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/4/cover.jpg","text":"链表是一种线性的、单向的数据结构，不同于数组连续的内存存储，链表中的元素在内存是独立的对象。链表具有以下理论优势： 元素插入和从列表头部删除元素的时间恒定； 具有可靠的性能特性。 如上图所示，链表的结构是一个节点结构。节点具有两个功能： 保存值； 保存下一个节点的指针。nil节点...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#5\\ Linked List && Swift Collection Protocol","uid":"e7521306a70b406b8e5f7047760055b6","slug":"2019-12-04-Data-Structures-&-Algorithms-in-Swift-05","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-04-Data-Structures-&-Algorithms-in-Swift-05.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/5/cover.jpg","text":"在Swift标准库（Swift standard library）中定义了很多协议或协议的集合，这些协议分别对应了特定的数据类型，每个协议都对所定义的数据类型有一些特性和性能方面的保证，而对于开发者而言，这些协议也是自定义数据结构和对现有数据类型进行扩展的基础准则。在这些协议的集...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#6\\ Linked List 挑战","uid":"87b78748d49eafbc45cf485f76a0100a","slug":"2019-12-05-Data-Structures-&-Algorithms-in-Swift-06","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-05-Data-Structures-&-Algorithms-in-Swift-06.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/6/cover.jpg","text":"本文内容将针对LinkedList的五大通用性场景问题，进行求解。这些问题相比多数挑战来说相对简单，主要是为了巩固关于LinkedList的知识。 Challenge 1：创建按照反向顺序打印链表元素的函数。&#x2F;&#x2F; LinkedList 1 -&gt; 2 -&...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#7\\ Stack & Stack Simple Challenges","uid":"d2a03c6015acad9ab2a35a4a08b03676","slug":"2019-12-08-Data-Structures-&-Algorithms-in-Swift-07","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-08-Data-Structures-&-Algorithms-in-Swift-07.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/7/cover.jpeg","text":"栈（Stack）是一个常见的基础类型数据结构，在生活中经常也能看到栈的身影，例如一本书、一叠现金等等。栈的数据结构在概念上和对象的物理存储栈相同。再向栈添加元素时，需要将其放在栈顶，通俗称压栈，而从站内删除元素时，始终删除的是栈顶的元素，又称为出栈，而这种进栈和出栈的特性使得栈属...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#8\\ 队列的Swift实现与操作定义","uid":"69dccdbf9286082e902aaae1dff82001","slug":"2019-12-10-Data-Structures-&-Algorithms-in-Swift-08","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-10-Data-Structures-&-Algorithms-in-Swift-08.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/8/cover.jpg","text":"在生活中，人人都熟悉排队等待。无论你是在排队购买喜欢的电影的电影票，还是排队等待打印一份文件等等，这些都是队列（Queue）数据结构。在上文\\#7\\ Stack &amp; Stack Simple Challenges中已经提到过队列和栈属于基本的数据结构类型，但是其在应用层面...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#9\\ 一般树与树节点遍历","uid":"ad7db3b90885866da085b02a06020b3f","slug":"2019-12-23-Data-Structures-&-Algorithms-in-Swift-09","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-23-Data-Structures-&-Algorithms-in-Swift-09.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/9/cover.png","text":"在计算机编程的世界中，树是一种非常重要的数据结构。树用于解决很多计算机编程世界的挑战，例如： 等级关系的描述 分类数据的管理 分类查找操作 在计算机算法中，树有很多种，每一种都有其特有的形状和大小。在本文中将学习关于树的基础知识，以及使用Swfit编程语言实现树结构等。 术语关于...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#10\\ 二叉树及其有序、前序和后序遍历","uid":"0e0f6f0242f4e4a48493fd0fe5fe0ab7","slug":"2019-12-25-Data-Structures-&-Algorithms-in-Swift-10","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-25-Data-Structures-&-Algorithms-in-Swift-10.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/10/cover.jpg","text":"在上一文中认识了一般树结构，其每一个节点可能会有多个子节点。二叉树也是树型结构，只不过其每一个节点最多只有两个节点，通常称为左节点和右节点。 二叉树的Swift实现首先定义二叉树的基本属性，如下： public class BinaryNode&lt;Element&gt; &#...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#11\\ 二叉搜索树","uid":"1c072eaf9d0ebbcfebf6203a3cb43879","slug":"2019-12-25-Data-Structures-&-Algorithms-in-Swift-11","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-25-Data-Structures-&-Algorithms-in-Swift-11.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/11/cover.jpg","text":"二叉搜索树又称为二叉查找树（BST），是一种支持快速查找、插入和删除操作的树结构，例如下方的决策树，其中选择一方而放弃另一方的所有可能性，从而将问题减半。 在决策树中，一旦做出了决定并选择了某个分支，便不能回头，在选择的分支上一直查找直到叶子节点，得到最终决定。二叉搜索树在上一文...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#12\\ 自平衡二叉搜索树（AVL Trees）","uid":"4085c41c06b2e3ba45ef163b731b2c76","slug":"2019-12-27-Data-Structures-&-Algorithms-in-Swift-12","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2019-12-27-Data-Structures-&-Algorithms-in-Swift-12.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/12/cover.png","text":"在上文中，已经了解二叉搜索树的O(log n)性能特征，但是当二叉搜索树节点删除中，可能会出现不平衡的树，并降低树的性能到O(n)。这一文的内容将学习另一种改进了的二叉搜索树 — 自平衡二叉搜索树。 1962年，Georgy Adelson-Velsky和Evgenii Land...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#13\\ 字典树（Tries Tree）","uid":"7c0350b0f98d8a7fc26f52b6c73852fb","slug":"2020-01-06-Data-Structures-&-Algorithms-in-Swift-13","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2020-01-06-Data-Structures-&-Algorithms-in-Swift-13.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/13/cover.jpg","text":"Tries 是一颗用于存储可以表示为集合的数据的树，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#14\\ 二分查找（Binary Search）","uid":"193dbb4158d425c4c3d00532baa1c670","slug":"2020-01-07-Data-Structures-&-Algorithms-in-Swift-14","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2020-01-07-Data-Structures-&-Algorithms-in-Swift-14.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/14/cover.jpg","text":"二分查找是时间复杂度为O(log n)的搜索算法中较为高效的算法之一，这一点和在平衡的二叉搜索树中搜索元素的时间复杂度相当。在使用二分查找之前，有两个条件需要预先满足： 集合必须是在恒定的时间内执行索引操作，意味着集合必须是RandomAccessCollection类型的； 集...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#15\\ 堆数据结构（The Heap Data Structure）","uid":"4a00ba60db357b4d5652c54beb6b2091","slug":"2020-01-10-Data-Structures-&-Algorithms-in-Swift-15","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2020-01-10-Data-Structures-&-Algorithms-in-Swift-15.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/15/cover.jpg","text":"想必抓娃娃机如今没有人不知道其实什么了，抓娃娃机的爪子总是那么的难以控制，总是看起来容易的机会却难以如愿。抓抓机的爪子其实就工作在一个堆数据结构之上，爪子每次抓的几乎都是那边一堆玩具最上面的那一个，只有这样机会才会更大一些。 在本文中将学习关于堆（Heap）的基础知识，包含如何创...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#16\\ 优先级队列","uid":"5d749126a5c6ef9bea973d557d834975","slug":"2020-01-12-Data-Structures-&-Algorithms-in-Swift-16","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2020-01-12-Data-Structures-&-Algorithms-in-Swift-16.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/16/cover.png","text":"队列是一种先进先出（FIFO）的数据结构，而优先级队列是另一种队列结构，其可替代队列的先进先出顺序，该队列中的元素有着优先级的顺序。一个优先级队列也可以是： 最大优先级队列：队列中最前面的元素具有最高优先级； 最小优先级队列：队列中最前面的元素具有最低优先级。 当需要在给定的元素...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#17\\ 排序算法O(n^2)","uid":"8ac62db54bf242691e8bc332c52f0b5b","slug":"2020-01-15-Data-Structures-&-Algorithms-in-Swift-17","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2020-01-15-Data-Structures-&-Algorithms-in-Swift-17.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/17/cover.jpg","text":"**O(n^2)**的时间复杂度并不是一个最佳的性能表现，但是在某些情况下，该类别的排序算法非常有用，此类算法的空间复杂度表现良好，仅仅需要O(1)的恒定的额外内存空间，对于小型数据集来说，此类排序算法比更为复杂的排序算法更为有利。 在本文中，将学习饿三种不同的、O(n^2)时间...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#18\\ 归并排序（Merge Sort）","uid":"05deaa37bb6b9b668ab83d05b4918b64","slug":"2020-01-30-Data-Structures-&-Algorithms-in-Swift-18","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2020-01-30-Data-Structures-&-Algorithms-in-Swift-18.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/18/cover.jpg","text":"归并排序[Merge Sort]是最有效的排序算法之一，它的时间复杂度为O(n log n)，是所有通用排序算法中速度最快的一种。归并排序背后的思想是分而治之，即将一个大问题分解成多个更小、更易于解决的问题，然后将各个小问题的结果合并为最终结果。归并排序的终极秘诀是先拆分后合并。...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#19\\ 基数排序（Radix Sort）","uid":"1eff6ae9330e74043f153497674d46df","slug":"2020-02-01-Data-Structures-&-Algorithms-in-Swift-19","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2020-02-01-Data-Structures-&-Algorithms-in-Swift-19.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/19/cover.jpg","text":"**基数排序[Radix Sort]**是一种在线性时间内对整数进行排序的非比较算法。 为了简单起见，在本文中将关注以10为基数的整数排序，以及基数排序中的*最小有效位[LSD]*的变体等。 示例为了进行基数排序的工作方式，假设需要对如下的集合进行排序： var array &#...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}},{"title":"\\#20\\ 堆排序（Heap Sort）","uid":"b14270b802509aef1b418b7534f574dc","slug":"2020-02-03-Data-Structures-&-Algorithms-in-Swift-20","date":"2023-05-13T15:12:20.139Z","updated":"2023-05-13T15:12:20.139Z","comments":true,"path":"api/articles/2020-02-03-Data-Structures-&-Algorithms-in-Swift-20.json","keywords":null,"cover":"/images/Data-Structures-&-Algorithms-in-Swift/20/cover.jpg","text":"**堆排序[Heap Sort]**是另一种基于比较的排序算法，其利用堆对数组进行升序排序。关于堆数据结构，可以查看\\#15\\ 堆数据结构（The Heap Data Structure）中的介绍。 堆排序使用的是堆的优势，根据堆的定义，一个部分排序的二叉树具有如下的特质： 在最...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Data Structures & Algorithms in Swift","slug":"Data-Structures-Algorithms-in-Swift","count":20,"path":"api/categories/Data-Structures-Algorithms-in-Swift.json"}],"tags":[{"name":"Swift中的数据结构与算法","slug":"Swift中的数据结构与算法","count":20,"path":"api/tags/Swift中的数据结构与算法.json"}],"author":{"slug":"undefined","avatar":"/img/avatar.jpg","link":"https://github.com/zycslog","description":"","socials":{}}}]}